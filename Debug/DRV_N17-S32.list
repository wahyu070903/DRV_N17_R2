
DRV_N17-S32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cac  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08007dc0  08007dc0  00008dc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ed8  08007ed8  00009080  2**0
                  CONTENTS
  4 .ARM          00000000  08007ed8  08007ed8  00009080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ed8  08007ed8  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ed8  08007ed8  00008ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007edc  08007edc  00008edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08007ee0  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000134c  20000080  08007f60  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013cc  08007f60  000093cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020229  00000000  00000000  000090a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004127  00000000  00000000  000292d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  0002d400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001114  00000000  00000000  0002e990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a859  00000000  00000000  0002faa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e5b  00000000  00000000  0004a2fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009706a  00000000  00000000  0006d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001041c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e4  00000000  00000000  00104208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000da51  00000000  00000000  001087ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0011623d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08007da4 	.word	0x08007da4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08007da4 	.word	0x08007da4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2uiz>:
 8000a28:	004a      	lsls	r2, r1, #1
 8000a2a:	d211      	bcs.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a30:	d211      	bcs.n	8000a56 <__aeabi_d2uiz+0x2e>
 8000a32:	d50d      	bpl.n	8000a50 <__aeabi_d2uiz+0x28>
 8000a34:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d40e      	bmi.n	8000a5c <__aeabi_d2uiz+0x34>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a4e:	4770      	bx	lr
 8000a50:	f04f 0000 	mov.w	r0, #0
 8000a54:	4770      	bx	lr
 8000a56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_d2uiz+0x3a>
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0000 	mov.w	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2f>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a70:	bf24      	itt	cs
 8000a72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a7a:	d90d      	bls.n	8000a98 <__aeabi_d2f+0x30>
 8000a7c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a88:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a90:	bf08      	it	eq
 8000a92:	f020 0001 	biceq.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a9c:	d121      	bne.n	8000ae2 <__aeabi_d2f+0x7a>
 8000a9e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aa2:	bfbc      	itt	lt
 8000aa4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	4770      	bxlt	lr
 8000aaa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab2:	f1c2 0218 	rsb	r2, r2, #24
 8000ab6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000abe:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac2:	bf18      	it	ne
 8000ac4:	f040 0001 	orrne.w	r0, r0, #1
 8000ac8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000acc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad4:	ea40 000c 	orr.w	r0, r0, ip
 8000ad8:	fa23 f302 	lsr.w	r3, r3, r2
 8000adc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae0:	e7cc      	b.n	8000a7c <__aeabi_d2f+0x14>
 8000ae2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ae6:	d107      	bne.n	8000af8 <__aeabi_d2f+0x90>
 8000ae8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aec:	bf1e      	ittt	ne
 8000aee:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000af2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000af6:	4770      	bxne	lr
 8000af8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_frsub>:
 8000b08:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	e002      	b.n	8000b14 <__addsf3>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_fsub>:
 8000b10:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b14 <__addsf3>:
 8000b14:	0042      	lsls	r2, r0, #1
 8000b16:	bf1f      	itttt	ne
 8000b18:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b1c:	ea92 0f03 	teqne	r2, r3
 8000b20:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b24:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b28:	d06a      	beq.n	8000c00 <__addsf3+0xec>
 8000b2a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b2e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b32:	bfc1      	itttt	gt
 8000b34:	18d2      	addgt	r2, r2, r3
 8000b36:	4041      	eorgt	r1, r0
 8000b38:	4048      	eorgt	r0, r1
 8000b3a:	4041      	eorgt	r1, r0
 8000b3c:	bfb8      	it	lt
 8000b3e:	425b      	neglt	r3, r3
 8000b40:	2b19      	cmp	r3, #25
 8000b42:	bf88      	it	hi
 8000b44:	4770      	bxhi	lr
 8000b46:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b4a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b5a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b5e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4249      	negne	r1, r1
 8000b66:	ea92 0f03 	teq	r2, r3
 8000b6a:	d03f      	beq.n	8000bec <__addsf3+0xd8>
 8000b6c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b70:	fa41 fc03 	asr.w	ip, r1, r3
 8000b74:	eb10 000c 	adds.w	r0, r0, ip
 8000b78:	f1c3 0320 	rsb	r3, r3, #32
 8000b7c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b80:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b84:	d502      	bpl.n	8000b8c <__addsf3+0x78>
 8000b86:	4249      	negs	r1, r1
 8000b88:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b8c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b90:	d313      	bcc.n	8000bba <__addsf3+0xa6>
 8000b92:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b96:	d306      	bcc.n	8000ba6 <__addsf3+0x92>
 8000b98:	0840      	lsrs	r0, r0, #1
 8000b9a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b9e:	f102 0201 	add.w	r2, r2, #1
 8000ba2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ba4:	d251      	bcs.n	8000c4a <__addsf3+0x136>
 8000ba6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000baa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bae:	bf08      	it	eq
 8000bb0:	f020 0001 	biceq.w	r0, r0, #1
 8000bb4:	ea40 0003 	orr.w	r0, r0, r3
 8000bb8:	4770      	bx	lr
 8000bba:	0049      	lsls	r1, r1, #1
 8000bbc:	eb40 0000 	adc.w	r0, r0, r0
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	bf28      	it	cs
 8000bc4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bc8:	d2ed      	bcs.n	8000ba6 <__addsf3+0x92>
 8000bca:	fab0 fc80 	clz	ip, r0
 8000bce:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bd2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bd6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bda:	bfaa      	itet	ge
 8000bdc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000be0:	4252      	neglt	r2, r2
 8000be2:	4318      	orrge	r0, r3
 8000be4:	bfbc      	itt	lt
 8000be6:	40d0      	lsrlt	r0, r2
 8000be8:	4318      	orrlt	r0, r3
 8000bea:	4770      	bx	lr
 8000bec:	f092 0f00 	teq	r2, #0
 8000bf0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bf4:	bf06      	itte	eq
 8000bf6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bfa:	3201      	addeq	r2, #1
 8000bfc:	3b01      	subne	r3, #1
 8000bfe:	e7b5      	b.n	8000b6c <__addsf3+0x58>
 8000c00:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c08:	bf18      	it	ne
 8000c0a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c0e:	d021      	beq.n	8000c54 <__addsf3+0x140>
 8000c10:	ea92 0f03 	teq	r2, r3
 8000c14:	d004      	beq.n	8000c20 <__addsf3+0x10c>
 8000c16:	f092 0f00 	teq	r2, #0
 8000c1a:	bf08      	it	eq
 8000c1c:	4608      	moveq	r0, r1
 8000c1e:	4770      	bx	lr
 8000c20:	ea90 0f01 	teq	r0, r1
 8000c24:	bf1c      	itt	ne
 8000c26:	2000      	movne	r0, #0
 8000c28:	4770      	bxne	lr
 8000c2a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c2e:	d104      	bne.n	8000c3a <__addsf3+0x126>
 8000c30:	0040      	lsls	r0, r0, #1
 8000c32:	bf28      	it	cs
 8000c34:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c38:	4770      	bx	lr
 8000c3a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c3e:	bf3c      	itt	cc
 8000c40:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bxcc	lr
 8000c46:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c4a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c4e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c52:	4770      	bx	lr
 8000c54:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c58:	bf16      	itet	ne
 8000c5a:	4608      	movne	r0, r1
 8000c5c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c60:	4601      	movne	r1, r0
 8000c62:	0242      	lsls	r2, r0, #9
 8000c64:	bf06      	itte	eq
 8000c66:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c6a:	ea90 0f01 	teqeq	r0, r1
 8000c6e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c72:	4770      	bx	lr

08000c74 <__aeabi_ui2f>:
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	e004      	b.n	8000c84 <__aeabi_i2f+0x8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_i2f>:
 8000c7c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c80:	bf48      	it	mi
 8000c82:	4240      	negmi	r0, r0
 8000c84:	ea5f 0c00 	movs.w	ip, r0
 8000c88:	bf08      	it	eq
 8000c8a:	4770      	bxeq	lr
 8000c8c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c90:	4601      	mov	r1, r0
 8000c92:	f04f 0000 	mov.w	r0, #0
 8000c96:	e01c      	b.n	8000cd2 <__aeabi_l2f+0x2a>

08000c98 <__aeabi_ul2f>:
 8000c98:	ea50 0201 	orrs.w	r2, r0, r1
 8000c9c:	bf08      	it	eq
 8000c9e:	4770      	bxeq	lr
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e00a      	b.n	8000cbc <__aeabi_l2f+0x14>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_l2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__aeabi_l2f+0x14>
 8000cb6:	4240      	negs	r0, r0
 8000cb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cbc:	ea5f 0c01 	movs.w	ip, r1
 8000cc0:	bf02      	ittt	eq
 8000cc2:	4684      	moveq	ip, r0
 8000cc4:	4601      	moveq	r1, r0
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ccc:	bf08      	it	eq
 8000cce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cd6:	fabc f28c 	clz	r2, ip
 8000cda:	3a08      	subs	r2, #8
 8000cdc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ce0:	db10      	blt.n	8000d04 <__aeabi_l2f+0x5c>
 8000ce2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cec:	f1c2 0220 	rsb	r2, r2, #32
 8000cf0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cf4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf8:	eb43 0002 	adc.w	r0, r3, r2
 8000cfc:	bf08      	it	eq
 8000cfe:	f020 0001 	biceq.w	r0, r0, #1
 8000d02:	4770      	bx	lr
 8000d04:	f102 0220 	add.w	r2, r2, #32
 8000d08:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d14:	fa21 f202 	lsr.w	r2, r1, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_fmul>:
 8000d24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d32:	ea92 0f0c 	teqne	r2, ip
 8000d36:	ea93 0f0c 	teqne	r3, ip
 8000d3a:	d06f      	beq.n	8000e1c <__aeabi_fmul+0xf8>
 8000d3c:	441a      	add	r2, r3
 8000d3e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d42:	0240      	lsls	r0, r0, #9
 8000d44:	bf18      	it	ne
 8000d46:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d4a:	d01e      	beq.n	8000d8a <__aeabi_fmul+0x66>
 8000d4c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d50:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d54:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d58:	fba0 3101 	umull	r3, r1, r0, r1
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d60:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d64:	bf3e      	ittt	cc
 8000d66:	0049      	lslcc	r1, r1, #1
 8000d68:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	ea40 0001 	orr.w	r0, r0, r1
 8000d72:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d76:	2afd      	cmp	r2, #253	@ 0xfd
 8000d78:	d81d      	bhi.n	8000db6 <__aeabi_fmul+0x92>
 8000d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d82:	bf08      	it	eq
 8000d84:	f020 0001 	biceq.w	r0, r0, #1
 8000d88:	4770      	bx	lr
 8000d8a:	f090 0f00 	teq	r0, #0
 8000d8e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d92:	bf08      	it	eq
 8000d94:	0249      	lsleq	r1, r1, #9
 8000d96:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d9a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d9e:	3a7f      	subs	r2, #127	@ 0x7f
 8000da0:	bfc2      	ittt	gt
 8000da2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000da6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000daa:	4770      	bxgt	lr
 8000dac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	3a01      	subs	r2, #1
 8000db6:	dc5d      	bgt.n	8000e74 <__aeabi_fmul+0x150>
 8000db8:	f112 0f19 	cmn.w	r2, #25
 8000dbc:	bfdc      	itt	le
 8000dbe:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dc2:	4770      	bxle	lr
 8000dc4:	f1c2 0200 	rsb	r2, r2, #0
 8000dc8:	0041      	lsls	r1, r0, #1
 8000dca:	fa21 f102 	lsr.w	r1, r1, r2
 8000dce:	f1c2 0220 	rsb	r2, r2, #32
 8000dd2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dda:	f140 0000 	adc.w	r0, r0, #0
 8000dde:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000de2:	bf08      	it	eq
 8000de4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de8:	4770      	bx	lr
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fmul+0xce>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xe6>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fmul+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	bf18      	it	ne
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_fmul+0x11e>
 8000e2c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e30:	bf18      	it	ne
 8000e32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e36:	d1d8      	bne.n	8000dea <__aeabi_fmul+0xc6>
 8000e38:	ea80 0001 	eor.w	r0, r0, r1
 8000e3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e40:	4770      	bx	lr
 8000e42:	f090 0f00 	teq	r0, #0
 8000e46:	bf17      	itett	ne
 8000e48:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e4c:	4608      	moveq	r0, r1
 8000e4e:	f091 0f00 	teqne	r1, #0
 8000e52:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e56:	d014      	beq.n	8000e82 <__aeabi_fmul+0x15e>
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	d101      	bne.n	8000e62 <__aeabi_fmul+0x13e>
 8000e5e:	0242      	lsls	r2, r0, #9
 8000e60:	d10f      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e62:	ea93 0f0c 	teq	r3, ip
 8000e66:	d103      	bne.n	8000e70 <__aeabi_fmul+0x14c>
 8000e68:	024b      	lsls	r3, r1, #9
 8000e6a:	bf18      	it	ne
 8000e6c:	4608      	movne	r0, r1
 8000e6e:	d108      	bne.n	8000e82 <__aeabi_fmul+0x15e>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e80:	4770      	bx	lr
 8000e82:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e86:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_fdiv>:
 8000e8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e94:	bf1e      	ittt	ne
 8000e96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e9a:	ea92 0f0c 	teqne	r2, ip
 8000e9e:	ea93 0f0c 	teqne	r3, ip
 8000ea2:	d069      	beq.n	8000f78 <__aeabi_fdiv+0xec>
 8000ea4:	eba2 0203 	sub.w	r2, r2, r3
 8000ea8:	ea80 0c01 	eor.w	ip, r0, r1
 8000eac:	0249      	lsls	r1, r1, #9
 8000eae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eb2:	d037      	beq.n	8000f24 <__aeabi_fdiv+0x98>
 8000eb4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eb8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ebc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ec0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	bf38      	it	cc
 8000ec8:	005b      	lslcc	r3, r3, #1
 8000eca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ece:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	bf24      	itt	cs
 8000ed6:	1a5b      	subcs	r3, r3, r1
 8000ed8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000edc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ee6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eee:	bf24      	itt	cs
 8000ef0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000efc:	bf24      	itt	cs
 8000efe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	bf18      	it	ne
 8000f0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f0e:	d1e0      	bne.n	8000ed2 <__aeabi_fdiv+0x46>
 8000f10:	2afd      	cmp	r2, #253	@ 0xfd
 8000f12:	f63f af50 	bhi.w	8000db6 <__aeabi_fmul+0x92>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f1c:	bf08      	it	eq
 8000f1e:	f020 0001 	biceq.w	r0, r0, #1
 8000f22:	4770      	bx	lr
 8000f24:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f2c:	327f      	adds	r2, #127	@ 0x7f
 8000f2e:	bfc2      	ittt	gt
 8000f30:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f38:	4770      	bxgt	lr
 8000f3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f3e:	f04f 0300 	mov.w	r3, #0
 8000f42:	3a01      	subs	r2, #1
 8000f44:	e737      	b.n	8000db6 <__aeabi_fmul+0x92>
 8000f46:	f092 0f00 	teq	r2, #0
 8000f4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f4e:	bf02      	ittt	eq
 8000f50:	0040      	lsleq	r0, r0, #1
 8000f52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f56:	3a01      	subeq	r2, #1
 8000f58:	d0f9      	beq.n	8000f4e <__aeabi_fdiv+0xc2>
 8000f5a:	ea40 000c 	orr.w	r0, r0, ip
 8000f5e:	f093 0f00 	teq	r3, #0
 8000f62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0049      	lsleq	r1, r1, #1
 8000f6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f6e:	3b01      	subeq	r3, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xda>
 8000f72:	ea41 010c 	orr.w	r1, r1, ip
 8000f76:	e795      	b.n	8000ea4 <__aeabi_fdiv+0x18>
 8000f78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f7c:	ea92 0f0c 	teq	r2, ip
 8000f80:	d108      	bne.n	8000f94 <__aeabi_fdiv+0x108>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	f47f af7d 	bne.w	8000e82 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	f47f af70 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e776      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_fdiv+0x118>
 8000f9a:	024b      	lsls	r3, r1, #9
 8000f9c:	f43f af4c 	beq.w	8000e38 <__aeabi_fmul+0x114>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e76e      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fa4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fa8:	bf18      	it	ne
 8000faa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fae:	d1ca      	bne.n	8000f46 <__aeabi_fdiv+0xba>
 8000fb0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fb4:	f47f af5c 	bne.w	8000e70 <__aeabi_fmul+0x14c>
 8000fb8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fbc:	f47f af3c 	bne.w	8000e38 <__aeabi_fmul+0x114>
 8000fc0:	e75f      	b.n	8000e82 <__aeabi_fmul+0x15e>
 8000fc2:	bf00      	nop

08000fc4 <__gesf2>:
 8000fc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc8:	e006      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__lesf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	e002      	b.n	8000fd8 <__cmpsf2+0x4>
 8000fd2:	bf00      	nop

08000fd4 <__cmpsf2>:
 8000fd4:	f04f 0c01 	mov.w	ip, #1
 8000fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	bf18      	it	ne
 8000fea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fee:	d011      	beq.n	8001014 <__cmpsf2+0x40>
 8000ff0:	b001      	add	sp, #4
 8000ff2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ff6:	bf18      	it	ne
 8000ff8:	ea90 0f01 	teqne	r0, r1
 8000ffc:	bf58      	it	pl
 8000ffe:	ebb2 0003 	subspl.w	r0, r2, r3
 8001002:	bf88      	it	hi
 8001004:	17c8      	asrhi	r0, r1, #31
 8001006:	bf38      	it	cc
 8001008:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800100c:	bf18      	it	ne
 800100e:	f040 0001 	orrne.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001018:	d102      	bne.n	8001020 <__cmpsf2+0x4c>
 800101a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800101e:	d105      	bne.n	800102c <__cmpsf2+0x58>
 8001020:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001024:	d1e4      	bne.n	8000ff0 <__cmpsf2+0x1c>
 8001026:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800102a:	d0e1      	beq.n	8000ff0 <__cmpsf2+0x1c>
 800102c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__aeabi_cfrcmple>:
 8001034:	4684      	mov	ip, r0
 8001036:	4608      	mov	r0, r1
 8001038:	4661      	mov	r1, ip
 800103a:	e7ff      	b.n	800103c <__aeabi_cfcmpeq>

0800103c <__aeabi_cfcmpeq>:
 800103c:	b50f      	push	{r0, r1, r2, r3, lr}
 800103e:	f7ff ffc9 	bl	8000fd4 <__cmpsf2>
 8001042:	2800      	cmp	r0, #0
 8001044:	bf48      	it	mi
 8001046:	f110 0f00 	cmnmi.w	r0, #0
 800104a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800104c <__aeabi_fcmpeq>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff fff4 	bl	800103c <__aeabi_cfcmpeq>
 8001054:	bf0c      	ite	eq
 8001056:	2001      	moveq	r0, #1
 8001058:	2000      	movne	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmplt>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff ffea 	bl	800103c <__aeabi_cfcmpeq>
 8001068:	bf34      	ite	cc
 800106a:	2001      	movcc	r0, #1
 800106c:	2000      	movcs	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_fcmple>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffe0 	bl	800103c <__aeabi_cfcmpeq>
 800107c:	bf94      	ite	ls
 800107e:	2001      	movls	r0, #1
 8001080:	2000      	movhi	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_fcmpge>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffd2 	bl	8001034 <__aeabi_cfrcmple>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_fcmpgt>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffc8 	bl	8001034 <__aeabi_cfrcmple>
 80010a4:	bf34      	ite	cc
 80010a6:	2001      	movcc	r0, #1
 80010a8:	2000      	movcs	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010b0:	4b03      	ldr	r3, [pc, #12]	@ (80010c0 <vApplicationGetIdleTaskMemory+0x10>)
 80010b2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010b4:	4b03      	ldr	r3, [pc, #12]	@ (80010c4 <vApplicationGetIdleTaskMemory+0x14>)
 80010b6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010b8:	2380      	movs	r3, #128	@ 0x80
 80010ba:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	2000029c 	.word	0x2000029c
 80010c4:	2000009c 	.word	0x2000009c

080010c8 <i2c_reset>:
		}
		HAL_Delay(5);
	}
}

void i2c_reset(I2C_HandleTypeDef* hi2c) {
 80010c8:	b538      	push	{r3, r4, r5, lr}
 80010ca:	4604      	mov	r4, r0
	__HAL_RCC_I2C1_FORCE_RESET();
 80010cc:	4d0c      	ldr	r5, [pc, #48]	@ (8001100 <i2c_reset+0x38>)
 80010ce:	692b      	ldr	r3, [r5, #16]
 80010d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010d4:	612b      	str	r3, [r5, #16]
	HAL_Delay(10);
 80010d6:	200a      	movs	r0, #10
 80010d8:	f000 fcce 	bl	8001a78 <HAL_Delay>
	__HAL_RCC_I2C1_RELEASE_RESET();
 80010dc:	692b      	ldr	r3, [r5, #16]
 80010de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80010e2:	612b      	str	r3, [r5, #16]
	HAL_Delay(10);
 80010e4:	200a      	movs	r0, #10
 80010e6:	f000 fcc7 	bl	8001a78 <HAL_Delay>
    HAL_I2C_DeInit(hi2c);
 80010ea:	4620      	mov	r0, r4
 80010ec:	f001 fcb0 	bl	8002a50 <HAL_I2C_DeInit>
    HAL_Delay(10);
 80010f0:	200a      	movs	r0, #10
 80010f2:	f000 fcc1 	bl	8001a78 <HAL_Delay>
    HAL_I2C_Init(hi2c);
 80010f6:	4620      	mov	r0, r4
 80010f8:	f001 fbcc 	bl	8002894 <HAL_I2C_Init>
}
 80010fc:	bd38      	pop	{r3, r4, r5, pc}
 80010fe:	bf00      	nop
 8001100:	40021000 	.word	0x40021000

08001104 <i2c_bus_recover>:

void i2c_bus_recover(I2C_HandleTypeDef* hi2c) {
 8001104:	b570      	push	{r4, r5, r6, lr}
 8001106:	b086      	sub	sp, #24
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	2300      	movs	r3, #0
 800110a:	9302      	str	r3, [sp, #8]
 800110c:	9303      	str	r3, [sp, #12]
 800110e:	9304      	str	r3, [sp, #16]
 8001110:	9305      	str	r3, [sp, #20]
    uint16_t scl_pin, sda_pin;

    const uint8_t max_timeout = 100;
    static uint8_t timeout_count = 0;

    if (hi2c->Instance == I2C1) {
 8001112:	6803      	ldr	r3, [r0, #0]
 8001114:	4a24      	ldr	r2, [pc, #144]	@ (80011a8 <i2c_bus_recover+0xa4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d043      	beq.n	80011a2 <i2c_bus_recover+0x9e>
        scl_port = GPIOB;
        sda_port = GPIOB;
        scl_pin = GPIO_PIN_6;
        sda_pin = GPIO_PIN_7;
    } else if (hi2c->Instance == I2C2) {
 800111a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800111e:	4293      	cmp	r3, r2
 8001120:	d13d      	bne.n	800119e <i2c_bus_recover+0x9a>
        scl_port = GPIOB;
        sda_port = GPIOB;
        scl_pin = GPIO_PIN_10;
        sda_pin = GPIO_PIN_11;
 8001122:	f44f 6600 	mov.w	r6, #2048	@ 0x800
        scl_pin = GPIO_PIN_10;
 8001126:	f44f 6580 	mov.w	r5, #1024	@ 0x400
    } else {
        return;
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b20      	ldr	r3, [pc, #128]	@ (80011ac <i2c_bus_recover+0xa8>)
 800112c:	699a      	ldr	r2, [r3, #24]
 800112e:	f042 0208 	orr.w	r2, r2, #8
 8001132:	619a      	str	r2, [r3, #24]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = scl_pin | sda_pin;
 800113e:	ea45 0306 	orr.w	r3, r5, r6
 8001142:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001144:	2311      	movs	r3, #17
 8001146:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001148:	2301      	movs	r3, #1
 800114a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(scl_port, &GPIO_InitStruct);
 8001150:	a902      	add	r1, sp, #8
 8001152:	4817      	ldr	r0, [pc, #92]	@ (80011b0 <i2c_bus_recover+0xac>)
 8001154:	f000 fd92 	bl	8001c7c <HAL_GPIO_Init>

    while(HAL_GPIO_ReadPin(sda_port, sda_pin) == GPIO_PIN_RESET) {
 8001158:	4631      	mov	r1, r6
 800115a:	4815      	ldr	r0, [pc, #84]	@ (80011b0 <i2c_bus_recover+0xac>)
 800115c:	f000 ff1a 	bl	8001f94 <HAL_GPIO_ReadPin>
 8001160:	b9b8      	cbnz	r0, 8001192 <i2c_bus_recover+0x8e>
		HAL_GPIO_WritePin(scl_port, scl_pin, GPIO_PIN_SET);
 8001162:	4c13      	ldr	r4, [pc, #76]	@ (80011b0 <i2c_bus_recover+0xac>)
 8001164:	2201      	movs	r2, #1
 8001166:	4629      	mov	r1, r5
 8001168:	4620      	mov	r0, r4
 800116a:	f000 ff1a 	bl	8001fa2 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800116e:	2001      	movs	r0, #1
 8001170:	f000 fc82 	bl	8001a78 <HAL_Delay>
		HAL_GPIO_WritePin(scl_port, scl_pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	4629      	mov	r1, r5
 8001178:	4620      	mov	r0, r4
 800117a:	f000 ff12 	bl	8001fa2 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 fc7a 	bl	8001a78 <HAL_Delay>

		timeout_count ++;
 8001184:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <i2c_bus_recover+0xb0>)
 8001186:	7813      	ldrb	r3, [r2, #0]
 8001188:	3301      	adds	r3, #1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	7013      	strb	r3, [r2, #0]
		if(timeout_count > max_timeout) break;
 800118e:	2b64      	cmp	r3, #100	@ 0x64
 8001190:	d9e2      	bls.n	8001158 <i2c_bus_recover+0x54>
    }

    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001192:	2312      	movs	r3, #18
 8001194:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(scl_port, &GPIO_InitStruct);
 8001196:	a902      	add	r1, sp, #8
 8001198:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <i2c_bus_recover+0xac>)
 800119a:	f000 fd6f 	bl	8001c7c <HAL_GPIO_Init>
}
 800119e:	b006      	add	sp, #24
 80011a0:	bd70      	pop	{r4, r5, r6, pc}
        sda_pin = GPIO_PIN_7;
 80011a2:	2680      	movs	r6, #128	@ 0x80
        scl_pin = GPIO_PIN_6;
 80011a4:	2540      	movs	r5, #64	@ 0x40
 80011a6:	e7c0      	b.n	800112a <i2c_bus_recover+0x26>
 80011a8:	40005400 	.word	0x40005400
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	2000033c 	.word	0x2000033c

080011b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011bc:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011be:	2400      	movs	r4, #0
 80011c0:	9404      	str	r4, [sp, #16]
 80011c2:	9405      	str	r4, [sp, #20]
 80011c4:	9406      	str	r4, [sp, #24]
 80011c6:	9407      	str	r4, [sp, #28]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c8:	4b31      	ldr	r3, [pc, #196]	@ (8001290 <MX_GPIO_Init+0xd8>)
 80011ca:	699a      	ldr	r2, [r3, #24]
 80011cc:	f042 0210 	orr.w	r2, r2, #16
 80011d0:	619a      	str	r2, [r3, #24]
 80011d2:	699a      	ldr	r2, [r3, #24]
 80011d4:	f002 0210 	and.w	r2, r2, #16
 80011d8:	9200      	str	r2, [sp, #0]
 80011da:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011dc:	699a      	ldr	r2, [r3, #24]
 80011de:	f042 0220 	orr.w	r2, r2, #32
 80011e2:	619a      	str	r2, [r3, #24]
 80011e4:	699a      	ldr	r2, [r3, #24]
 80011e6:	f002 0220 	and.w	r2, r2, #32
 80011ea:	9201      	str	r2, [sp, #4]
 80011ec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	699a      	ldr	r2, [r3, #24]
 80011f0:	f042 0204 	orr.w	r2, r2, #4
 80011f4:	619a      	str	r2, [r3, #24]
 80011f6:	699a      	ldr	r2, [r3, #24]
 80011f8:	f002 0204 	and.w	r2, r2, #4
 80011fc:	9202      	str	r2, [sp, #8]
 80011fe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001200:	699a      	ldr	r2, [r3, #24]
 8001202:	f042 0208 	orr.w	r2, r2, #8
 8001206:	619a      	str	r2, [r3, #24]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	9303      	str	r3, [sp, #12]
 8001210:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001212:	f8df 9080 	ldr.w	r9, [pc, #128]	@ 8001294 <MX_GPIO_Init+0xdc>
 8001216:	4622      	mov	r2, r4
 8001218:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800121c:	4648      	mov	r0, r9
 800121e:	f000 fec0 	bl	8001fa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001222:	f8df 8074 	ldr.w	r8, [pc, #116]	@ 8001298 <MX_GPIO_Init+0xe0>
 8001226:	4622      	mov	r2, r4
 8001228:	2106      	movs	r1, #6
 800122a:	4640      	mov	r0, r8
 800122c:	f000 feb9 	bl	8001fa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001230:	4d1a      	ldr	r5, [pc, #104]	@ (800129c <MX_GPIO_Init+0xe4>)
 8001232:	4622      	mov	r2, r4
 8001234:	2120      	movs	r1, #32
 8001236:	4628      	mov	r0, r5
 8001238:	f000 feb3 	bl	8001fa2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800123c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001240:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2701      	movs	r7, #1
 8001244:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2602      	movs	r6, #2
 800124a:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124c:	a904      	add	r1, sp, #16
 800124e:	4648      	mov	r0, r9
 8001250:	f000 fd14 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001254:	2306      	movs	r3, #6
 8001256:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001258:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	a904      	add	r1, sp, #16
 8001260:	4640      	mov	r0, r8
 8001262:	f000 fd0b 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001266:	2310      	movs	r3, #16
 8001268:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	eb0d 0103 	add.w	r1, sp, r3
 8001272:	4628      	mov	r0, r5
 8001274:	f000 fd02 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001278:	2320      	movs	r3, #32
 800127a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127c:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	a904      	add	r1, sp, #16
 8001284:	4628      	mov	r0, r5
 8001286:	f000 fcf9 	bl	8001c7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800128a:	b009      	add	sp, #36	@ 0x24
 800128c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001290:	40021000 	.word	0x40021000
 8001294:	40011000 	.word	0x40011000
 8001298:	40010800 	.word	0x40010800
 800129c:	40010c00 	.word	0x40010c00

080012a0 <StartDriverTask>:

/* USER CODE BEGIN 4 */
void StartDriverTask(void const * argument){
 80012a0:	b508      	push	{r3, lr}
 80012a2:	e006      	b.n	80012b2 <StartDriverTask+0x12>
	for(;;){
		if(cycleErr) return;
		TMC2209_enable();
 80012a4:	f005 fa26 	bl	80066f4 <TMC2209_enable>
		TMC2209_watchPosition(&motor_target, &encoder_counter, &motor_speed);
 80012a8:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <StartDriverTask+0x1c>)
 80012aa:	4905      	ldr	r1, [pc, #20]	@ (80012c0 <StartDriverTask+0x20>)
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <StartDriverTask+0x24>)
 80012ae:	f005 fc35 	bl	8006b1c <TMC2209_watchPosition>
		if(cycleErr) return;
 80012b2:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <StartDriverTask+0x28>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0f4      	beq.n	80012a4 <StartDriverTask+0x4>
	}
}
 80012ba:	bd08      	pop	{r3, pc}
 80012bc:	20000004 	.word	0x20000004
 80012c0:	20000344 	.word	0x20000344
 80012c4:	20000340 	.word	0x20000340
 80012c8:	2000033e 	.word	0x2000033e

080012cc <StartEncoderTask>:

void StartEncoderTask(void const * argument){
 80012cc:	b500      	push	{lr}
 80012ce:	b085      	sub	sp, #20
 80012d0:	e00a      	b.n	80012e8 <StartEncoderTask+0x1c>
	for(;;){
		uint8_t data[] = "Hello world\n";
		if(!encoderReady_f) return;
		encoder_counter = EncoderEnablePool();
 80012d2:	f004 fa4f 	bl	8005774 <EncoderEnablePool>
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <StartEncoderTask+0x38>)
 80012d8:	6018      	str	r0, [r3, #0]
		HAL_UART_Transmit(&huart3, data, 12, 1000);
 80012da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012de:	220c      	movs	r2, #12
 80012e0:	4669      	mov	r1, sp
 80012e2:	4809      	ldr	r0, [pc, #36]	@ (8001308 <StartEncoderTask+0x3c>)
 80012e4:	f003 fdb7 	bl	8004e56 <HAL_UART_Transmit>
		uint8_t data[] = "Hello world\n";
 80012e8:	4b08      	ldr	r3, [pc, #32]	@ (800130c <StartEncoderTask+0x40>)
 80012ea:	46ec      	mov	ip, sp
 80012ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ee:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80012f2:	f88c 3000 	strb.w	r3, [ip]
		if(!encoderReady_f) return;
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <StartEncoderTask+0x44>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1e9      	bne.n	80012d2 <StartEncoderTask+0x6>
	}
}
 80012fe:	b005      	add	sp, #20
 8001300:	f85d fb04 	ldr.w	pc, [sp], #4
 8001304:	20000344 	.word	0x20000344
 8001308:	20000358 	.word	0x20000358
 800130c:	08007e30 	.word	0x08007e30
 8001310:	2000033d 	.word	0x2000033d

08001314 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001314:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001316:	2001      	movs	r0, #1
 8001318:	f004 fad6 	bl	80058c8 <osDelay>
  for(;;)
 800131c:	e7fb      	b.n	8001316 <StartDefaultTask+0x2>
	...

08001320 <suspendTaskEcpectSelf>:
void suspendTaskEcpectSelf(){
 8001320:	b508      	push	{r3, lr}
	vTaskSuspend(driverTaskHandler);
 8001322:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <suspendTaskEcpectSelf+0x14>)
 8001324:	6818      	ldr	r0, [r3, #0]
 8001326:	f004 fef5 	bl	8006114 <vTaskSuspend>
	vTaskSuspend(encoderTaskHandler);
 800132a:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <suspendTaskEcpectSelf+0x18>)
 800132c:	6818      	ldr	r0, [r3, #0]
 800132e:	f004 fef1 	bl	8006114 <vTaskSuspend>
}
 8001332:	bd08      	pop	{r3, pc}
 8001334:	20000350 	.word	0x20000350
 8001338:	2000034c 	.word	0x2000034c

0800133c <StartWatcherTask>:
void StartWatcherTask(void const * argument){
 800133c:	b508      	push	{r3, lr}
 800133e:	e001      	b.n	8001344 <StartWatcherTask+0x8>
		displaySysStat();
 8001340:	f000 fb2c 	bl	800199c <displaySysStat>
		if(getSysStatus() == WATCHER_ERROR && cycleErr == FALSE){
 8001344:	f000 fb1e 	bl	8001984 <getSysStatus>
 8001348:	2801      	cmp	r0, #1
 800134a:	d1f9      	bne.n	8001340 <StartWatcherTask+0x4>
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <StartWatcherTask+0x2c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f5      	bne.n	8001340 <StartWatcherTask+0x4>
			cycleErr = TRUE;
 8001354:	4b04      	ldr	r3, [pc, #16]	@ (8001368 <StartWatcherTask+0x2c>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
			error_codes = getSysError();
 800135a:	f000 fb19 	bl	8001990 <getSysError>
 800135e:	4b03      	ldr	r3, [pc, #12]	@ (800136c <StartWatcherTask+0x30>)
 8001360:	6018      	str	r0, [r3, #0]
			suspendTaskEcpectSelf();
 8001362:	f7ff ffdd 	bl	8001320 <suspendTaskEcpectSelf>
 8001366:	e7eb      	b.n	8001340 <StartWatcherTask+0x4>
 8001368:	2000033e 	.word	0x2000033e
 800136c:	20000000 	.word	0x20000000

08001370 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001370:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001372:	6802      	ldr	r2, [r0, #0]
 8001374:	4b03      	ldr	r3, [pc, #12]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001376:	429a      	cmp	r2, r3
 8001378:	d000      	beq.n	800137c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800137a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800137c:	f000 fb6a 	bl	8001a54 <HAL_IncTick>
}
 8001380:	e7fb      	b.n	800137a <HAL_TIM_PeriodElapsedCallback+0xa>
 8001382:	bf00      	nop
 8001384:	40012c00 	.word	0x40012c00

08001388 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001388:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800138a:	e7fe      	b.n	800138a <Error_Handler+0x2>

0800138c <MX_I2C1_Init>:
{
 800138c:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 800138e:	480a      	ldr	r0, [pc, #40]	@ (80013b8 <MX_I2C1_Init+0x2c>)
 8001390:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <MX_I2C1_Init+0x30>)
 8001392:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001394:	4b0a      	ldr	r3, [pc, #40]	@ (80013c0 <MX_I2C1_Init+0x34>)
 8001396:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001398:	2300      	movs	r3, #0
 800139a:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800139c:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800139e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013a2:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013a6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013a8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013aa:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ac:	f001 fa72 	bl	8002894 <HAL_I2C_Init>
 80013b0:	b900      	cbnz	r0, 80013b4 <MX_I2C1_Init+0x28>
}
 80013b2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80013b4:	f7ff ffe8 	bl	8001388 <Error_Handler>
 80013b8:	20000430 	.word	0x20000430
 80013bc:	40005400 	.word	0x40005400
 80013c0:	00061a80 	.word	0x00061a80

080013c4 <MX_TIM2_Init>:
{
 80013c4:	b500      	push	{lr}
 80013c6:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	2300      	movs	r3, #0
 80013ca:	9308      	str	r3, [sp, #32]
 80013cc:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	9302      	str	r3, [sp, #8]
 80013d2:	9303      	str	r3, [sp, #12]
 80013d4:	9304      	str	r3, [sp, #16]
 80013d6:	9305      	str	r3, [sp, #20]
 80013d8:	9306      	str	r3, [sp, #24]
 80013da:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 80013dc:	4816      	ldr	r0, [pc, #88]	@ (8001438 <MX_TIM2_Init+0x74>)
 80013de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013e2:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 72 - 1;
 80013e4:	2247      	movs	r2, #71	@ 0x47
 80013e6:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 4 - 1;
 80013ea:	2203      	movs	r2, #3
 80013ec:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ee:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013f2:	f003 f9bf 	bl	8004774 <HAL_TIM_PWM_Init>
 80013f6:	b9c8      	cbnz	r0, 800142c <MX_TIM2_Init+0x68>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fc:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013fe:	a908      	add	r1, sp, #32
 8001400:	480d      	ldr	r0, [pc, #52]	@ (8001438 <MX_TIM2_Init+0x74>)
 8001402:	f003 fb9f 	bl	8004b44 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	b998      	cbnz	r0, 8001430 <MX_TIM2_Init+0x6c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001408:	2360      	movs	r3, #96	@ 0x60
 800140a:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 50;
 800140c:	2332      	movs	r3, #50	@ 0x32
 800140e:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001410:	2200      	movs	r2, #0
 8001412:	9203      	str	r2, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001414:	9205      	str	r2, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001416:	a901      	add	r1, sp, #4
 8001418:	4807      	ldr	r0, [pc, #28]	@ (8001438 <MX_TIM2_Init+0x74>)
 800141a:	f003 fa05 	bl	8004828 <HAL_TIM_PWM_ConfigChannel>
 800141e:	b948      	cbnz	r0, 8001434 <MX_TIM2_Init+0x70>
  HAL_TIM_MspPostInit(&htim2);
 8001420:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_TIM2_Init+0x74>)
 8001422:	f000 f99b 	bl	800175c <HAL_TIM_MspPostInit>
}
 8001426:	b00b      	add	sp, #44	@ 0x2c
 8001428:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800142c:	f7ff ffac 	bl	8001388 <Error_Handler>
    Error_Handler();
 8001430:	f7ff ffaa 	bl	8001388 <Error_Handler>
    Error_Handler();
 8001434:	f7ff ffa8 	bl	8001388 <Error_Handler>
 8001438:	200003e8 	.word	0x200003e8

0800143c <MX_USART1_UART_Init>:
{
 800143c:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800143e:	480a      	ldr	r0, [pc, #40]	@ (8001468 <MX_USART1_UART_Init+0x2c>)
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <MX_USART1_UART_Init+0x30>)
 8001442:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 230400;
 8001444:	f44f 3361 	mov.w	r3, #230400	@ 0x38400
 8001448:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	2300      	movs	r3, #0
 800144c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800144e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001450:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001452:	220c      	movs	r2, #12
 8001454:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001456:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001458:	61c3      	str	r3, [r0, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800145a:	f003 fcc6 	bl	8004dea <HAL_HalfDuplex_Init>
 800145e:	b900      	cbnz	r0, 8001462 <MX_USART1_UART_Init+0x26>
}
 8001460:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001462:	f7ff ff91 	bl	8001388 <Error_Handler>
 8001466:	bf00      	nop
 8001468:	200003a0 	.word	0x200003a0
 800146c:	40013800 	.word	0x40013800

08001470 <MX_USART3_UART_Init>:
{
 8001470:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 8001472:	480a      	ldr	r0, [pc, #40]	@ (800149c <MX_USART3_UART_Init+0x2c>)
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <MX_USART3_UART_Init+0x30>)
 8001476:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 9600;
 8001478:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800147c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	2300      	movs	r3, #0
 8001480:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001482:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001484:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001486:	220c      	movs	r2, #12
 8001488:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800148c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800148e:	f003 fc7c 	bl	8004d8a <HAL_UART_Init>
 8001492:	b900      	cbnz	r0, 8001496 <MX_USART3_UART_Init+0x26>
}
 8001494:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001496:	f7ff ff77 	bl	8001388 <Error_Handler>
 800149a:	bf00      	nop
 800149c:	20000358 	.word	0x20000358
 80014a0:	40004800 	.word	0x40004800

080014a4 <SystemClock_Config>:
{
 80014a4:	b500      	push	{lr}
 80014a6:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a8:	2228      	movs	r2, #40	@ 0x28
 80014aa:	2100      	movs	r1, #0
 80014ac:	a806      	add	r0, sp, #24
 80014ae:	f005 fc53 	bl	8006d58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b2:	2300      	movs	r3, #0
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	9302      	str	r3, [sp, #8]
 80014b8:	9303      	str	r3, [sp, #12]
 80014ba:	9304      	str	r3, [sp, #16]
 80014bc:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014be:	2201      	movs	r2, #1
 80014c0:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014c6:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014c8:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ca:	2202      	movs	r2, #2
 80014cc:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ce:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80014d0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80014d4:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d6:	a806      	add	r0, sp, #24
 80014d8:	f002 fc4e 	bl	8003d78 <HAL_RCC_OscConfig>
 80014dc:	b980      	cbnz	r0, 8001500 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014de:	230f      	movs	r3, #15
 80014e0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e2:	2102      	movs	r1, #2
 80014e4:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014ee:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f0:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014f2:	a801      	add	r0, sp, #4
 80014f4:	f002 fe72 	bl	80041dc <HAL_RCC_ClockConfig>
 80014f8:	b920      	cbnz	r0, 8001504 <SystemClock_Config+0x60>
}
 80014fa:	b011      	add	sp, #68	@ 0x44
 80014fc:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001500:	f7ff ff42 	bl	8001388 <Error_Handler>
    Error_Handler();
 8001504:	f7ff ff40 	bl	8001388 <Error_Handler>

08001508 <main>:
{
 8001508:	b510      	push	{r4, lr}
 800150a:	b09c      	sub	sp, #112	@ 0x70
  HAL_Init();
 800150c:	f000 fa90 	bl	8001a30 <HAL_Init>
  SystemClock_Config();
 8001510:	f7ff ffc8 	bl	80014a4 <SystemClock_Config>
  MX_GPIO_Init();
 8001514:	f7ff fe50 	bl	80011b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001518:	f7ff ff38 	bl	800138c <MX_I2C1_Init>
  MX_TIM2_Init();
 800151c:	f7ff ff52 	bl	80013c4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001520:	f7ff ff8c 	bl	800143c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001524:	f7ff ffa4 	bl	8001470 <MX_USART3_UART_Init>
  i2c_bus_recover(&hi2c1);
 8001528:	4c2f      	ldr	r4, [pc, #188]	@ (80015e8 <main+0xe0>)
 800152a:	4620      	mov	r0, r4
 800152c:	f7ff fdea 	bl	8001104 <i2c_bus_recover>
  i2c_reset(&hi2c1);
 8001530:	4620      	mov	r0, r4
 8001532:	f7ff fdc9 	bl	80010c8 <i2c_reset>
  HAL_I2C_Init(&hi2c1);
 8001536:	4620      	mov	r0, r4
 8001538:	f001 f9ac 	bl	8002894 <HAL_I2C_Init>
  TMC2209_setup();
 800153c:	f005 f916 	bl	800676c <TMC2209_setup>
  HAL_StatusTypeDef encoderStatus =  EncoderInit();
 8001540:	f004 f8ee 	bl	8005720 <EncoderInit>
  if(encoderStatus == HAL_OK) encoderReady_f = TRUE;
 8001544:	b910      	cbnz	r0, 800154c <main+0x44>
 8001546:	4b29      	ldr	r3, [pc, #164]	@ (80015ec <main+0xe4>)
 8001548:	2201      	movs	r2, #1
 800154a:	701a      	strb	r2, [r3, #0]
  TMC2209_setMicrostep(TMC2209_Microsteps_1);
 800154c:	2008      	movs	r0, #8
 800154e:	f005 f955 	bl	80067fc <TMC2209_setMicrostep>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001552:	4c27      	ldr	r4, [pc, #156]	@ (80015f0 <main+0xe8>)
 8001554:	f10d 0c54 	add.w	ip, sp, #84	@ 0x54
 8001558:	46a6      	mov	lr, r4
 800155a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800155e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001562:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8001566:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800156a:	2100      	movs	r1, #0
 800156c:	a815      	add	r0, sp, #84	@ 0x54
 800156e:	f004 f978 	bl	8005862 <osThreadCreate>
 8001572:	4b20      	ldr	r3, [pc, #128]	@ (80015f4 <main+0xec>)
 8001574:	6018      	str	r0, [r3, #0]
  osThreadDef(driverTask, StartDriverTask, osPriorityNormal, 0, 128);
 8001576:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 800157a:	f104 0e1c 	add.w	lr, r4, #28
 800157e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8001582:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001586:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800158a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  driverTaskHandler = osThreadCreate(osThread(driverTask), NULL);
 800158e:	2100      	movs	r1, #0
 8001590:	a80e      	add	r0, sp, #56	@ 0x38
 8001592:	f004 f966 	bl	8005862 <osThreadCreate>
 8001596:	4b18      	ldr	r3, [pc, #96]	@ (80015f8 <main+0xf0>)
 8001598:	6018      	str	r0, [r3, #0]
  osThreadDef(encoderTask, StartEncoderTask, osPriorityNormal, 0, 128);
 800159a:	f10d 0c1c 	add.w	ip, sp, #28
 800159e:	f104 0e38 	add.w	lr, r4, #56	@ 0x38
 80015a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80015a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80015aa:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80015ae:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  encoderTaskHandler = osThreadCreate(osThread(encoderTask), NULL);
 80015b2:	2100      	movs	r1, #0
 80015b4:	a807      	add	r0, sp, #28
 80015b6:	f004 f954 	bl	8005862 <osThreadCreate>
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <main+0xf4>)
 80015bc:	6018      	str	r0, [r3, #0]
  osThreadDef(watcherTask, StartWatcherTask, osPriorityNormal, 0, 128);
 80015be:	46ee      	mov	lr, sp
 80015c0:	f104 0c54 	add.w	ip, r4, #84	@ 0x54
 80015c4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80015c8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80015cc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80015d0:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
  watcherTaskHandler = osThreadCreate(osThread(watcherTask), NULL);
 80015d4:	2100      	movs	r1, #0
 80015d6:	4668      	mov	r0, sp
 80015d8:	f004 f943 	bl	8005862 <osThreadCreate>
 80015dc:	4b08      	ldr	r3, [pc, #32]	@ (8001600 <main+0xf8>)
 80015de:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80015e0:	f004 f93a 	bl	8005858 <osKernelStart>
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <main+0xdc>
 80015e6:	bf00      	nop
 80015e8:	20000430 	.word	0x20000430
 80015ec:	2000033d 	.word	0x2000033d
 80015f0:	08007dc0 	.word	0x08007dc0
 80015f4:	20000354 	.word	0x20000354
 80015f8:	20000350 	.word	0x20000350
 80015fc:	2000034c 	.word	0x2000034c
 8001600:	20000348 	.word	0x20000348

08001604 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001604:	b500      	push	{lr}
 8001606:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <HAL_MspInit+0x4c>)
 800160a:	699a      	ldr	r2, [r3, #24]
 800160c:	f042 0201 	orr.w	r2, r2, #1
 8001610:	619a      	str	r2, [r3, #24]
 8001612:	699a      	ldr	r2, [r3, #24]
 8001614:	f002 0201 	and.w	r2, r2, #1
 8001618:	9200      	str	r2, [sp, #0]
 800161a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161c:	69da      	ldr	r2, [r3, #28]
 800161e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001622:	61da      	str	r2, [r3, #28]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	210f      	movs	r1, #15
 8001632:	f06f 0001 	mvn.w	r0, #1
 8001636:	f000 fa8b 	bl	8001b50 <HAL_NVIC_SetPriority>

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 800163a:	4a06      	ldr	r2, [pc, #24]	@ (8001654 <HAL_MspInit+0x50>)
 800163c:	6853      	ldr	r3, [r2, #4]
 800163e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001642:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001646:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001648:	b003      	add	sp, #12
 800164a:	f85d fb04 	ldr.w	pc, [sp], #4
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	40010000 	.word	0x40010000

08001658 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001658:	b510      	push	{r4, lr}
 800165a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165c:	2300      	movs	r3, #0
 800165e:	9302      	str	r3, [sp, #8]
 8001660:	9303      	str	r3, [sp, #12]
 8001662:	9304      	str	r3, [sp, #16]
 8001664:	9305      	str	r3, [sp, #20]
  if(hi2c->Instance==I2C1)
 8001666:	6802      	ldr	r2, [r0, #0]
 8001668:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <HAL_I2C_MspInit+0x78>)
 800166a:	429a      	cmp	r2, r3
 800166c:	d001      	beq.n	8001672 <HAL_I2C_MspInit+0x1a>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800166e:	b006      	add	sp, #24
 8001670:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	4c18      	ldr	r4, [pc, #96]	@ (80016d4 <HAL_I2C_MspInit+0x7c>)
 8001674:	69a3      	ldr	r3, [r4, #24]
 8001676:	f043 0308 	orr.w	r3, r3, #8
 800167a:	61a3      	str	r3, [r4, #24]
 800167c:	69a3      	ldr	r3, [r4, #24]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001686:	23c0      	movs	r3, #192	@ 0xc0
 8001688:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168a:	2312      	movs	r3, #18
 800168c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001692:	a902      	add	r1, sp, #8
 8001694:	4810      	ldr	r0, [pc, #64]	@ (80016d8 <HAL_I2C_MspInit+0x80>)
 8001696:	f000 faf1 	bl	8001c7c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800169a:	69e3      	ldr	r3, [r4, #28]
 800169c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016a0:	61e3      	str	r3, [r4, #28]
 80016a2:	69e3      	ldr	r3, [r4, #28]
 80016a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2105      	movs	r1, #5
 80016b0:	201f      	movs	r0, #31
 80016b2:	f000 fa4d 	bl	8001b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016b6:	201f      	movs	r0, #31
 80016b8:	f000 fa5a 	bl	8001b70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2105      	movs	r1, #5
 80016c0:	2020      	movs	r0, #32
 80016c2:	f000 fa45 	bl	8001b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016c6:	2020      	movs	r0, #32
 80016c8:	f000 fa52 	bl	8001b70 <HAL_NVIC_EnableIRQ>
}
 80016cc:	e7cf      	b.n	800166e <HAL_I2C_MspInit+0x16>
 80016ce:	bf00      	nop
 80016d0:	40005400 	.word	0x40005400
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010c00 	.word	0x40010c00

080016dc <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C1)
 80016dc:	6802      	ldr	r2, [r0, #0]
 80016de:	4b0d      	ldr	r3, [pc, #52]	@ (8001714 <HAL_I2C_MspDeInit+0x38>)
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d000      	beq.n	80016e6 <HAL_I2C_MspDeInit+0xa>
 80016e4:	4770      	bx	lr
{
 80016e6:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80016e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001718 <HAL_I2C_MspDeInit+0x3c>)
 80016ea:	69d3      	ldr	r3, [r2, #28]
 80016ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80016f0:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80016f2:	4c0a      	ldr	r4, [pc, #40]	@ (800171c <HAL_I2C_MspDeInit+0x40>)
 80016f4:	2140      	movs	r1, #64	@ 0x40
 80016f6:	4620      	mov	r0, r4
 80016f8:	f000 fbce 	bl	8001e98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80016fc:	2180      	movs	r1, #128	@ 0x80
 80016fe:	4620      	mov	r0, r4
 8001700:	f000 fbca 	bl	8001e98 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001704:	201f      	movs	r0, #31
 8001706:	f000 fa41 	bl	8001b8c <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800170a:	2020      	movs	r0, #32
 800170c:	f000 fa3e 	bl	8001b8c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001710:	bd10      	pop	{r4, pc}
 8001712:	bf00      	nop
 8001714:	40005400 	.word	0x40005400
 8001718:	40021000 	.word	0x40021000
 800171c:	40010c00 	.word	0x40010c00

08001720 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8001720:	6803      	ldr	r3, [r0, #0]
 8001722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001726:	d000      	beq.n	800172a <HAL_TIM_PWM_MspInit+0xa>
 8001728:	4770      	bx	lr
{
 800172a:	b500      	push	{lr}
 800172c:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800172e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8001732:	69da      	ldr	r2, [r3, #28]
 8001734:	f042 0201 	orr.w	r2, r2, #1
 8001738:	61da      	str	r2, [r3, #28]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2105      	movs	r1, #5
 8001748:	201c      	movs	r0, #28
 800174a:	f000 fa01 	bl	8001b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800174e:	201c      	movs	r0, #28
 8001750:	f000 fa0e 	bl	8001b70 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001754:	b003      	add	sp, #12
 8001756:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800175c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800175c:	b500      	push	{lr}
 800175e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	2300      	movs	r3, #0
 8001762:	9302      	str	r3, [sp, #8]
 8001764:	9303      	str	r3, [sp, #12]
 8001766:	9304      	str	r3, [sp, #16]
 8001768:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM2)
 800176a:	6803      	ldr	r3, [r0, #0]
 800176c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001770:	d002      	beq.n	8001778 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001772:	b007      	add	sp, #28
 8001774:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001778:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800177c:	699a      	ldr	r2, [r3, #24]
 800177e:	f042 0204 	orr.w	r2, r2, #4
 8001782:	619a      	str	r2, [r3, #24]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800178e:	2301      	movs	r3, #1
 8001790:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	a902      	add	r1, sp, #8
 800179a:	4802      	ldr	r0, [pc, #8]	@ (80017a4 <HAL_TIM_MspPostInit+0x48>)
 800179c:	f000 fa6e 	bl	8001c7c <HAL_GPIO_Init>
}
 80017a0:	e7e7      	b.n	8001772 <HAL_TIM_MspPostInit+0x16>
 80017a2:	bf00      	nop
 80017a4:	40010800 	.word	0x40010800

080017a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a8:	b510      	push	{r4, lr}
 80017aa:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	2300      	movs	r3, #0
 80017ae:	9304      	str	r3, [sp, #16]
 80017b0:	9305      	str	r3, [sp, #20]
 80017b2:	9306      	str	r3, [sp, #24]
 80017b4:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 80017b6:	6803      	ldr	r3, [r0, #0]
 80017b8:	4a2c      	ldr	r2, [pc, #176]	@ (800186c <HAL_UART_MspInit+0xc4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d004      	beq.n	80017c8 <HAL_UART_MspInit+0x20>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 80017be:	4a2c      	ldr	r2, [pc, #176]	@ (8001870 <HAL_UART_MspInit+0xc8>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d028      	beq.n	8001816 <HAL_UART_MspInit+0x6e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017c4:	b008      	add	sp, #32
 80017c6:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80017c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001874 <HAL_UART_MspInit+0xcc>)
 80017ca:	699a      	ldr	r2, [r3, #24]
 80017cc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80017d0:	619a      	str	r2, [r3, #24]
 80017d2:	699a      	ldr	r2, [r3, #24]
 80017d4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80017d8:	9200      	str	r2, [sp, #0]
 80017da:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	699a      	ldr	r2, [r3, #24]
 80017de:	f042 0204 	orr.w	r2, r2, #4
 80017e2:	619a      	str	r2, [r3, #24]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f4:	2312      	movs	r3, #18
 80017f6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	a904      	add	r1, sp, #16
 80017fe:	481e      	ldr	r0, [pc, #120]	@ (8001878 <HAL_UART_MspInit+0xd0>)
 8001800:	f000 fa3c 	bl	8001c7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2105      	movs	r1, #5
 8001808:	2025      	movs	r0, #37	@ 0x25
 800180a:	f000 f9a1 	bl	8001b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800180e:	2025      	movs	r0, #37	@ 0x25
 8001810:	f000 f9ae 	bl	8001b70 <HAL_NVIC_EnableIRQ>
 8001814:	e7d6      	b.n	80017c4 <HAL_UART_MspInit+0x1c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001816:	4b17      	ldr	r3, [pc, #92]	@ (8001874 <HAL_UART_MspInit+0xcc>)
 8001818:	69da      	ldr	r2, [r3, #28]
 800181a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800181e:	61da      	str	r2, [r3, #28]
 8001820:	69da      	ldr	r2, [r3, #28]
 8001822:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8001826:	9202      	str	r2, [sp, #8]
 8001828:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	699a      	ldr	r2, [r3, #24]
 800182c:	f042 0208 	orr.w	r2, r2, #8
 8001830:	619a      	str	r2, [r3, #24]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	9303      	str	r3, [sp, #12]
 800183a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800183c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001840:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184a:	4c0c      	ldr	r4, [pc, #48]	@ (800187c <HAL_UART_MspInit+0xd4>)
 800184c:	a904      	add	r1, sp, #16
 800184e:	4620      	mov	r0, r4
 8001850:	f000 fa14 	bl	8001c7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001854:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001858:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800185a:	2300      	movs	r3, #0
 800185c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	a904      	add	r1, sp, #16
 8001862:	4620      	mov	r0, r4
 8001864:	f000 fa0a 	bl	8001c7c <HAL_GPIO_Init>
}
 8001868:	e7ac      	b.n	80017c4 <HAL_UART_MspInit+0x1c>
 800186a:	bf00      	nop
 800186c:	40013800 	.word	0x40013800
 8001870:	40004800 	.word	0x40004800
 8001874:	40021000 	.word	0x40021000
 8001878:	40010800 	.word	0x40010800
 800187c:	40010c00 	.word	0x40010c00

08001880 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b530      	push	{r4, r5, lr}
 8001882:	b089      	sub	sp, #36	@ 0x24
 8001884:	4604      	mov	r4, r0
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001886:	4b1e      	ldr	r3, [pc, #120]	@ (8001900 <HAL_InitTick+0x80>)
 8001888:	699a      	ldr	r2, [r3, #24]
 800188a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800188e:	619a      	str	r2, [r3, #24]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	9b01      	ldr	r3, [sp, #4]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800189a:	a902      	add	r1, sp, #8
 800189c:	a803      	add	r0, sp, #12
 800189e:	f002 fd79 	bl	8004394 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80018a2:	f002 fd67 	bl	8004374 <HAL_RCC_GetPCLK2Freq>

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018a6:	4a17      	ldr	r2, [pc, #92]	@ (8001904 <HAL_InitTick+0x84>)
 80018a8:	fba2 2300 	umull	r2, r3, r2, r0
 80018ac:	0c9b      	lsrs	r3, r3, #18
 80018ae:	3b01      	subs	r3, #1

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80018b0:	4815      	ldr	r0, [pc, #84]	@ (8001908 <HAL_InitTick+0x88>)
 80018b2:	4a16      	ldr	r2, [pc, #88]	@ (800190c <HAL_InitTick+0x8c>)
 80018b4:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80018b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80018ba:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80018bc:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c2:	6083      	str	r3, [r0, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c4:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80018c6:	f002 ff29 	bl	800471c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80018ca:	4605      	mov	r5, r0
 80018cc:	b110      	cbz	r0, 80018d4 <HAL_InitTick+0x54>
    }
  }

 /* Return function status */
  return status;
}
 80018ce:	4628      	mov	r0, r5
 80018d0:	b009      	add	sp, #36	@ 0x24
 80018d2:	bd30      	pop	{r4, r5, pc}
    status = HAL_TIM_Base_Start_IT(&htim1);
 80018d4:	480c      	ldr	r0, [pc, #48]	@ (8001908 <HAL_InitTick+0x88>)
 80018d6:	f002 fdf9 	bl	80044cc <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80018da:	4605      	mov	r5, r0
 80018dc:	2800      	cmp	r0, #0
 80018de:	d1f6      	bne.n	80018ce <HAL_InitTick+0x4e>
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80018e0:	2019      	movs	r0, #25
 80018e2:	f000 f945 	bl	8001b70 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e6:	2c0f      	cmp	r4, #15
 80018e8:	d901      	bls.n	80018ee <HAL_InitTick+0x6e>
        status = HAL_ERROR;
 80018ea:	2501      	movs	r5, #1
 80018ec:	e7ef      	b.n	80018ce <HAL_InitTick+0x4e>
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80018ee:	2200      	movs	r2, #0
 80018f0:	4621      	mov	r1, r4
 80018f2:	2019      	movs	r0, #25
 80018f4:	f000 f92c 	bl	8001b50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <HAL_InitTick+0x90>)
 80018fa:	601c      	str	r4, [r3, #0]
 80018fc:	e7e7      	b.n	80018ce <HAL_InitTick+0x4e>
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000
 8001904:	431bde83 	.word	0x431bde83
 8001908:	20000484 	.word	0x20000484
 800190c:	40012c00 	.word	0x40012c00
 8001910:	20000010 	.word	0x20000010

08001914 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001914:	e7fe      	b.n	8001914 <NMI_Handler>

08001916 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <HardFault_Handler>

08001918 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <MemManage_Handler>

0800191a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191a:	e7fe      	b.n	800191a <BusFault_Handler>

0800191c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler>

0800191e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191e:	4770      	bx	lr

08001920 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001920:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001922:	4802      	ldr	r0, [pc, #8]	@ (800192c <TIM1_UP_IRQHandler+0xc>)
 8001924:	f002 fe09 	bl	800453a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001928:	bd08      	pop	{r3, pc}
 800192a:	bf00      	nop
 800192c:	20000484 	.word	0x20000484

08001930 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001930:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001932:	4802      	ldr	r0, [pc, #8]	@ (800193c <TIM2_IRQHandler+0xc>)
 8001934:	f002 fe01 	bl	800453a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001938:	bd08      	pop	{r3, pc}
 800193a:	bf00      	nop
 800193c:	200003e8 	.word	0x200003e8

08001940 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001940:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001942:	4802      	ldr	r0, [pc, #8]	@ (800194c <I2C1_EV_IRQHandler+0xc>)
 8001944:	f002 f8ce 	bl	8003ae4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001948:	bd08      	pop	{r3, pc}
 800194a:	bf00      	nop
 800194c:	20000430 	.word	0x20000430

08001950 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001950:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001952:	4802      	ldr	r0, [pc, #8]	@ (800195c <I2C1_ER_IRQHandler+0xc>)
 8001954:	f002 f996 	bl	8003c84 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001958:	bd08      	pop	{r3, pc}
 800195a:	bf00      	nop
 800195c:	20000430 	.word	0x20000430

08001960 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001960:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001962:	4802      	ldr	r0, [pc, #8]	@ (800196c <USART1_IRQHandler+0xc>)
 8001964:	f003 fbd2 	bl	800510c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001968:	bd08      	pop	{r3, pc}
 800196a:	bf00      	nop
 800196c:	200003a0 	.word	0x200003a0

08001970 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001970:	4770      	bx	lr
	...

08001974 <emmitSysError>:
#include "watcher.h"

WATCHER_t watcher;

void emmitSysError(WATCHER_ERR_STAT error){
	watcher.detail = WATCHER_ERROR;
 8001974:	4b02      	ldr	r3, [pc, #8]	@ (8001980 <emmitSysError+0xc>)
 8001976:	2201      	movs	r2, #1
 8001978:	705a      	strb	r2, [r3, #1]
	watcher.stat = error;
 800197a:	7018      	strb	r0, [r3, #0]
};
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	200004cc 	.word	0x200004cc

08001984 <getSysStatus>:

uint8_t getSysStatus(){
	return watcher.detail;
};
 8001984:	4b01      	ldr	r3, [pc, #4]	@ (800198c <getSysStatus+0x8>)
 8001986:	7858      	ldrb	r0, [r3, #1]
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	200004cc 	.word	0x200004cc

08001990 <getSysError>:

uint8_t getSysError(){
	return watcher.stat;
}
 8001990:	4b01      	ldr	r3, [pc, #4]	@ (8001998 <getSysError+0x8>)
 8001992:	7818      	ldrb	r0, [r3, #0]
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	200004cc 	.word	0x200004cc

0800199c <displaySysStat>:
void displaySysStat(){
 800199c:	b510      	push	{r4, lr}
	if(watcher.detail == WATCHER_ERROR){
 800199e:	4b0f      	ldr	r3, [pc, #60]	@ (80019dc <displaySysStat+0x40>)
 80019a0:	785b      	ldrb	r3, [r3, #1]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d006      	beq.n	80019b4 <displaySysStat+0x18>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_Delay(100);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_Delay(100);
	}else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019ac:	480c      	ldr	r0, [pc, #48]	@ (80019e0 <displaySysStat+0x44>)
 80019ae:	f000 faf8 	bl	8001fa2 <HAL_GPIO_WritePin>
	}

}
 80019b2:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80019b4:	4c0a      	ldr	r4, [pc, #40]	@ (80019e0 <displaySysStat+0x44>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019bc:	4620      	mov	r0, r4
 80019be:	f000 faf0 	bl	8001fa2 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80019c2:	2064      	movs	r0, #100	@ 0x64
 80019c4:	f000 f858 	bl	8001a78 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019ce:	4620      	mov	r0, r4
 80019d0:	f000 fae7 	bl	8001fa2 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80019d4:	2064      	movs	r0, #100	@ 0x64
 80019d6:	f000 f84f 	bl	8001a78 <HAL_Delay>
 80019da:	e7ea      	b.n	80019b2 <displaySysStat+0x16>
 80019dc:	200004cc 	.word	0x200004cc
 80019e0:	40011000 	.word	0x40011000

080019e4 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/    bl  SystemInit
 80019e4:	f7ff ffc4 	bl	8001970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e8:	480b      	ldr	r0, [pc, #44]	@ (8001a18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019ea:	490c      	ldr	r1, [pc, #48]	@ (8001a1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001a20 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a09      	ldr	r2, [pc, #36]	@ (8001a24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a00:	4c09      	ldr	r4, [pc, #36]	@ (8001a28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f005 fa07 	bl	8006e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a12:	f7ff fd79 	bl	8001508 <main>
  bx lr
 8001a16:	4770      	bx	lr
  ldr r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a1c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001a20:	08007ee0 	.word	0x08007ee0
  ldr r2, =_sbss
 8001a24:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001a28:	200013cc 	.word	0x200013cc

08001a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC1_2_IRQHandler>
	...

08001a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a32:	4a07      	ldr	r2, [pc, #28]	@ (8001a50 <HAL_Init+0x20>)
 8001a34:	6813      	ldr	r3, [r2, #0]
 8001a36:	f043 0310 	orr.w	r3, r3, #16
 8001a3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a3c:	2003      	movs	r0, #3
 8001a3e:	f000 f875 	bl	8001b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a42:	200f      	movs	r0, #15
 8001a44:	f7ff ff1c 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a48:	f7ff fddc 	bl	8001604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	bd08      	pop	{r3, pc}
 8001a50:	40022000 	.word	0x40022000

08001a54 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a54:	4a03      	ldr	r2, [pc, #12]	@ (8001a64 <HAL_IncTick+0x10>)
 8001a56:	6811      	ldr	r1, [r2, #0]
 8001a58:	4b03      	ldr	r3, [pc, #12]	@ (8001a68 <HAL_IncTick+0x14>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	440b      	add	r3, r1
 8001a5e:	6013      	str	r3, [r2, #0]
}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	200004d0 	.word	0x200004d0
 8001a68:	2000000c 	.word	0x2000000c

08001a6c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a6c:	4b01      	ldr	r3, [pc, #4]	@ (8001a74 <HAL_GetTick+0x8>)
 8001a6e:	6818      	ldr	r0, [r3, #0]
}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	200004d0 	.word	0x200004d0

08001a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a78:	b538      	push	{r3, r4, r5, lr}
 8001a7a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff fff6 	bl	8001a6c <HAL_GetTick>
 8001a80:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a82:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001a86:	d002      	beq.n	8001a8e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a88:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <HAL_Delay+0x24>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a8e:	f7ff ffed 	bl	8001a6c <HAL_GetTick>
 8001a92:	1b40      	subs	r0, r0, r5
 8001a94:	42a0      	cmp	r0, r4
 8001a96:	d3fa      	bcc.n	8001a8e <HAL_Delay+0x16>
  {
  }
}
 8001a98:	bd38      	pop	{r3, r4, r5, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000000c 	.word	0x2000000c

08001aa0 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	db0c      	blt.n	8001abe <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa4:	f000 021f 	and.w	r2, r0, #31
 8001aa8:	0940      	lsrs	r0, r0, #5
 8001aaa:	2301      	movs	r3, #1
 8001aac:	4093      	lsls	r3, r2
 8001aae:	3020      	adds	r0, #32
 8001ab0:	4a03      	ldr	r2, [pc, #12]	@ (8001ac0 <__NVIC_DisableIRQ+0x20>)
 8001ab2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ab6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001aba:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001abe:	4770      	bx	lr
 8001ac0:	e000e100 	.word	0xe000e100

08001ac4 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	db08      	blt.n	8001ada <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac8:	0109      	lsls	r1, r1, #4
 8001aca:	b2c9      	uxtb	r1, r1
 8001acc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001ad0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001ad4:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8001ad8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	f000 000f 	and.w	r0, r0, #15
 8001ade:	0109      	lsls	r1, r1, #4
 8001ae0:	b2c9      	uxtb	r1, r1
 8001ae2:	4b01      	ldr	r3, [pc, #4]	@ (8001ae8 <__NVIC_SetPriority+0x24>)
 8001ae4:	5419      	strb	r1, [r3, r0]
  }
}
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed14 	.word	0xe000ed14

08001aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aec:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aee:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af2:	f1c0 0c07 	rsb	ip, r0, #7
 8001af6:	f1bc 0f04 	cmp.w	ip, #4
 8001afa:	bf28      	it	cs
 8001afc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b00:	1d03      	adds	r3, r0, #4
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d90f      	bls.n	8001b26 <NVIC_EncodePriority+0x3a>
 8001b06:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 3eff 	mov.w	lr, #4294967295
 8001b0c:	fa0e f00c 	lsl.w	r0, lr, ip
 8001b10:	ea21 0100 	bic.w	r1, r1, r0
 8001b14:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b16:	fa0e fe03 	lsl.w	lr, lr, r3
 8001b1a:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8001b1e:	ea41 0002 	orr.w	r0, r1, r2
 8001b22:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	2300      	movs	r3, #0
 8001b28:	e7ee      	b.n	8001b08 <NVIC_EncodePriority+0x1c>
	...

08001b2c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b2c:	4a07      	ldr	r2, [pc, #28]	@ (8001b4c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001b2e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b30:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b34:	041b      	lsls	r3, r3, #16
 8001b36:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b38:	0200      	lsls	r0, r0, #8
 8001b3a:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001b48:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b50:	b510      	push	{r4, lr}
 8001b52:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b54:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_NVIC_SetPriority+0x1c>)
 8001b56:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b58:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001b5c:	f7ff ffc6 	bl	8001aec <NVIC_EncodePriority>
 8001b60:	4601      	mov	r1, r0
 8001b62:	4620      	mov	r0, r4
 8001b64:	f7ff ffae 	bl	8001ac4 <__NVIC_SetPriority>
}
 8001b68:	bd10      	pop	{r4, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b70:	2800      	cmp	r0, #0
 8001b72:	db07      	blt.n	8001b84 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b74:	f000 021f 	and.w	r2, r0, #31
 8001b78:	0940      	lsrs	r0, r0, #5
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	4093      	lsls	r3, r2
 8001b7e:	4a02      	ldr	r2, [pc, #8]	@ (8001b88 <HAL_NVIC_EnableIRQ+0x18>)
 8001b80:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b8e:	f7ff ff87 	bl	8001aa0 <__NVIC_DisableIRQ>
}
 8001b92:	bd08      	pop	{r3, pc}

08001b94 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b94:	4603      	mov	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b96:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	2a02      	cmp	r2, #2
 8001b9e:	d006      	beq.n	8001bae <HAL_DMA_Abort+0x1a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	6382      	str	r2, [r0, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f880 2020 	strb.w	r2, [r0, #32]
    
    return HAL_ERROR;
 8001baa:	2001      	movs	r0, #1
 8001bac:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bae:	6801      	ldr	r1, [r0, #0]
 8001bb0:	680a      	ldr	r2, [r1, #0]
 8001bb2:	f022 020e 	bic.w	r2, r2, #14
 8001bb6:	600a      	str	r2, [r1, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bb8:	6801      	ldr	r1, [r0, #0]
 8001bba:	680a      	ldr	r2, [r1, #0]
 8001bbc:	f022 0201 	bic.w	r2, r2, #1
 8001bc0:	600a      	str	r2, [r1, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bc2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001bc4:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bcc:	6042      	str	r2, [r0, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bce:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f883 0020 	strb.w	r0, [r3, #32]
  
  return status; 
}
 8001bd8:	4770      	bx	lr
	...

08001bdc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001bdc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bde:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d003      	beq.n	8001bf0 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be8:	2304      	movs	r3, #4
 8001bea:	6383      	str	r3, [r0, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001bec:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001bee:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bf0:	6802      	ldr	r2, [r0, #0]
 8001bf2:	6813      	ldr	r3, [r2, #0]
 8001bf4:	f023 030e 	bic.w	r3, r3, #14
 8001bf8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001bfa:	6802      	ldr	r2, [r0, #0]
 8001bfc:	6813      	ldr	r3, [r2, #0]
 8001bfe:	f023 0301 	bic.w	r3, r3, #1
 8001c02:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c04:	6803      	ldr	r3, [r0, #0]
 8001c06:	4a19      	ldr	r2, [pc, #100]	@ (8001c6c <HAL_DMA_Abort_IT+0x90>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d014      	beq.n	8001c36 <HAL_DMA_Abort_IT+0x5a>
 8001c0c:	3214      	adds	r2, #20
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01f      	beq.n	8001c52 <HAL_DMA_Abort_IT+0x76>
 8001c12:	3214      	adds	r2, #20
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d01e      	beq.n	8001c56 <HAL_DMA_Abort_IT+0x7a>
 8001c18:	3214      	adds	r2, #20
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d01e      	beq.n	8001c5c <HAL_DMA_Abort_IT+0x80>
 8001c1e:	3214      	adds	r2, #20
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d01e      	beq.n	8001c62 <HAL_DMA_Abort_IT+0x86>
 8001c24:	3214      	adds	r2, #20
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d002      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x54>
 8001c2a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c2e:	e003      	b.n	8001c38 <HAL_DMA_Abort_IT+0x5c>
 8001c30:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001c34:	e000      	b.n	8001c38 <HAL_DMA_Abort_IT+0x5c>
 8001c36:	2201      	movs	r2, #1
 8001c38:	4b0d      	ldr	r3, [pc, #52]	@ (8001c70 <HAL_DMA_Abort_IT+0x94>)
 8001c3a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8001c42:	2300      	movs	r3, #0
 8001c44:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001c48:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001c4a:	b16b      	cbz	r3, 8001c68 <HAL_DMA_Abort_IT+0x8c>
      hdma->XferAbortCallback(hdma);
 8001c4c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001c4e:	2000      	movs	r0, #0
 8001c50:	e7cd      	b.n	8001bee <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c52:	2210      	movs	r2, #16
 8001c54:	e7f0      	b.n	8001c38 <HAL_DMA_Abort_IT+0x5c>
 8001c56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c5a:	e7ed      	b.n	8001c38 <HAL_DMA_Abort_IT+0x5c>
 8001c5c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c60:	e7ea      	b.n	8001c38 <HAL_DMA_Abort_IT+0x5c>
 8001c62:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c66:	e7e7      	b.n	8001c38 <HAL_DMA_Abort_IT+0x5c>
  HAL_StatusTypeDef status = HAL_OK;
 8001c68:	2000      	movs	r0, #0
 8001c6a:	e7c0      	b.n	8001bee <HAL_DMA_Abort_IT+0x12>
 8001c6c:	40020008 	.word	0x40020008
 8001c70:	40020000 	.word	0x40020000

08001c74 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8001c74:	f890 0021 	ldrb.w	r0, [r0, #33]	@ 0x21
}
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b570      	push	{r4, r5, r6, lr}
 8001c7e:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c80:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001c82:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c84:	e0a2      	b.n	8001dcc <HAL_GPIO_Init+0x150>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c86:	4d7e      	ldr	r5, [pc, #504]	@ (8001e80 <HAL_GPIO_Init+0x204>)
 8001c88:	42ab      	cmp	r3, r5
 8001c8a:	d010      	beq.n	8001cae <HAL_GPIO_Init+0x32>
 8001c8c:	d907      	bls.n	8001c9e <HAL_GPIO_Init+0x22>
 8001c8e:	4d7d      	ldr	r5, [pc, #500]	@ (8001e84 <HAL_GPIO_Init+0x208>)
 8001c90:	42ab      	cmp	r3, r5
 8001c92:	d00c      	beq.n	8001cae <HAL_GPIO_Init+0x32>
 8001c94:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
 8001c98:	42ab      	cmp	r3, r5
 8001c9a:	d008      	beq.n	8001cae <HAL_GPIO_Init+0x32>
 8001c9c:	e013      	b.n	8001cc6 <HAL_GPIO_Init+0x4a>
 8001c9e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8001ca2:	42ab      	cmp	r3, r5
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x32>
 8001ca6:	f505 2570 	add.w	r5, r5, #983040	@ 0xf0000
 8001caa:	42ab      	cmp	r3, r5
 8001cac:	d107      	bne.n	8001cbe <HAL_GPIO_Init+0x42>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cae:	688b      	ldr	r3, [r1, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d055      	beq.n	8001d60 <HAL_GPIO_Init+0xe4>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d04e      	beq.n	8001d56 <HAL_GPIO_Init+0xda>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8001cb8:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cba:	2408      	movs	r4, #8
 8001cbc:	e003      	b.n	8001cc6 <HAL_GPIO_Init+0x4a>
      switch (GPIO_Init->Mode)
 8001cbe:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8001cc2:	42ab      	cmp	r3, r5
 8001cc4:	d0f3      	beq.n	8001cae <HAL_GPIO_Init+0x32>
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cc6:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8001cca:	d84b      	bhi.n	8001d64 <HAL_GPIO_Init+0xe8>
 8001ccc:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cce:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cd2:	6833      	ldr	r3, [r6, #0]
 8001cd4:	250f      	movs	r5, #15
 8001cd6:	4095      	lsls	r5, r2
 8001cd8:	ea23 0305 	bic.w	r3, r3, r5
 8001cdc:	fa04 f202 	lsl.w	r2, r4, r2
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ce4:	684b      	ldr	r3, [r1, #4]
 8001ce6:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8001cea:	d06d      	beq.n	8001dc8 <HAL_GPIO_Init+0x14c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cec:	4b66      	ldr	r3, [pc, #408]	@ (8001e88 <HAL_GPIO_Init+0x20c>)
 8001cee:	699a      	ldr	r2, [r3, #24]
 8001cf0:	f042 0201 	orr.w	r2, r2, #1
 8001cf4:	619a      	str	r2, [r3, #24]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8001d00:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8001d04:	1c95      	adds	r5, r2, #2
 8001d06:	4b61      	ldr	r3, [pc, #388]	@ (8001e8c <HAL_GPIO_Init+0x210>)
 8001d08:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d0c:	f00c 0503 	and.w	r5, ip, #3
 8001d10:	00ad      	lsls	r5, r5, #2
 8001d12:	230f      	movs	r3, #15
 8001d14:	40ab      	lsls	r3, r5
 8001d16:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d1a:	4b5d      	ldr	r3, [pc, #372]	@ (8001e90 <HAL_GPIO_Init+0x214>)
 8001d1c:	4298      	cmp	r0, r3
 8001d1e:	d028      	beq.n	8001d72 <HAL_GPIO_Init+0xf6>
 8001d20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d24:	4298      	cmp	r0, r3
 8001d26:	f000 808d 	beq.w	8001e44 <HAL_GPIO_Init+0x1c8>
 8001d2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d2e:	4298      	cmp	r0, r3
 8001d30:	f000 808a 	beq.w	8001e48 <HAL_GPIO_Init+0x1cc>
 8001d34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001d38:	4298      	cmp	r0, r3
 8001d3a:	d018      	beq.n	8001d6e <HAL_GPIO_Init+0xf2>
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	e019      	b.n	8001d74 <HAL_GPIO_Init+0xf8>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d40:	68cc      	ldr	r4, [r1, #12]
          break;
 8001d42:	e7c0      	b.n	8001cc6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d44:	68cc      	ldr	r4, [r1, #12]
 8001d46:	3404      	adds	r4, #4
          break;
 8001d48:	e7bd      	b.n	8001cc6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d4a:	68cc      	ldr	r4, [r1, #12]
 8001d4c:	3408      	adds	r4, #8
          break;
 8001d4e:	e7ba      	b.n	8001cc6 <HAL_GPIO_Init+0x4a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d50:	68cc      	ldr	r4, [r1, #12]
 8001d52:	340c      	adds	r4, #12
          break;
 8001d54:	e7b7      	b.n	8001cc6 <HAL_GPIO_Init+0x4a>
            GPIOx->BSRR = ioposition;
 8001d56:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d58:	2408      	movs	r4, #8
 8001d5a:	e7b4      	b.n	8001cc6 <HAL_GPIO_Init+0x4a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d5c:	2400      	movs	r4, #0
 8001d5e:	e7b2      	b.n	8001cc6 <HAL_GPIO_Init+0x4a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d60:	2404      	movs	r4, #4
 8001d62:	e7b0      	b.n	8001cc6 <HAL_GPIO_Init+0x4a>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d64:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d66:	f1ac 0208 	sub.w	r2, ip, #8
 8001d6a:	0092      	lsls	r2, r2, #2
 8001d6c:	e7b1      	b.n	8001cd2 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e000      	b.n	8001d74 <HAL_GPIO_Init+0xf8>
 8001d72:	2300      	movs	r3, #0
 8001d74:	40ab      	lsls	r3, r5
 8001d76:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8001d78:	3202      	adds	r2, #2
 8001d7a:	4d44      	ldr	r5, [pc, #272]	@ (8001e8c <HAL_GPIO_Init+0x210>)
 8001d7c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d80:	684b      	ldr	r3, [r1, #4]
 8001d82:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8001d86:	d061      	beq.n	8001e4c <HAL_GPIO_Init+0x1d0>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d88:	4a42      	ldr	r2, [pc, #264]	@ (8001e94 <HAL_GPIO_Init+0x218>)
 8001d8a:	6893      	ldr	r3, [r2, #8]
 8001d8c:	ea43 030e 	orr.w	r3, r3, lr
 8001d90:	6093      	str	r3, [r2, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d92:	684b      	ldr	r3, [r1, #4]
 8001d94:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8001d98:	d05e      	beq.n	8001e58 <HAL_GPIO_Init+0x1dc>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d9a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e94 <HAL_GPIO_Init+0x218>)
 8001d9c:	68d3      	ldr	r3, [r2, #12]
 8001d9e:	ea43 030e 	orr.w	r3, r3, lr
 8001da2:	60d3      	str	r3, [r2, #12]
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da4:	684b      	ldr	r3, [r1, #4]
 8001da6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8001daa:	d05b      	beq.n	8001e64 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dac:	4a39      	ldr	r2, [pc, #228]	@ (8001e94 <HAL_GPIO_Init+0x218>)
 8001dae:	6853      	ldr	r3, [r2, #4]
 8001db0:	ea43 030e 	orr.w	r3, r3, lr
 8001db4:	6053      	str	r3, [r2, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001db6:	684b      	ldr	r3, [r1, #4]
 8001db8:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8001dbc:	d058      	beq.n	8001e70 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dbe:	4a35      	ldr	r2, [pc, #212]	@ (8001e94 <HAL_GPIO_Init+0x218>)
 8001dc0:	6813      	ldr	r3, [r2, #0]
 8001dc2:	ea43 030e 	orr.w	r3, r3, lr
 8001dc6:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8001dc8:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dcc:	680b      	ldr	r3, [r1, #0]
 8001dce:	fa33 f20c 	lsrs.w	r2, r3, ip
 8001dd2:	d053      	beq.n	8001e7c <HAL_GPIO_Init+0x200>
    ioposition = (0x01uL << position);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dda:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8001dde:	ea32 0303 	bics.w	r3, r2, r3
 8001de2:	d1f1      	bne.n	8001dc8 <HAL_GPIO_Init+0x14c>
      switch (GPIO_Init->Mode)
 8001de4:	684b      	ldr	r3, [r1, #4]
 8001de6:	2b12      	cmp	r3, #18
 8001de8:	f63f af4d 	bhi.w	8001c86 <HAL_GPIO_Init+0xa>
 8001dec:	2b12      	cmp	r3, #18
 8001dee:	f63f af6a 	bhi.w	8001cc6 <HAL_GPIO_Init+0x4a>
 8001df2:	a501      	add	r5, pc, #4	@ (adr r5, 8001df8 <HAL_GPIO_Init+0x17c>)
 8001df4:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8001df8:	08001caf 	.word	0x08001caf
 8001dfc:	08001d41 	.word	0x08001d41
 8001e00:	08001d4b 	.word	0x08001d4b
 8001e04:	08001d5d 	.word	0x08001d5d
 8001e08:	08001cc7 	.word	0x08001cc7
 8001e0c:	08001cc7 	.word	0x08001cc7
 8001e10:	08001cc7 	.word	0x08001cc7
 8001e14:	08001cc7 	.word	0x08001cc7
 8001e18:	08001cc7 	.word	0x08001cc7
 8001e1c:	08001cc7 	.word	0x08001cc7
 8001e20:	08001cc7 	.word	0x08001cc7
 8001e24:	08001cc7 	.word	0x08001cc7
 8001e28:	08001cc7 	.word	0x08001cc7
 8001e2c:	08001cc7 	.word	0x08001cc7
 8001e30:	08001cc7 	.word	0x08001cc7
 8001e34:	08001cc7 	.word	0x08001cc7
 8001e38:	08001cc7 	.word	0x08001cc7
 8001e3c:	08001d45 	.word	0x08001d45
 8001e40:	08001d51 	.word	0x08001d51
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e44:	2301      	movs	r3, #1
 8001e46:	e795      	b.n	8001d74 <HAL_GPIO_Init+0xf8>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e793      	b.n	8001d74 <HAL_GPIO_Init+0xf8>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e4c:	4a11      	ldr	r2, [pc, #68]	@ (8001e94 <HAL_GPIO_Init+0x218>)
 8001e4e:	6893      	ldr	r3, [r2, #8]
 8001e50:	ea23 030e 	bic.w	r3, r3, lr
 8001e54:	6093      	str	r3, [r2, #8]
 8001e56:	e79c      	b.n	8001d92 <HAL_GPIO_Init+0x116>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e58:	4a0e      	ldr	r2, [pc, #56]	@ (8001e94 <HAL_GPIO_Init+0x218>)
 8001e5a:	68d3      	ldr	r3, [r2, #12]
 8001e5c:	ea23 030e 	bic.w	r3, r3, lr
 8001e60:	60d3      	str	r3, [r2, #12]
 8001e62:	e79f      	b.n	8001da4 <HAL_GPIO_Init+0x128>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e64:	4a0b      	ldr	r2, [pc, #44]	@ (8001e94 <HAL_GPIO_Init+0x218>)
 8001e66:	6853      	ldr	r3, [r2, #4]
 8001e68:	ea23 030e 	bic.w	r3, r3, lr
 8001e6c:	6053      	str	r3, [r2, #4]
 8001e6e:	e7a2      	b.n	8001db6 <HAL_GPIO_Init+0x13a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e70:	4a08      	ldr	r2, [pc, #32]	@ (8001e94 <HAL_GPIO_Init+0x218>)
 8001e72:	6813      	ldr	r3, [r2, #0]
 8001e74:	ea23 030e 	bic.w	r3, r3, lr
 8001e78:	6013      	str	r3, [r2, #0]
 8001e7a:	e7a5      	b.n	8001dc8 <HAL_GPIO_Init+0x14c>
  }
}
 8001e7c:	b002      	add	sp, #8
 8001e7e:	bd70      	pop	{r4, r5, r6, pc}
 8001e80:	10220000 	.word	0x10220000
 8001e84:	10310000 	.word	0x10310000
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40010000 	.word	0x40010000
 8001e90:	40010800 	.word	0x40010800
 8001e94:	40010400 	.word	0x40010400

08001e98 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8001e98:	2200      	movs	r2, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001e9a:	e06b      	b.n	8001f74 <HAL_GPIO_DeInit+0xdc>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
      tmp &= 0x0FuL << (4u * (position & 0x03u));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001e9c:	2503      	movs	r5, #3
 8001e9e:	e000      	b.n	8001ea2 <HAL_GPIO_DeInit+0xa>
 8001ea0:	2500      	movs	r5, #0
 8001ea2:	fa05 f404 	lsl.w	r4, r5, r4
 8001ea6:	4564      	cmp	r4, ip
 8001ea8:	d042      	beq.n	8001f30 <HAL_GPIO_DeInit+0x98>
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eaa:	2bff      	cmp	r3, #255	@ 0xff
 8001eac:	d85a      	bhi.n	8001f64 <HAL_GPIO_DeInit+0xcc>
 8001eae:	4686      	mov	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001eb0:	0095      	lsls	r5, r2, #2

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001eb2:	f8de 4000 	ldr.w	r4, [lr]
 8001eb6:	f04f 0c0f 	mov.w	ip, #15
 8001eba:	fa0c fc05 	lsl.w	ip, ip, r5
 8001ebe:	ea24 040c 	bic.w	r4, r4, ip
 8001ec2:	f04f 0c04 	mov.w	ip, #4
 8001ec6:	fa0c fc05 	lsl.w	ip, ip, r5
 8001eca:	ea44 040c 	orr.w	r4, r4, ip
 8001ece:	f8ce 4000 	str.w	r4, [lr]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001ed2:	68c4      	ldr	r4, [r0, #12]
 8001ed4:	ea24 0303 	bic.w	r3, r4, r3
 8001ed8:	60c3      	str	r3, [r0, #12]
    }

    position++;
 8001eda:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8001edc:	fa31 f302 	lsrs.w	r3, r1, r2
 8001ee0:	d046      	beq.n	8001f70 <HAL_GPIO_DeInit+0xd8>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	4093      	lsls	r3, r2
    if (iocurrent)
 8001ee6:	400b      	ands	r3, r1
 8001ee8:	d0f7      	beq.n	8001eda <HAL_GPIO_DeInit+0x42>
      tmp = AFIO->EXTICR[position >> 2u];
 8001eea:	0896      	lsrs	r6, r2, #2
 8001eec:	1cb5      	adds	r5, r6, #2
 8001eee:	4c26      	ldr	r4, [pc, #152]	@ (8001f88 <HAL_GPIO_DeInit+0xf0>)
 8001ef0:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001ef4:	f002 0403 	and.w	r4, r2, #3
 8001ef8:	00a4      	lsls	r4, r4, #2
 8001efa:	f04f 0c0f 	mov.w	ip, #15
 8001efe:	fa0c fe04 	lsl.w	lr, ip, r4
 8001f02:	ea0e 0c05 	and.w	ip, lr, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001f06:	4d21      	ldr	r5, [pc, #132]	@ (8001f8c <HAL_GPIO_DeInit+0xf4>)
 8001f08:	42a8      	cmp	r0, r5
 8001f0a:	d0c9      	beq.n	8001ea0 <HAL_GPIO_DeInit+0x8>
 8001f0c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001f10:	42a8      	cmp	r0, r5
 8001f12:	d009      	beq.n	8001f28 <HAL_GPIO_DeInit+0x90>
 8001f14:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001f18:	42a8      	cmp	r0, r5
 8001f1a:	d007      	beq.n	8001f2c <HAL_GPIO_DeInit+0x94>
 8001f1c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001f20:	42a8      	cmp	r0, r5
 8001f22:	d0bb      	beq.n	8001e9c <HAL_GPIO_DeInit+0x4>
 8001f24:	2504      	movs	r5, #4
 8001f26:	e7bc      	b.n	8001ea2 <HAL_GPIO_DeInit+0xa>
 8001f28:	2501      	movs	r5, #1
 8001f2a:	e7ba      	b.n	8001ea2 <HAL_GPIO_DeInit+0xa>
 8001f2c:	2502      	movs	r5, #2
 8001f2e:	e7b8      	b.n	8001ea2 <HAL_GPIO_DeInit+0xa>
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001f30:	4c17      	ldr	r4, [pc, #92]	@ (8001f90 <HAL_GPIO_DeInit+0xf8>)
 8001f32:	6825      	ldr	r5, [r4, #0]
 8001f34:	ea25 0503 	bic.w	r5, r5, r3
 8001f38:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001f3a:	6865      	ldr	r5, [r4, #4]
 8001f3c:	ea25 0503 	bic.w	r5, r5, r3
 8001f40:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001f42:	68e5      	ldr	r5, [r4, #12]
 8001f44:	ea25 0503 	bic.w	r5, r5, r3
 8001f48:	60e5      	str	r5, [r4, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001f4a:	68a5      	ldr	r5, [r4, #8]
 8001f4c:	ea25 0503 	bic.w	r5, r5, r3
 8001f50:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001f52:	4f0d      	ldr	r7, [pc, #52]	@ (8001f88 <HAL_GPIO_DeInit+0xf0>)
 8001f54:	1cb4      	adds	r4, r6, #2
 8001f56:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8001f5a:	ea25 050e 	bic.w	r5, r5, lr
 8001f5e:	f847 5024 	str.w	r5, [r7, r4, lsl #2]
 8001f62:	e7a2      	b.n	8001eaa <HAL_GPIO_DeInit+0x12>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f64:	f100 0e04 	add.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f68:	f1a2 0508 	sub.w	r5, r2, #8
 8001f6c:	00ad      	lsls	r5, r5, #2
 8001f6e:	e7a0      	b.n	8001eb2 <HAL_GPIO_DeInit+0x1a>
  }
}
 8001f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 8001f72:	3201      	adds	r2, #1
  while ((GPIO_Pin >> position) != 0u)
 8001f74:	fa31 f302 	lsrs.w	r3, r1, r2
 8001f78:	d005      	beq.n	8001f86 <HAL_GPIO_DeInit+0xee>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	4093      	lsls	r3, r2
    if (iocurrent)
 8001f7e:	400b      	ands	r3, r1
 8001f80:	d0f7      	beq.n	8001f72 <HAL_GPIO_DeInit+0xda>
{
 8001f82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f84:	e7b1      	b.n	8001eea <HAL_GPIO_DeInit+0x52>
 8001f86:	4770      	bx	lr
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	40010800 	.word	0x40010800
 8001f90:	40010400 	.word	0x40010400

08001f94 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f94:	6883      	ldr	r3, [r0, #8]
 8001f96:	4219      	tst	r1, r3
 8001f98:	d001      	beq.n	8001f9e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f9e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fa2:	b10a      	cbz	r2, 8001fa8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa4:	6101      	str	r1, [r0, #16]
 8001fa6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fa8:	0409      	lsls	r1, r1, #16
 8001faa:	6101      	str	r1, [r0, #16]
  }
}
 8001fac:	4770      	bx	lr

08001fae <I2C_Flush_DR>:
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001fae:	6803      	ldr	r3, [r0, #0]
 8001fb0:	695a      	ldr	r2, [r3, #20]
 8001fb2:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8001fb6:	d001      	beq.n	8001fbc <I2C_Flush_DR+0xe>
  {
    hi2c->Instance->DR = 0x00U;
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
  }
}
 8001fbc:	4770      	bx	lr

08001fbe <I2C_Master_SB>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fbe:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b40      	cmp	r3, #64	@ 0x40
 8001fc6:	d010      	beq.n	8001fea <I2C_Master_SB+0x2c>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
    }
  }
  else
  {
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fc8:	6903      	ldr	r3, [r0, #16]
 8001fca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001fce:	d01b      	beq.n	8002008 <I2C_Master_SB+0x4a>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
      }
    }
    else
    {
      if (hi2c->EventCount == 0U)
 8001fd0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d139      	bne.n	800204a <I2C_Master_SB+0x8c>
      {
        /* Send header of slave address */
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001fd6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001fd8:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8001fdc:	6802      	ldr	r2, [r0, #0]
 8001fde:	f003 0306 	and.w	r3, r3, #6
 8001fe2:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8001fe6:	6113      	str	r3, [r2, #16]
 8001fe8:	4770      	bx	lr
    if (hi2c->EventCount == 0U)
 8001fea:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8001fec:	b92b      	cbnz	r3, 8001ffa <I2C_Master_SB+0x3c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001fee:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001ff0:	6802      	ldr	r2, [r0, #0]
 8001ff2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8001ff6:	6113      	str	r3, [r2, #16]
 8001ff8:	4770      	bx	lr
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001ffa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001ffc:	6802      	ldr	r2, [r0, #0]
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	b2db      	uxtb	r3, r3
 8002004:	6113      	str	r3, [r2, #16]
 8002006:	4770      	bx	lr
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002008:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b21      	cmp	r3, #33	@ 0x21
 8002010:	d00f      	beq.n	8002032 <I2C_Master_SB+0x74>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002012:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002014:	6802      	ldr	r2, [r0, #0]
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	b2db      	uxtb	r3, r3
 800201c:	6113      	str	r3, [r2, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800201e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002020:	b16b      	cbz	r3, 800203e <I2C_Master_SB+0x80>
 8002022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002024:	b15b      	cbz	r3, 800203e <I2C_Master_SB+0x80>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002026:	6802      	ldr	r2, [r0, #0]
 8002028:	6853      	ldr	r3, [r2, #4]
 800202a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800202e:	6053      	str	r3, [r2, #4]
 8002030:	4770      	bx	lr
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002032:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002034:	6802      	ldr	r2, [r0, #0]
 8002036:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800203a:	6113      	str	r3, [r2, #16]
 800203c:	e7ef      	b.n	800201e <I2C_Master_SB+0x60>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800203e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002040:	b133      	cbz	r3, 8002050 <I2C_Master_SB+0x92>
 8002042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1ee      	bne.n	8002026 <I2C_Master_SB+0x68>
 8002048:	e002      	b.n	8002050 <I2C_Master_SB+0x92>
      }
      else if (hi2c->EventCount == 1U)
 800204a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800204c:	2b01      	cmp	r3, #1
 800204e:	d000      	beq.n	8002052 <I2C_Master_SB+0x94>
      {
        /* Do nothing */
      }
    }
  }
}
 8002050:	4770      	bx	lr
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002052:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002054:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8002058:	6802      	ldr	r2, [r0, #0]
 800205a:	f003 0306 	and.w	r3, r3, #6
 800205e:	f043 03f1 	orr.w	r3, r3, #241	@ 0xf1
 8002062:	6113      	str	r3, [r2, #16]
}
 8002064:	e7f4      	b.n	8002050 <I2C_Master_SB+0x92>

08002066 <I2C_Master_ADD10>:
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002066:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002068:	6802      	ldr	r2, [r0, #0]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	6113      	str	r3, [r2, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800206e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002070:	b13b      	cbz	r3, 8002082 <I2C_Master_ADD10+0x1c>
 8002072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002074:	b12b      	cbz	r3, 8002082 <I2C_Master_ADD10+0x1c>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002076:	6802      	ldr	r2, [r0, #0]
 8002078:	6853      	ldr	r3, [r2, #4]
 800207a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800207e:	6053      	str	r3, [r2, #4]
  }
}
 8002080:	4770      	bx	lr
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002082:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002084:	2b00      	cmp	r3, #0
 8002086:	d0fb      	beq.n	8002080 <I2C_Master_ADD10+0x1a>
 8002088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f3      	bne.n	8002076 <I2C_Master_ADD10+0x10>
 800208e:	e7f7      	b.n	8002080 <I2C_Master_ADD10+0x1a>

08002090 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002090:	b410      	push	{r4}
 8002092:	b08d      	sub	sp, #52	@ 0x34
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002094:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8002098:	b2da      	uxtb	r2, r3
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800209a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 800209c:	6b04      	ldr	r4, [r0, #48]	@ 0x30

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800209e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b22      	cmp	r3, #34	@ 0x22
 80020a6:	d00a      	beq.n	80020be <I2C_Master_ADDR+0x2e>
    }
  }
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020a8:	2300      	movs	r3, #0
 80020aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80020ac:	6803      	ldr	r3, [r0, #0]
 80020ae:	695a      	ldr	r2, [r3, #20]
 80020b0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80020b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  }
}
 80020b8:	b00d      	add	sp, #52	@ 0x34
 80020ba:	bc10      	pop	{r4}
 80020bc:	4770      	bx	lr
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80020be:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80020c0:	b90b      	cbnz	r3, 80020c6 <I2C_Master_ADDR+0x36>
 80020c2:	2a40      	cmp	r2, #64	@ 0x40
 80020c4:	d017      	beq.n	80020f6 <I2C_Master_ADDR+0x66>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80020c6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80020c8:	b91b      	cbnz	r3, 80020d2 <I2C_Master_ADDR+0x42>
 80020ca:	6903      	ldr	r3, [r0, #16]
 80020cc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80020d0:	d019      	beq.n	8002106 <I2C_Master_ADDR+0x76>
      if (hi2c->XferCount == 0U)
 80020d2:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d125      	bne.n	8002126 <I2C_Master_ADDR+0x96>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020da:	9303      	str	r3, [sp, #12]
 80020dc:	6803      	ldr	r3, [r0, #0]
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	9203      	str	r2, [sp, #12]
 80020e2:	699a      	ldr	r2, [r3, #24]
 80020e4:	9203      	str	r2, [sp, #12]
 80020e6:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ee:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	6503      	str	r3, [r0, #80]	@ 0x50
 80020f4:	e7e0      	b.n	80020b8 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	6803      	ldr	r3, [r0, #0]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	9201      	str	r2, [sp, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	9b01      	ldr	r3, [sp, #4]
 8002104:	e7d8      	b.n	80020b8 <I2C_Master_ADDR+0x28>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002106:	2300      	movs	r3, #0
 8002108:	9302      	str	r3, [sp, #8]
 800210a:	6803      	ldr	r3, [r0, #0]
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	9202      	str	r2, [sp, #8]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	9202      	str	r2, [sp, #8]
 8002114:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800211c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800211e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002120:	3301      	adds	r3, #1
 8002122:	6503      	str	r3, [r0, #80]	@ 0x50
 8002124:	e7c8      	b.n	80020b8 <I2C_Master_ADDR+0x28>
      else if (hi2c->XferCount == 1U)
 8002126:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	2b01      	cmp	r3, #1
 800212c:	d01c      	beq.n	8002168 <I2C_Master_ADDR+0xd8>
      else if (hi2c->XferCount == 2U)
 800212e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8002130:	b29b      	uxth	r3, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d072      	beq.n	800221c <I2C_Master_ADDR+0x18c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002136:	6802      	ldr	r2, [r0, #0]
 8002138:	6813      	ldr	r3, [r2, #0]
 800213a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800213e:	6013      	str	r3, [r2, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002140:	6803      	ldr	r3, [r0, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8002148:	f000 80b4 	beq.w	80022b4 <I2C_Master_ADDR+0x224>
 800214c:	2920      	cmp	r1, #32
 800214e:	f200 80ba 	bhi.w	80022c6 <I2C_Master_ADDR+0x236>
 8002152:	2908      	cmp	r1, #8
 8002154:	f080 80a7 	bcs.w	80022a6 <I2C_Master_ADDR+0x216>
 8002158:	2901      	cmp	r1, #1
 800215a:	f040 80ab 	bne.w	80022b4 <I2C_Master_ADDR+0x224>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	e0a5      	b.n	80022b4 <I2C_Master_ADDR+0x224>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002168:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 800216c:	d011      	beq.n	8002192 <I2C_Master_ADDR+0x102>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800216e:	2908      	cmp	r1, #8
 8002170:	d034      	beq.n	80021dc <I2C_Master_ADDR+0x14c>
 8002172:	2920      	cmp	r1, #32
 8002174:	d032      	beq.n	80021dc <I2C_Master_ADDR+0x14c>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002176:	2c12      	cmp	r4, #18
 8002178:	d02e      	beq.n	80021d8 <I2C_Master_ADDR+0x148>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800217a:	2904      	cmp	r1, #4
 800217c:	d040      	beq.n	8002200 <I2C_Master_ADDR+0x170>
 800217e:	2902      	cmp	r1, #2
 8002180:	d03e      	beq.n	8002200 <I2C_Master_ADDR+0x170>
 8002182:	2910      	cmp	r1, #16
 8002184:	d03c      	beq.n	8002200 <I2C_Master_ADDR+0x170>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002186:	6802      	ldr	r2, [r0, #0]
 8002188:	6813      	ldr	r3, [r2, #0]
 800218a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	e03b      	b.n	800220a <I2C_Master_ADDR+0x17a>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002192:	6802      	ldr	r2, [r0, #0]
 8002194:	6813      	ldr	r3, [r2, #0]
 8002196:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800219a:	6013      	str	r3, [r2, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800219c:	6803      	ldr	r3, [r0, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80021a4:	d00c      	beq.n	80021c0 <I2C_Master_ADDR+0x130>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021ac:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ae:	2300      	movs	r3, #0
 80021b0:	9304      	str	r3, [sp, #16]
 80021b2:	6803      	ldr	r3, [r0, #0]
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	9204      	str	r2, [sp, #16]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	9304      	str	r3, [sp, #16]
 80021bc:	9b04      	ldr	r3, [sp, #16]
 80021be:	e797      	b.n	80020f0 <I2C_Master_ADDR+0x60>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021c0:	2200      	movs	r2, #0
 80021c2:	9205      	str	r2, [sp, #20]
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	9205      	str	r2, [sp, #20]
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	9205      	str	r2, [sp, #20]
 80021cc:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e78b      	b.n	80020f0 <I2C_Master_ADDR+0x60>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80021d8:	2901      	cmp	r1, #1
 80021da:	d0d0      	beq.n	800217e <I2C_Master_ADDR+0xee>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021dc:	6802      	ldr	r2, [r0, #0]
 80021de:	6813      	ldr	r3, [r2, #0]
 80021e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80021e4:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e6:	2300      	movs	r3, #0
 80021e8:	9307      	str	r3, [sp, #28]
 80021ea:	6803      	ldr	r3, [r0, #0]
 80021ec:	695a      	ldr	r2, [r3, #20]
 80021ee:	9207      	str	r2, [sp, #28]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	9207      	str	r2, [sp, #28]
 80021f4:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	e777      	b.n	80020f0 <I2C_Master_ADDR+0x60>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002200:	6802      	ldr	r2, [r0, #0]
 8002202:	6813      	ldr	r3, [r2, #0]
 8002204:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002208:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800220a:	2300      	movs	r3, #0
 800220c:	9306      	str	r3, [sp, #24]
 800220e:	6803      	ldr	r3, [r0, #0]
 8002210:	695a      	ldr	r2, [r3, #20]
 8002212:	9206      	str	r2, [sp, #24]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	9306      	str	r3, [sp, #24]
 8002218:	9b06      	ldr	r3, [sp, #24]
 800221a:	e769      	b.n	80020f0 <I2C_Master_ADDR+0x60>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800221c:	2910      	cmp	r1, #16
 800221e:	d804      	bhi.n	800222a <I2C_Master_ADDR+0x19a>
 8002220:	4b2b      	ldr	r3, [pc, #172]	@ (80022d0 <I2C_Master_ADDR+0x240>)
 8002222:	40cb      	lsrs	r3, r1
 8002224:	f013 0f01 	tst.w	r3, #1
 8002228:	d122      	bne.n	8002270 <I2C_Master_ADDR+0x1e0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800222a:	6802      	ldr	r2, [r0, #0]
 800222c:	6813      	ldr	r3, [r2, #0]
 800222e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002232:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002234:	2300      	movs	r3, #0
 8002236:	9308      	str	r3, [sp, #32]
 8002238:	6803      	ldr	r3, [r0, #0]
 800223a:	695a      	ldr	r2, [r3, #20]
 800223c:	9208      	str	r2, [sp, #32]
 800223e:	699a      	ldr	r2, [r3, #24]
 8002240:	9208      	str	r2, [sp, #32]
 8002242:	9a08      	ldr	r2, [sp, #32]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800224a:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800224c:	6803      	ldr	r3, [r0, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8002254:	f43f af4c 	beq.w	80020f0 <I2C_Master_ADDR+0x60>
 8002258:	2920      	cmp	r1, #32
 800225a:	d81f      	bhi.n	800229c <I2C_Master_ADDR+0x20c>
 800225c:	2908      	cmp	r1, #8
 800225e:	d215      	bcs.n	800228c <I2C_Master_ADDR+0x1fc>
 8002260:	2901      	cmp	r1, #1
 8002262:	f47f af45 	bne.w	80020f0 <I2C_Master_ADDR+0x60>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	e73f      	b.n	80020f0 <I2C_Master_ADDR+0x60>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002270:	6802      	ldr	r2, [r0, #0]
 8002272:	6813      	ldr	r3, [r2, #0]
 8002274:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002278:	6013      	str	r3, [r2, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800227a:	2300      	movs	r3, #0
 800227c:	9309      	str	r3, [sp, #36]	@ 0x24
 800227e:	6803      	ldr	r3, [r0, #0]
 8002280:	695a      	ldr	r2, [r3, #20]
 8002282:	9209      	str	r2, [sp, #36]	@ 0x24
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	9309      	str	r3, [sp, #36]	@ 0x24
 8002288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800228a:	e7df      	b.n	800224c <I2C_Master_ADDR+0x1bc>
 800228c:	3908      	subs	r1, #8
 800228e:	4a11      	ldr	r2, [pc, #68]	@ (80022d4 <I2C_Master_ADDR+0x244>)
 8002290:	40ca      	lsrs	r2, r1
 8002292:	f012 0f01 	tst.w	r2, #1
 8002296:	f43f af2b 	beq.w	80020f0 <I2C_Master_ADDR+0x60>
 800229a:	e7e4      	b.n	8002266 <I2C_Master_ADDR+0x1d6>
 800229c:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 80022a0:	f47f af26 	bne.w	80020f0 <I2C_Master_ADDR+0x60>
 80022a4:	e7df      	b.n	8002266 <I2C_Master_ADDR+0x1d6>
 80022a6:	3908      	subs	r1, #8
 80022a8:	4a0a      	ldr	r2, [pc, #40]	@ (80022d4 <I2C_Master_ADDR+0x244>)
 80022aa:	40ca      	lsrs	r2, r1
 80022ac:	f012 0f01 	tst.w	r2, #1
 80022b0:	f47f af55 	bne.w	800215e <I2C_Master_ADDR+0xce>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b4:	2300      	movs	r3, #0
 80022b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80022b8:	6803      	ldr	r3, [r0, #0]
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	920a      	str	r2, [sp, #40]	@ 0x28
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80022c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80022c4:	e714      	b.n	80020f0 <I2C_Master_ADDR+0x60>
 80022c6:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 80022ca:	d1f3      	bne.n	80022b4 <I2C_Master_ADDR+0x224>
 80022cc:	e747      	b.n	800215e <I2C_Master_ADDR+0xce>
 80022ce:	bf00      	nop
 80022d0:	00010014 	.word	0x00010014
 80022d4:	01000101 	.word	0x01000101

080022d8 <I2C_SlaveTransmit_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 80022d8:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80022da:	b29b      	uxth	r3, r3
 80022dc:	b15b      	cbz	r3, 80022f6 <I2C_SlaveTransmit_BTF+0x1e>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022de:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80022e0:	6803      	ldr	r3, [r0, #0]
 80022e2:	7812      	ldrb	r2, [r2, #0]
 80022e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80022e6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80022e8:	3301      	adds	r3, #1
 80022ea:	6243      	str	r3, [r0, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80022ec:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	8543      	strh	r3, [r0, #42]	@ 0x2a
  }
}
 80022f6:	4770      	bx	lr

080022f8 <I2C_SlaveReceive_BTF>:
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
  if (hi2c->XferCount != 0U)
 80022f8:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	b15b      	cbz	r3, 8002316 <I2C_SlaveReceive_BTF+0x1e>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022fe:	6803      	ldr	r3, [r0, #0]
 8002300:	691a      	ldr	r2, [r3, #16]
 8002302:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002304:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002306:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8002308:	3301      	adds	r3, #1
 800230a:	6243      	str	r3, [r0, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800230c:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800230e:	b29b      	uxth	r3, r3
 8002310:	3b01      	subs	r3, #1
 8002312:	b29b      	uxth	r3, r3
 8002314:	8543      	strh	r3, [r0, #42]	@ 0x2a
  }
}
 8002316:	4770      	bx	lr

08002318 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002318:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	9301      	str	r3, [sp, #4]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800231e:	4b0e      	ldr	r3, [pc, #56]	@ (8002358 <I2C_WaitOnSTOPRequestThroughIT+0x40>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	08db      	lsrs	r3, r3, #3
 8002324:	4a0d      	ldr	r2, [pc, #52]	@ (800235c <I2C_WaitOnSTOPRequestThroughIT+0x44>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002330:	9301      	str	r3, [sp, #4]
  do
  {
    count--;
 8002332:	9b01      	ldr	r3, [sp, #4]
 8002334:	3b01      	subs	r3, #1
 8002336:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8002338:	9b01      	ldr	r3, [sp, #4]
 800233a:	b133      	cbz	r3, 800234a <I2C_WaitOnSTOPRequestThroughIT+0x32>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;

      return HAL_ERROR;
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800233c:	6803      	ldr	r3, [r0, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8002344:	d1f5      	bne.n	8002332 <I2C_WaitOnSTOPRequestThroughIT+0x1a>

  return HAL_OK;
 8002346:	2000      	movs	r0, #0
 8002348:	e004      	b.n	8002354 <I2C_WaitOnSTOPRequestThroughIT+0x3c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800234a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800234c:	f043 0320 	orr.w	r3, r3, #32
 8002350:	6403      	str	r3, [r0, #64]	@ 0x40
      return HAL_ERROR;
 8002352:	2001      	movs	r0, #1
}
 8002354:	b002      	add	sp, #8
 8002356:	4770      	bx	lr
 8002358:	20000008 	.word	0x20000008
 800235c:	14f8b589 	.word	0x14f8b589

08002360 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002360:	6803      	ldr	r3, [r0, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002368:	d101      	bne.n	800236e <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 800236a:	2000      	movs	r0, #0
}
 800236c:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800236e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002372:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002374:	2300      	movs	r3, #0
 8002376:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002378:	2220      	movs	r2, #32
 800237a:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800237e:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002382:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002384:	f042 0204 	orr.w	r2, r2, #4
 8002388:	6402      	str	r2, [r0, #64]	@ 0x40
    __HAL_UNLOCK(hi2c);
 800238a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 800238e:	2001      	movs	r0, #1
 8002390:	4770      	bx	lr

08002392 <I2C_ConvertOtherXferOptions>:
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002392:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002394:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002398:	d004      	beq.n	80023a4 <I2C_ConvertOtherXferOptions+0x12>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800239a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800239c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80023a0:	d003      	beq.n	80023aa <I2C_ConvertOtherXferOptions+0x18>
  }
  else
  {
    /* Nothing to do */
  }
}
 80023a2:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80023a4:	2301      	movs	r3, #1
 80023a6:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80023a8:	4770      	bx	lr
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80023aa:	2308      	movs	r3, #8
 80023ac:	62c3      	str	r3, [r0, #44]	@ 0x2c
}
 80023ae:	e7f8      	b.n	80023a2 <I2C_ConvertOtherXferOptions+0x10>

080023b0 <I2C_WaitOnFlagUntilTimeout>:
{
 80023b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023b4:	4606      	mov	r6, r0
 80023b6:	460c      	mov	r4, r1
 80023b8:	4617      	mov	r7, r2
 80023ba:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023bc:	e03b      	b.n	8002436 <I2C_WaitOnFlagUntilTimeout+0x86>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023be:	f7ff fb55 	bl	8001a6c <HAL_GetTick>
 80023c2:	9b06      	ldr	r3, [sp, #24]
 80023c4:	1ac0      	subs	r0, r0, r3
 80023c6:	4540      	cmp	r0, r8
 80023c8:	d802      	bhi.n	80023d0 <I2C_WaitOnFlagUntilTimeout+0x20>
 80023ca:	f1b8 0f00 	cmp.w	r8, #0
 80023ce:	d132      	bne.n	8002436 <I2C_WaitOnFlagUntilTimeout+0x86>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023d0:	2d01      	cmp	r5, #1
 80023d2:	d018      	beq.n	8002406 <I2C_WaitOnFlagUntilTimeout+0x56>
 80023d4:	6833      	ldr	r3, [r6, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	ea24 0303 	bic.w	r3, r4, r3
 80023dc:	b29b      	uxth	r3, r3
 80023de:	fab3 f383 	clz	r3, r3
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	429f      	cmp	r7, r3
 80023e6:	d126      	bne.n	8002436 <I2C_WaitOnFlagUntilTimeout+0x86>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80023e8:	2300      	movs	r3, #0
 80023ea:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80023ec:	2220      	movs	r2, #32
 80023ee:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80023f2:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80023f6:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 80023f8:	f042 0220 	orr.w	r2, r2, #32
 80023fc:	6432      	str	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80023fe:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          return HAL_ERROR;
 8002402:	2001      	movs	r0, #1
 8002404:	e027      	b.n	8002456 <I2C_WaitOnFlagUntilTimeout+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002406:	6833      	ldr	r3, [r6, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	ea24 0303 	bic.w	r3, r4, r3
 800240e:	b29b      	uxth	r3, r3
 8002410:	fab3 f383 	clz	r3, r3
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	e7e5      	b.n	80023e4 <I2C_WaitOnFlagUntilTimeout+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002418:	6833      	ldr	r3, [r6, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	ea24 0c03 	bic.w	ip, r4, r3
 8002420:	fa1f fc8c 	uxth.w	ip, ip
 8002424:	fabc fc8c 	clz	ip, ip
 8002428:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800242c:	4567      	cmp	r7, ip
 800242e:	d111      	bne.n	8002454 <I2C_WaitOnFlagUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8002430:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002434:	d1c3      	bne.n	80023be <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002436:	f3c4 4507 	ubfx	r5, r4, #16, #8
 800243a:	2d01      	cmp	r5, #1
 800243c:	d0ec      	beq.n	8002418 <I2C_WaitOnFlagUntilTimeout+0x68>
 800243e:	6833      	ldr	r3, [r6, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	ea24 0c03 	bic.w	ip, r4, r3
 8002446:	fa1f fc8c 	uxth.w	ip, ip
 800244a:	fabc fc8c 	clz	ip, ip
 800244e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8002452:	e7eb      	b.n	800242c <I2C_WaitOnFlagUntilTimeout+0x7c>
  return HAL_OK;
 8002454:	2000      	movs	r0, #0
}
 8002456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800245a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800245a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800245e:	4605      	mov	r5, r0
 8002460:	460e      	mov	r6, r1
 8002462:	4690      	mov	r8, r2
 8002464:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002466:	e053      	b.n	8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800246e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002470:	682b      	ldr	r3, [r5, #0]
 8002472:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002476:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002478:	2300      	movs	r3, #0
 800247a:	632b      	str	r3, [r5, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800247c:	2220      	movs	r2, #32
 800247e:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002482:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002486:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 8002488:	f042 0204 	orr.w	r2, r2, #4
 800248c:	642a      	str	r2, [r5, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 800248e:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
      return HAL_ERROR;
 8002492:	2001      	movs	r0, #1
 8002494:	e04a      	b.n	800252c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002496:	f7ff fae9 	bl	8001a6c <HAL_GetTick>
 800249a:	eba0 0009 	sub.w	r0, r0, r9
 800249e:	4540      	cmp	r0, r8
 80024a0:	d802      	bhi.n	80024a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
 80024a2:	f1b8 0f00 	cmp.w	r8, #0
 80024a6:	d133      	bne.n	8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80024a8:	2f01      	cmp	r7, #1
 80024aa:	d017      	beq.n	80024dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x82>
 80024ac:	682b      	ldr	r3, [r5, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	ea26 0303 	bic.w	r3, r6, r3
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b00      	subs	r3, #0
 80024b8:	bf18      	it	ne
 80024ba:	2301      	movne	r3, #1
 80024bc:	b343      	cbz	r3, 8002510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80024be:	2300      	movs	r3, #0
 80024c0:	632b      	str	r3, [r5, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80024c2:	2220      	movs	r2, #32
 80024c4:	f885 203d 	strb.w	r2, [r5, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c8:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024cc:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
 80024ce:	f042 0220 	orr.w	r2, r2, #32
 80024d2:	642a      	str	r2, [r5, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80024d4:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
          return HAL_ERROR;
 80024d8:	2001      	movs	r0, #1
 80024da:	e027      	b.n	800252c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80024dc:	682b      	ldr	r3, [r5, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	ea26 0303 	bic.w	r3, r6, r3
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3b00      	subs	r3, #0
 80024e8:	bf18      	it	ne
 80024ea:	2301      	movne	r3, #1
 80024ec:	e7e6      	b.n	80024bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024ee:	682b      	ldr	r3, [r5, #0]
 80024f0:	699c      	ldr	r4, [r3, #24]
 80024f2:	ea26 0404 	bic.w	r4, r6, r4
 80024f6:	b2a4      	uxth	r4, r4
 80024f8:	3c00      	subs	r4, #0
 80024fa:	bf18      	it	ne
 80024fc:	2401      	movne	r4, #1
 80024fe:	b1a4      	cbz	r4, 800252a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002500:	682b      	ldr	r3, [r5, #0]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002508:	d1ae      	bne.n	8002468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 800250a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800250e:	d1c2      	bne.n	8002496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002510:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8002514:	2f01      	cmp	r7, #1
 8002516:	d1ea      	bne.n	80024ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x94>
 8002518:	682b      	ldr	r3, [r5, #0]
 800251a:	695c      	ldr	r4, [r3, #20]
 800251c:	ea26 0404 	bic.w	r4, r6, r4
 8002520:	b2a4      	uxth	r4, r4
 8002522:	3c00      	subs	r4, #0
 8002524:	bf18      	it	ne
 8002526:	2401      	movne	r4, #1
 8002528:	e7e9      	b.n	80024fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
  return HAL_OK;
 800252a:	2000      	movs	r0, #0
}
 800252c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002530 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002530:	b570      	push	{r4, r5, r6, lr}
 8002532:	4604      	mov	r4, r0
 8002534:	460d      	mov	r5, r1
 8002536:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002540:	d121      	bne.n	8002586 <I2C_WaitOnTXEFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002542:	4620      	mov	r0, r4
 8002544:	f7ff ff0c 	bl	8002360 <I2C_IsAcknowledgeFailed>
 8002548:	b9f8      	cbnz	r0, 800258a <I2C_WaitOnTXEFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 800254a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800254e:	d0f3      	beq.n	8002538 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002550:	f7ff fa8c 	bl	8001a6c <HAL_GetTick>
 8002554:	1b80      	subs	r0, r0, r6
 8002556:	42a8      	cmp	r0, r5
 8002558:	d801      	bhi.n	800255e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800255a:	2d00      	cmp	r5, #0
 800255c:	d1ec      	bne.n	8002538 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002566:	d1e7      	bne.n	8002538 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002568:	2300      	movs	r3, #0
 800256a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800256c:	2220      	movs	r2, #32
 800256e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002572:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002576:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002578:	f042 0220 	orr.w	r2, r2, #32
 800257c:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800257e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 8002582:	2001      	movs	r0, #1
 8002584:	e000      	b.n	8002588 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
  return HAL_OK;
 8002586:	2000      	movs	r0, #0
}
 8002588:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800258a:	2001      	movs	r0, #1
 800258c:	e7fc      	b.n	8002588 <I2C_WaitOnTXEFlagUntilTimeout+0x58>
	...

08002590 <I2C_RequestMemoryWrite>:
{
 8002590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002594:	b085      	sub	sp, #20
 8002596:	4604      	mov	r4, r0
 8002598:	460d      	mov	r5, r1
 800259a:	4691      	mov	r9, r2
 800259c:	461f      	mov	r7, r3
 800259e:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
 80025a2:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025a4:	6803      	ldr	r3, [r0, #0]
 80025a6:	6819      	ldr	r1, [r3, #0]
 80025a8:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 80025ac:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ae:	9600      	str	r6, [sp, #0]
 80025b0:	4643      	mov	r3, r8
 80025b2:	2200      	movs	r2, #0
 80025b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025b8:	f7ff fefa 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 80025bc:	b960      	cbnz	r0, 80025d8 <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025be:	6823      	ldr	r3, [r4, #0]
 80025c0:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80025c4:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025c6:	4633      	mov	r3, r6
 80025c8:	4642      	mov	r2, r8
 80025ca:	4926      	ldr	r1, [pc, #152]	@ (8002664 <I2C_RequestMemoryWrite+0xd4>)
 80025cc:	4620      	mov	r0, r4
 80025ce:	f7ff ff44 	bl	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025d2:	b168      	cbz	r0, 80025f0 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 80025d4:	2001      	movs	r0, #1
 80025d6:	e008      	b.n	80025ea <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80025e0:	d002      	beq.n	80025e8 <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025e6:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80025e8:	2003      	movs	r0, #3
}
 80025ea:	b005      	add	sp, #20
 80025ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025f0:	2300      	movs	r3, #0
 80025f2:	9303      	str	r3, [sp, #12]
 80025f4:	6823      	ldr	r3, [r4, #0]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	9203      	str	r2, [sp, #12]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	9303      	str	r3, [sp, #12]
 80025fe:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002600:	4632      	mov	r2, r6
 8002602:	4641      	mov	r1, r8
 8002604:	4620      	mov	r0, r4
 8002606:	f7ff ff93 	bl	8002530 <I2C_WaitOnTXEFlagUntilTimeout>
 800260a:	b930      	cbnz	r0, 800261a <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800260c:	2f01      	cmp	r7, #1
 800260e:	d10f      	bne.n	8002630 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	fa5f f689 	uxtb.w	r6, r9
 8002616:	611e      	str	r6, [r3, #16]
 8002618:	e7e7      	b.n	80025ea <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800261a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800261c:	2b04      	cmp	r3, #4
 800261e:	d001      	beq.n	8002624 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8002620:	2001      	movs	r0, #1
 8002622:	e7e2      	b.n	80025ea <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002624:	6822      	ldr	r2, [r4, #0]
 8002626:	6813      	ldr	r3, [r2, #0]
 8002628:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e7f7      	b.n	8002620 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	ea4f 2219 	mov.w	r2, r9, lsr #8
 8002636:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002638:	4632      	mov	r2, r6
 800263a:	4641      	mov	r1, r8
 800263c:	4620      	mov	r0, r4
 800263e:	f7ff ff77 	bl	8002530 <I2C_WaitOnTXEFlagUntilTimeout>
 8002642:	b920      	cbnz	r0, 800264e <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	fa5f f689 	uxtb.w	r6, r9
 800264a:	611e      	str	r6, [r3, #16]
 800264c:	e7cd      	b.n	80025ea <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800264e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002650:	2b04      	cmp	r3, #4
 8002652:	d001      	beq.n	8002658 <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8002654:	2001      	movs	r0, #1
 8002656:	e7c8      	b.n	80025ea <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	6822      	ldr	r2, [r4, #0]
 800265a:	6813      	ldr	r3, [r2, #0]
 800265c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e7f7      	b.n	8002654 <I2C_RequestMemoryWrite+0xc4>
 8002664:	00010002 	.word	0x00010002

08002668 <I2C_RequestMemoryRead>:
{
 8002668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	4604      	mov	r4, r0
 8002670:	460d      	mov	r5, r1
 8002672:	4616      	mov	r6, r2
 8002674:	4699      	mov	r9, r3
 8002676:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8002678:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800267c:	6802      	ldr	r2, [r0, #0]
 800267e:	6813      	ldr	r3, [r2, #0]
 8002680:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002684:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002686:	6803      	ldr	r3, [r0, #0]
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 800268e:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002690:	f8cd 8000 	str.w	r8, [sp]
 8002694:	463b      	mov	r3, r7
 8002696:	2200      	movs	r2, #0
 8002698:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800269c:	f7ff fe88 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 80026a0:	b970      	cbnz	r0, 80026c0 <I2C_RequestMemoryRead+0x58>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026a2:	fa5f fa85 	uxtb.w	sl, r5
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	f005 05fe 	and.w	r5, r5, #254	@ 0xfe
 80026ac:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026ae:	4643      	mov	r3, r8
 80026b0:	463a      	mov	r2, r7
 80026b2:	4941      	ldr	r1, [pc, #260]	@ (80027b8 <I2C_RequestMemoryRead+0x150>)
 80026b4:	4620      	mov	r0, r4
 80026b6:	f7ff fed0 	bl	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026ba:	b168      	cbz	r0, 80026d8 <I2C_RequestMemoryRead+0x70>
    return HAL_ERROR;
 80026bc:	2001      	movs	r0, #1
 80026be:	e008      	b.n	80026d2 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80026c8:	d002      	beq.n	80026d0 <I2C_RequestMemoryRead+0x68>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026ce:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80026d0:	2003      	movs	r0, #3
}
 80026d2:	b004      	add	sp, #16
 80026d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026d8:	2300      	movs	r3, #0
 80026da:	9303      	str	r3, [sp, #12]
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	9203      	str	r2, [sp, #12]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	9303      	str	r3, [sp, #12]
 80026e6:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e8:	4642      	mov	r2, r8
 80026ea:	4639      	mov	r1, r7
 80026ec:	4620      	mov	r0, r4
 80026ee:	f7ff ff1f 	bl	8002530 <I2C_WaitOnTXEFlagUntilTimeout>
 80026f2:	b980      	cbnz	r0, 8002716 <I2C_RequestMemoryRead+0xae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026f4:	f1b9 0f01 	cmp.w	r9, #1
 80026f8:	d118      	bne.n	800272c <I2C_RequestMemoryRead+0xc4>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026fa:	6823      	ldr	r3, [r4, #0]
 80026fc:	b2f6      	uxtb	r6, r6
 80026fe:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002700:	4642      	mov	r2, r8
 8002702:	4639      	mov	r1, r7
 8002704:	4620      	mov	r0, r4
 8002706:	f7ff ff13 	bl	8002530 <I2C_WaitOnTXEFlagUntilTimeout>
 800270a:	b368      	cbz	r0, 8002768 <I2C_RequestMemoryRead+0x100>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800270c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800270e:	2b04      	cmp	r3, #4
 8002710:	d024      	beq.n	800275c <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 8002712:	2001      	movs	r0, #1
 8002714:	e7dd      	b.n	80026d2 <I2C_RequestMemoryRead+0x6a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002716:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002718:	2b04      	cmp	r3, #4
 800271a:	d001      	beq.n	8002720 <I2C_RequestMemoryRead+0xb8>
    return HAL_ERROR;
 800271c:	2001      	movs	r0, #1
 800271e:	e7d8      	b.n	80026d2 <I2C_RequestMemoryRead+0x6a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002720:	6822      	ldr	r2, [r4, #0]
 8002722:	6813      	ldr	r3, [r2, #0]
 8002724:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e7f7      	b.n	800271c <I2C_RequestMemoryRead+0xb4>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800272c:	6823      	ldr	r3, [r4, #0]
 800272e:	0a32      	lsrs	r2, r6, #8
 8002730:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002732:	4642      	mov	r2, r8
 8002734:	4639      	mov	r1, r7
 8002736:	4620      	mov	r0, r4
 8002738:	f7ff fefa 	bl	8002530 <I2C_WaitOnTXEFlagUntilTimeout>
 800273c:	b918      	cbnz	r0, 8002746 <I2C_RequestMemoryRead+0xde>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	b2f6      	uxtb	r6, r6
 8002742:	611e      	str	r6, [r3, #16]
 8002744:	e7dc      	b.n	8002700 <I2C_RequestMemoryRead+0x98>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002746:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002748:	2b04      	cmp	r3, #4
 800274a:	d001      	beq.n	8002750 <I2C_RequestMemoryRead+0xe8>
      return HAL_ERROR;
 800274c:	2001      	movs	r0, #1
 800274e:	e7c0      	b.n	80026d2 <I2C_RequestMemoryRead+0x6a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002750:	6822      	ldr	r2, [r4, #0]
 8002752:	6813      	ldr	r3, [r2, #0]
 8002754:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e7f7      	b.n	800274c <I2C_RequestMemoryRead+0xe4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275c:	6822      	ldr	r2, [r4, #0]
 800275e:	6813      	ldr	r3, [r2, #0]
 8002760:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	e7d4      	b.n	8002712 <I2C_RequestMemoryRead+0xaa>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002768:	6822      	ldr	r2, [r4, #0]
 800276a:	6813      	ldr	r3, [r2, #0]
 800276c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002770:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002772:	f8cd 8000 	str.w	r8, [sp]
 8002776:	463b      	mov	r3, r7
 8002778:	2200      	movs	r2, #0
 800277a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800277e:	4620      	mov	r0, r4
 8002780:	f7ff fe16 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8002784:	b968      	cbnz	r0, 80027a2 <I2C_RequestMemoryRead+0x13a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002786:	6822      	ldr	r2, [r4, #0]
 8002788:	f04a 0301 	orr.w	r3, sl, #1
 800278c:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800278e:	4643      	mov	r3, r8
 8002790:	463a      	mov	r2, r7
 8002792:	4909      	ldr	r1, [pc, #36]	@ (80027b8 <I2C_RequestMemoryRead+0x150>)
 8002794:	4620      	mov	r0, r4
 8002796:	f7ff fe60 	bl	800245a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800279a:	2800      	cmp	r0, #0
 800279c:	d099      	beq.n	80026d2 <I2C_RequestMemoryRead+0x6a>
    return HAL_ERROR;
 800279e:	2001      	movs	r0, #1
 80027a0:	e797      	b.n	80026d2 <I2C_RequestMemoryRead+0x6a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80027aa:	d002      	beq.n	80027b2 <I2C_RequestMemoryRead+0x14a>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027b0:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 80027b2:	2003      	movs	r0, #3
 80027b4:	e78d      	b.n	80026d2 <I2C_RequestMemoryRead+0x6a>
 80027b6:	bf00      	nop
 80027b8:	00010002 	.word	0x00010002

080027bc <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80027bc:	b570      	push	{r4, r5, r6, lr}
 80027be:	4604      	mov	r4, r0
 80027c0:	460d      	mov	r5, r1
 80027c2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f013 0f04 	tst.w	r3, #4
 80027cc:	d121      	bne.n	8002812 <I2C_WaitOnBTFFlagUntilTimeout+0x56>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027ce:	4620      	mov	r0, r4
 80027d0:	f7ff fdc6 	bl	8002360 <I2C_IsAcknowledgeFailed>
 80027d4:	b9f8      	cbnz	r0, 8002816 <I2C_WaitOnBTFFlagUntilTimeout+0x5a>
    if (Timeout != HAL_MAX_DELAY)
 80027d6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80027da:	d0f3      	beq.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027dc:	f7ff f946 	bl	8001a6c <HAL_GetTick>
 80027e0:	1b80      	subs	r0, r0, r6
 80027e2:	42a8      	cmp	r0, r5
 80027e4:	d801      	bhi.n	80027ea <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80027e6:	2d00      	cmp	r5, #0
 80027e8:	d1ec      	bne.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f013 0f04 	tst.w	r3, #4
 80027f2:	d1e7      	bne.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027f8:	2220      	movs	r2, #32
 80027fa:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027fe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002802:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002804:	f042 0220 	orr.w	r2, r2, #32
 8002808:	6422      	str	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800280a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          return HAL_ERROR;
 800280e:	2001      	movs	r0, #1
 8002810:	e000      	b.n	8002814 <I2C_WaitOnBTFFlagUntilTimeout+0x58>
  return HAL_OK;
 8002812:	2000      	movs	r0, #0
}
 8002814:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002816:	2001      	movs	r0, #1
 8002818:	e7fc      	b.n	8002814 <I2C_WaitOnBTFFlagUntilTimeout+0x58>

0800281a <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800281a:	b570      	push	{r4, r5, r6, lr}
 800281c:	4604      	mov	r4, r0
 800281e:	460d      	mov	r5, r1
 8002820:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002822:	e014      	b.n	800284e <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002824:	f06f 0210 	mvn.w	r2, #16
 8002828:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800282a:	2300      	movs	r3, #0
 800282c:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800282e:	2220      	movs	r2, #32
 8002830:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002834:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002838:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800283a:	6422      	str	r2, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 800283c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8002840:	2001      	movs	r0, #1
 8002842:	e025      	b.n	8002890 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002844:	6823      	ldr	r3, [r4, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800284c:	d010      	beq.n	8002870 <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	6958      	ldr	r0, [r3, #20]
 8002852:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8002856:	d11a      	bne.n	800288e <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002858:	6958      	ldr	r0, [r3, #20]
 800285a:	f010 0f10 	tst.w	r0, #16
 800285e:	d1e1      	bne.n	8002824 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002860:	f7ff f904 	bl	8001a6c <HAL_GetTick>
 8002864:	1b80      	subs	r0, r0, r6
 8002866:	42a8      	cmp	r0, r5
 8002868:	d8ec      	bhi.n	8002844 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
 800286a:	2d00      	cmp	r5, #0
 800286c:	d1ef      	bne.n	800284e <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
 800286e:	e7e9      	b.n	8002844 <I2C_WaitOnRXNEFlagUntilTimeout+0x2a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002870:	2300      	movs	r3, #0
 8002872:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002874:	2220      	movs	r2, #32
 8002876:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800287a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800287e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002880:	f042 0220 	orr.w	r2, r2, #32
 8002884:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002886:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_ERROR;
 800288a:	2001      	movs	r0, #1
 800288c:	e000      	b.n	8002890 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  return HAL_OK;
 800288e:	2000      	movs	r0, #0
}
 8002890:	bd70      	pop	{r4, r5, r6, pc}
	...

08002894 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002894:	2800      	cmp	r0, #0
 8002896:	f000 80cc 	beq.w	8002a32 <HAL_I2C_Init+0x19e>
{
 800289a:	b570      	push	{r4, r5, r6, lr}
 800289c:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800289e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d077      	beq.n	8002996 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80028a6:	2324      	movs	r3, #36	@ 0x24
 80028a8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80028ac:	6822      	ldr	r2, [r4, #0]
 80028ae:	6813      	ldr	r3, [r2, #0]
 80028b0:	f023 0301 	bic.w	r3, r3, #1
 80028b4:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80028b6:	6822      	ldr	r2, [r4, #0]
 80028b8:	6813      	ldr	r3, [r2, #0]
 80028ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028be:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80028c0:	6822      	ldr	r2, [r4, #0]
 80028c2:	6813      	ldr	r3, [r2, #0]
 80028c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80028c8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80028ca:	f001 fd43 	bl	8004354 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028ce:	6862      	ldr	r2, [r4, #4]
 80028d0:	4b5a      	ldr	r3, [pc, #360]	@ (8002a3c <HAL_I2C_Init+0x1a8>)
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d864      	bhi.n	80029a0 <HAL_I2C_Init+0x10c>
 80028d6:	4b5a      	ldr	r3, [pc, #360]	@ (8002a40 <HAL_I2C_Init+0x1ac>)
 80028d8:	4298      	cmp	r0, r3
 80028da:	bf8c      	ite	hi
 80028dc:	2300      	movhi	r3, #0
 80028de:	2301      	movls	r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f040 80a8 	bne.w	8002a36 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80028e6:	4957      	ldr	r1, [pc, #348]	@ (8002a44 <HAL_I2C_Init+0x1b0>)
 80028e8:	fba1 3100 	umull	r3, r1, r1, r0
 80028ec:	0c8b      	lsrs	r3, r1, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ee:	6825      	ldr	r5, [r4, #0]
 80028f0:	686a      	ldr	r2, [r5, #4]
 80028f2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80028f6:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 80028fa:	606a      	str	r2, [r5, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028fc:	6821      	ldr	r1, [r4, #0]
 80028fe:	6a0a      	ldr	r2, [r1, #32]
 8002900:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8002904:	6866      	ldr	r6, [r4, #4]
 8002906:	4d4d      	ldr	r5, [pc, #308]	@ (8002a3c <HAL_I2C_Init+0x1a8>)
 8002908:	42ae      	cmp	r6, r5
 800290a:	d84f      	bhi.n	80029ac <HAL_I2C_Init+0x118>
 800290c:	3301      	adds	r3, #1
 800290e:	4313      	orrs	r3, r2
 8002910:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002912:	6821      	ldr	r1, [r4, #0]
 8002914:	69ca      	ldr	r2, [r1, #28]
 8002916:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 800291a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800291e:	6865      	ldr	r5, [r4, #4]
 8002920:	4b46      	ldr	r3, [pc, #280]	@ (8002a3c <HAL_I2C_Init+0x1a8>)
 8002922:	429d      	cmp	r5, r3
 8002924:	d84c      	bhi.n	80029c0 <HAL_I2C_Init+0x12c>
 8002926:	1e43      	subs	r3, r0, #1
 8002928:	006d      	lsls	r5, r5, #1
 800292a:	fbb3 f3f5 	udiv	r3, r3, r5
 800292e:	3301      	adds	r3, #1
 8002930:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8002934:	4203      	tst	r3, r0
 8002936:	d078      	beq.n	8002a2a <HAL_I2C_Init+0x196>
 8002938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800293c:	431a      	orrs	r2, r3
 800293e:	61ca      	str	r2, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002940:	6821      	ldr	r1, [r4, #0]
 8002942:	680b      	ldr	r3, [r1, #0]
 8002944:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002948:	69e2      	ldr	r2, [r4, #28]
 800294a:	6a20      	ldr	r0, [r4, #32]
 800294c:	4302      	orrs	r2, r0
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002952:	6821      	ldr	r1, [r4, #0]
 8002954:	688b      	ldr	r3, [r1, #8]
 8002956:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800295a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800295e:	6922      	ldr	r2, [r4, #16]
 8002960:	68e0      	ldr	r0, [r4, #12]
 8002962:	4302      	orrs	r2, r0
 8002964:	4313      	orrs	r3, r2
 8002966:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002968:	6821      	ldr	r1, [r4, #0]
 800296a:	68cb      	ldr	r3, [r1, #12]
 800296c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002970:	6962      	ldr	r2, [r4, #20]
 8002972:	69a0      	ldr	r0, [r4, #24]
 8002974:	4302      	orrs	r2, r0
 8002976:	4313      	orrs	r3, r2
 8002978:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800297a:	6822      	ldr	r2, [r4, #0]
 800297c:	6813      	ldr	r3, [r2, #0]
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002984:	2000      	movs	r0, #0
 8002986:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002988:	2320      	movs	r3, #32
 800298a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800298e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002990:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
}
 8002994:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002996:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800299a:	f7fe fe5d 	bl	8001658 <HAL_I2C_MspInit>
 800299e:	e782      	b.n	80028a6 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029a0:	4b29      	ldr	r3, [pc, #164]	@ (8002a48 <HAL_I2C_Init+0x1b4>)
 80029a2:	4298      	cmp	r0, r3
 80029a4:	bf8c      	ite	hi
 80029a6:	2300      	movhi	r3, #0
 80029a8:	2301      	movls	r3, #1
 80029aa:	e799      	b.n	80028e0 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ac:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 80029b0:	fb05 f303 	mul.w	r3, r5, r3
 80029b4:	4d25      	ldr	r5, [pc, #148]	@ (8002a4c <HAL_I2C_Init+0x1b8>)
 80029b6:	fba5 5303 	umull	r5, r3, r5, r3
 80029ba:	099b      	lsrs	r3, r3, #6
 80029bc:	3301      	adds	r3, #1
 80029be:	e7a6      	b.n	800290e <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029c0:	68a6      	ldr	r6, [r4, #8]
 80029c2:	b9be      	cbnz	r6, 80029f4 <HAL_I2C_Init+0x160>
 80029c4:	1e43      	subs	r3, r0, #1
 80029c6:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80029ca:	fbb3 f3fc 	udiv	r3, r3, ip
 80029ce:	3301      	adds	r3, #1
 80029d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	095b      	lsrs	r3, r3, #5
 80029da:	bb43      	cbnz	r3, 8002a2e <HAL_I2C_Init+0x19a>
 80029dc:	b9c6      	cbnz	r6, 8002a10 <HAL_I2C_Init+0x17c>
 80029de:	1e43      	subs	r3, r0, #1
 80029e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029e4:	fbb3 f3f5 	udiv	r3, r3, r5
 80029e8:	3301      	adds	r3, #1
 80029ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029f2:	e7a3      	b.n	800293c <HAL_I2C_Init+0xa8>
 80029f4:	1e43      	subs	r3, r0, #1
 80029f6:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 80029fa:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 80029fe:	fbb3 f3fc 	udiv	r3, r3, ip
 8002a02:	3301      	adds	r3, #1
 8002a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a08:	fab3 f383 	clz	r3, r3
 8002a0c:	095b      	lsrs	r3, r3, #5
 8002a0e:	e7e4      	b.n	80029da <HAL_I2C_Init+0x146>
 8002a10:	1e43      	subs	r3, r0, #1
 8002a12:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002a16:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002a1a:	fbb3 f3f5 	udiv	r3, r3, r5
 8002a1e:	3301      	adds	r3, #1
 8002a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002a28:	e788      	b.n	800293c <HAL_I2C_Init+0xa8>
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	e786      	b.n	800293c <HAL_I2C_Init+0xa8>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e784      	b.n	800293c <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 8002a32:	2001      	movs	r0, #1
}
 8002a34:	4770      	bx	lr
    return HAL_ERROR;
 8002a36:	2001      	movs	r0, #1
 8002a38:	e7ac      	b.n	8002994 <HAL_I2C_Init+0x100>
 8002a3a:	bf00      	nop
 8002a3c:	000186a0 	.word	0x000186a0
 8002a40:	001e847f 	.word	0x001e847f
 8002a44:	431bde83 	.word	0x431bde83
 8002a48:	003d08ff 	.word	0x003d08ff
 8002a4c:	10624dd3 	.word	0x10624dd3

08002a50 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8002a50:	b1a8      	cbz	r0, 8002a7e <HAL_I2C_DeInit+0x2e>
{
 8002a52:	b510      	push	{r4, lr}
 8002a54:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a56:	2324      	movs	r3, #36	@ 0x24
 8002a58:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002a5c:	6802      	ldr	r2, [r0, #0]
 8002a5e:	6813      	ldr	r3, [r2, #0]
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8002a66:	f7fe fe39 	bl	80016dc <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8002a6e:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a72:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002a74:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  __HAL_UNLOCK(hi2c);
 8002a78:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8002a7c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a7e:	2001      	movs	r0, #1
}
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_I2C_Mem_Write>:
{
 8002a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	460f      	mov	r7, r1
 8002a8e:	4690      	mov	r8, r2
 8002a90:	4699      	mov	r9, r3
 8002a92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8002a94:	f7fe ffea 	bl	8001a6c <HAL_GetTick>
 8002a98:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a9a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8002a9e:	b2c0      	uxtb	r0, r0
 8002aa0:	2820      	cmp	r0, #32
 8002aa2:	d003      	beq.n	8002aac <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 8002aa4:	2002      	movs	r0, #2
}
 8002aa6:	b003      	add	sp, #12
 8002aa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aac:	9500      	str	r5, [sp, #0]
 8002aae:	2319      	movs	r3, #25
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	494b      	ldr	r1, [pc, #300]	@ (8002be0 <HAL_I2C_Mem_Write+0x15c>)
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	f7ff fc7b 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8002aba:	2800      	cmp	r0, #0
 8002abc:	f040 8089 	bne.w	8002bd2 <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8002ac0:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	f000 8086 	beq.w	8002bd6 <HAL_I2C_Mem_Write+0x152>
 8002aca:	2301      	movs	r3, #1
 8002acc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	f012 0f01 	tst.w	r2, #1
 8002ad8:	d103      	bne.n	8002ae2 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	f042 0201 	orr.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ae2:	6822      	ldr	r2, [r4, #0]
 8002ae4:	6813      	ldr	r3, [r2, #0]
 8002ae6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002aea:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002aec:	2321      	movs	r3, #33	@ 0x21
 8002aee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002af2:	2340      	movs	r3, #64	@ 0x40
 8002af4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af8:	2300      	movs	r3, #0
 8002afa:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002afe:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b00:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8002b04:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b06:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002b08:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b0a:	4b36      	ldr	r3, [pc, #216]	@ (8002be4 <HAL_I2C_Mem_Write+0x160>)
 8002b0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b0e:	9501      	str	r5, [sp, #4]
 8002b10:	9600      	str	r6, [sp, #0]
 8002b12:	464b      	mov	r3, r9
 8002b14:	4642      	mov	r2, r8
 8002b16:	4639      	mov	r1, r7
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f7ff fd39 	bl	8002590 <I2C_RequestMemoryWrite>
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	d15b      	bne.n	8002bda <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8002b22:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d035      	beq.n	8002b94 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b28:	462a      	mov	r2, r5
 8002b2a:	4631      	mov	r1, r6
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f7ff fcff 	bl	8002530 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b32:	bb20      	cbnz	r0, 8002b7e <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b34:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	7812      	ldrb	r2, [r2, #0]
 8002b3a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002b3c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002b3e:	1c53      	adds	r3, r2, #1
 8002b40:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002b42:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
 8002b44:	3901      	subs	r1, #1
 8002b46:	b289      	uxth	r1, r1
 8002b48:	8521      	strh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002b4a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	6958      	ldr	r0, [r3, #20]
 8002b58:	f010 0f04 	tst.w	r0, #4
 8002b5c:	d0e1      	beq.n	8002b22 <HAL_I2C_Mem_Write+0x9e>
 8002b5e:	2900      	cmp	r1, #0
 8002b60:	d0df      	beq.n	8002b22 <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b62:	7852      	ldrb	r2, [r2, #1]
 8002b64:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002b66:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002b68:	3301      	adds	r3, #1
 8002b6a:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8002b6c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	8523      	strh	r3, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002b72:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002b7c:	e7d1      	b.n	8002b22 <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d001      	beq.n	8002b88 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8002b84:	2001      	movs	r0, #1
 8002b86:	e78e      	b.n	8002aa6 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b88:	6822      	ldr	r2, [r4, #0]
 8002b8a:	6813      	ldr	r3, [r2, #0]
 8002b8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	e7f7      	b.n	8002b84 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b94:	462a      	mov	r2, r5
 8002b96:	4631      	mov	r1, r6
 8002b98:	4620      	mov	r0, r4
 8002b9a:	f7ff fe0f 	bl	80027bc <I2C_WaitOnBTFFlagUntilTimeout>
 8002b9e:	b150      	cbz	r0, 8002bb6 <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	d001      	beq.n	8002baa <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	e77d      	b.n	8002aa6 <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002baa:	6822      	ldr	r2, [r4, #0]
 8002bac:	6813      	ldr	r3, [r2, #0]
 8002bae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	e7f7      	b.n	8002ba6 <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb6:	6822      	ldr	r2, [r4, #0]
 8002bb8:	6813      	ldr	r3, [r2, #0]
 8002bba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bbe:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002bc0:	2320      	movs	r3, #32
 8002bc2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002bcc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8002bd0:	e769      	b.n	8002aa6 <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8002bd2:	2002      	movs	r0, #2
 8002bd4:	e767      	b.n	8002aa6 <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8002bd6:	2002      	movs	r0, #2
 8002bd8:	e765      	b.n	8002aa6 <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8002bda:	2001      	movs	r0, #1
 8002bdc:	e763      	b.n	8002aa6 <HAL_I2C_Mem_Write+0x22>
 8002bde:	bf00      	nop
 8002be0:	00100002 	.word	0x00100002
 8002be4:	ffff0000 	.word	0xffff0000

08002be8 <HAL_I2C_Mem_Read>:
{
 8002be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002bec:	b089      	sub	sp, #36	@ 0x24
 8002bee:	4604      	mov	r4, r0
 8002bf0:	460f      	mov	r7, r1
 8002bf2:	4690      	mov	r8, r2
 8002bf4:	4699      	mov	r9, r3
 8002bf6:	9e12      	ldr	r6, [sp, #72]	@ 0x48
  __IO uint32_t count = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	9307      	str	r3, [sp, #28]
  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7fe ff36 	bl	8001a6c <HAL_GetTick>
 8002c00:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c02:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 8002c06:	b2c0      	uxtb	r0, r0
 8002c08:	2820      	cmp	r0, #32
 8002c0a:	d004      	beq.n	8002c16 <HAL_I2C_Mem_Read+0x2e>
    return HAL_BUSY;
 8002c0c:	2702      	movs	r7, #2
}
 8002c0e:	4638      	mov	r0, r7
 8002c10:	b009      	add	sp, #36	@ 0x24
 8002c12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c16:	9500      	str	r5, [sp, #0]
 8002c18:	2319      	movs	r3, #25
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	4981      	ldr	r1, [pc, #516]	@ (8002e24 <HAL_I2C_Mem_Read+0x23c>)
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f7ff fbc6 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8002c24:	2800      	cmp	r0, #0
 8002c26:	f040 817c 	bne.w	8002f22 <HAL_I2C_Mem_Read+0x33a>
    __HAL_LOCK(hi2c);
 8002c2a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	f000 8179 	beq.w	8002f26 <HAL_I2C_Mem_Read+0x33e>
 8002c34:	2301      	movs	r3, #1
 8002c36:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	f012 0f01 	tst.w	r2, #1
 8002c42:	d103      	bne.n	8002c4c <HAL_I2C_Mem_Read+0x64>
      __HAL_I2C_ENABLE(hi2c);
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	f042 0201 	orr.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c4c:	6822      	ldr	r2, [r4, #0]
 8002c4e:	6813      	ldr	r3, [r2, #0]
 8002c50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c54:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c56:	2322      	movs	r3, #34	@ 0x22
 8002c58:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c5c:	2340      	movs	r3, #64	@ 0x40
 8002c5e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002c66:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002c68:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c6a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8002c6e:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c70:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002c72:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c74:	4b6c      	ldr	r3, [pc, #432]	@ (8002e28 <HAL_I2C_Mem_Read+0x240>)
 8002c76:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c78:	9501      	str	r5, [sp, #4]
 8002c7a:	9600      	str	r6, [sp, #0]
 8002c7c:	464b      	mov	r3, r9
 8002c7e:	4642      	mov	r2, r8
 8002c80:	4639      	mov	r1, r7
 8002c82:	4620      	mov	r0, r4
 8002c84:	f7ff fcf0 	bl	8002668 <I2C_RequestMemoryRead>
 8002c88:	4607      	mov	r7, r0
 8002c8a:	2800      	cmp	r0, #0
 8002c8c:	f040 814d 	bne.w	8002f2a <HAL_I2C_Mem_Read+0x342>
    if (hi2c->XferSize == 0U)
 8002c90:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002c92:	b95b      	cbnz	r3, 8002cac <HAL_I2C_Mem_Read+0xc4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c94:	9303      	str	r3, [sp, #12]
 8002c96:	6823      	ldr	r3, [r4, #0]
 8002c98:	695a      	ldr	r2, [r3, #20]
 8002c9a:	9203      	str	r2, [sp, #12]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	9203      	str	r2, [sp, #12]
 8002ca0:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e0f2      	b.n	8002e92 <HAL_I2C_Mem_Read+0x2aa>
    else if (hi2c->XferSize == 1U)
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d00f      	beq.n	8002cd0 <HAL_I2C_Mem_Read+0xe8>
    else if (hi2c->XferSize == 2U)
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d021      	beq.n	8002cf8 <HAL_I2C_Mem_Read+0x110>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cb4:	6822      	ldr	r2, [r4, #0]
 8002cb6:	6813      	ldr	r3, [r2, #0]
 8002cb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cbc:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	9306      	str	r3, [sp, #24]
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	9206      	str	r2, [sp, #24]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	9306      	str	r3, [sp, #24]
 8002ccc:	9b06      	ldr	r3, [sp, #24]
 8002cce:	e0e0      	b.n	8002e92 <HAL_I2C_Mem_Read+0x2aa>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd0:	6822      	ldr	r2, [r4, #0]
 8002cd2:	6813      	ldr	r3, [r2, #0]
 8002cd4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cd8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002cda:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cdc:	2300      	movs	r3, #0
 8002cde:	9304      	str	r3, [sp, #16]
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	695a      	ldr	r2, [r3, #20]
 8002ce4:	9204      	str	r2, [sp, #16]
 8002ce6:	699a      	ldr	r2, [r3, #24]
 8002ce8:	9204      	str	r2, [sp, #16]
 8002cea:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002cf4:	b662      	cpsie	i
}
 8002cf6:	e0cc      	b.n	8002e92 <HAL_I2C_Mem_Read+0x2aa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cf8:	6822      	ldr	r2, [r4, #0]
 8002cfa:	6813      	ldr	r3, [r2, #0]
 8002cfc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d00:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d02:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d04:	2300      	movs	r3, #0
 8002d06:	9305      	str	r3, [sp, #20]
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	695a      	ldr	r2, [r3, #20]
 8002d0c:	9205      	str	r2, [sp, #20]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	9205      	str	r2, [sp, #20]
 8002d12:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002d1c:	b662      	cpsie	i
}
 8002d1e:	e0b8      	b.n	8002e92 <HAL_I2C_Mem_Read+0x2aa>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d20:	462a      	mov	r2, r5
 8002d22:	4631      	mov	r1, r6
 8002d24:	4620      	mov	r0, r4
 8002d26:	f7ff fd78 	bl	800281a <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d2a:	2800      	cmp	r0, #0
 8002d2c:	f040 80ff 	bne.w	8002f2e <HAL_I2C_Mem_Read+0x346>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002d36:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002d38:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002d3e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002d40:	3b01      	subs	r3, #1
 8002d42:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002d44:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002d4e:	e0a0      	b.n	8002e92 <HAL_I2C_Mem_Read+0x2aa>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d50:	9500      	str	r5, [sp, #0]
 8002d52:	4633      	mov	r3, r6
 8002d54:	2200      	movs	r2, #0
 8002d56:	4935      	ldr	r1, [pc, #212]	@ (8002e2c <HAL_I2C_Mem_Read+0x244>)
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff fb29 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	f040 80e9 	bne.w	8002f36 <HAL_I2C_Mem_Read+0x34e>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d64:	6822      	ldr	r2, [r4, #0]
 8002d66:	6813      	ldr	r3, [r2, #0]
 8002d68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d6c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d6e:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d70:	6823      	ldr	r3, [r4, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002d76:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002d78:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002d7e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002d80:	3b01      	subs	r3, #1
 8002d82:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002d84:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	8563      	strh	r3, [r4, #42]	@ 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d8e:	4b28      	ldr	r3, [pc, #160]	@ (8002e30 <HAL_I2C_Mem_Read+0x248>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	08db      	lsrs	r3, r3, #3
 8002d94:	4a27      	ldr	r2, [pc, #156]	@ (8002e34 <HAL_I2C_Mem_Read+0x24c>)
 8002d96:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9a:	0a1b      	lsrs	r3, r3, #8
 8002d9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002da0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8002da4:	9307      	str	r3, [sp, #28]
            count--;
 8002da6:	9b07      	ldr	r3, [sp, #28]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	9307      	str	r3, [sp, #28]
            if (count == 0U)
 8002dac:	9b07      	ldr	r3, [sp, #28]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d028      	beq.n	8002e04 <HAL_I2C_Mem_Read+0x21c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	f012 0f04 	tst.w	r2, #4
 8002dba:	d0f4      	beq.n	8002da6 <HAL_I2C_Mem_Read+0x1be>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc2:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc4:	6823      	ldr	r3, [r4, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002dca:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002dcc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002dce:	3301      	adds	r3, #1
 8002dd0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002dd2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002dd8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002de2:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	691a      	ldr	r2, [r3, #16]
 8002de8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002dea:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002dec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002dee:	3301      	adds	r3, #1
 8002df0:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002df2:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002df4:	3b01      	subs	r3, #1
 8002df6:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002df8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002e02:	e046      	b.n	8002e92 <HAL_I2C_Mem_Read+0x2aa>
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002e04:	6323      	str	r3, [r4, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002e06:	2220      	movs	r2, #32
 8002e08:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e0c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e10:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002e12:	f042 0220 	orr.w	r2, r2, #32
 8002e16:	6422      	str	r2, [r4, #64]	@ 0x40
 8002e18:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8002e1a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
              return HAL_ERROR;
 8002e1e:	2701      	movs	r7, #1
 8002e20:	e6f5      	b.n	8002c0e <HAL_I2C_Mem_Read+0x26>
 8002e22:	bf00      	nop
 8002e24:	00100002 	.word	0x00100002
 8002e28:	ffff0000 	.word	0xffff0000
 8002e2c:	00010004 	.word	0x00010004
 8002e30:	20000008 	.word	0x20000008
 8002e34:	14f8b589 	.word	0x14f8b589
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e38:	462a      	mov	r2, r5
 8002e3a:	4631      	mov	r1, r6
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	f7ff fcec 	bl	800281a <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e42:	2800      	cmp	r0, #0
 8002e44:	d179      	bne.n	8002f3a <HAL_I2C_Mem_Read+0x352>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e46:	6823      	ldr	r3, [r4, #0]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e4c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002e4e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e50:	3301      	adds	r3, #1
 8002e52:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8002e54:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8002e56:	3a01      	subs	r2, #1
 8002e58:	b292      	uxth	r2, r2
 8002e5a:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002e5c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	6959      	ldr	r1, [r3, #20]
 8002e6a:	f011 0f04 	tst.w	r1, #4
 8002e6e:	d010      	beq.n	8002e92 <HAL_I2C_Mem_Read+0x2aa>
          if (hi2c->XferSize == 3U)
 8002e70:	2a03      	cmp	r2, #3
 8002e72:	d048      	beq.n	8002f06 <HAL_I2C_Mem_Read+0x31e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e7a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002e7c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002e7e:	3301      	adds	r3, #1
 8002e80:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002e82:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002e84:	3b01      	subs	r3, #1
 8002e86:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002e88:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e92:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d03b      	beq.n	8002f10 <HAL_I2C_Mem_Read+0x328>
      if (hi2c->XferSize <= 3U)
 8002e98:	2b03      	cmp	r3, #3
 8002e9a:	d8cd      	bhi.n	8002e38 <HAL_I2C_Mem_Read+0x250>
        if (hi2c->XferSize == 1U)
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	f43f af3f 	beq.w	8002d20 <HAL_I2C_Mem_Read+0x138>
        else if (hi2c->XferSize == 2U)
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	f47f af54 	bne.w	8002d50 <HAL_I2C_Mem_Read+0x168>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ea8:	9500      	str	r5, [sp, #0]
 8002eaa:	4633      	mov	r3, r6
 8002eac:	2200      	movs	r2, #0
 8002eae:	4924      	ldr	r1, [pc, #144]	@ (8002f40 <HAL_I2C_Mem_Read+0x358>)
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f7ff fa7d 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8002eb6:	2800      	cmp	r0, #0
 8002eb8:	d13b      	bne.n	8002f32 <HAL_I2C_Mem_Read+0x34a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002eba:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebc:	6822      	ldr	r2, [r4, #0]
 8002ebe:	6813      	ldr	r3, [r2, #0]
 8002ec0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ec4:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ecc:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002ece:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002ed4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002eda:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002ee4:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002eec:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002eee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002ef4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002efa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8002f04:	e7c5      	b.n	8002e92 <HAL_I2C_Mem_Read+0x2aa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	e7b1      	b.n	8002e74 <HAL_I2C_Mem_Read+0x28c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f10:	2320      	movs	r3, #32
 8002f12:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_UNLOCK(hi2c);
 8002f1c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_OK;
 8002f20:	e675      	b.n	8002c0e <HAL_I2C_Mem_Read+0x26>
      return HAL_BUSY;
 8002f22:	2702      	movs	r7, #2
 8002f24:	e673      	b.n	8002c0e <HAL_I2C_Mem_Read+0x26>
    __HAL_LOCK(hi2c);
 8002f26:	2702      	movs	r7, #2
 8002f28:	e671      	b.n	8002c0e <HAL_I2C_Mem_Read+0x26>
      return HAL_ERROR;
 8002f2a:	2701      	movs	r7, #1
 8002f2c:	e66f      	b.n	8002c0e <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8002f2e:	2701      	movs	r7, #1
 8002f30:	e66d      	b.n	8002c0e <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8002f32:	2701      	movs	r7, #1
 8002f34:	e66b      	b.n	8002c0e <HAL_I2C_Mem_Read+0x26>
            return HAL_ERROR;
 8002f36:	2701      	movs	r7, #1
 8002f38:	e669      	b.n	8002c0e <HAL_I2C_Mem_Read+0x26>
          return HAL_ERROR;
 8002f3a:	2701      	movs	r7, #1
 8002f3c:	e667      	b.n	8002c0e <HAL_I2C_Mem_Read+0x26>
 8002f3e:	bf00      	nop
 8002f40:	00010004 	.word	0x00010004

08002f44 <HAL_I2C_IsDeviceReady>:
{
 8002f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f48:	b085      	sub	sp, #20
 8002f4a:	4604      	mov	r4, r0
 8002f4c:	4688      	mov	r8, r1
 8002f4e:	4691      	mov	r9, r2
 8002f50:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8002f52:	f7fe fd8b 	bl	8001a6c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f56:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b20      	cmp	r3, #32
 8002f5e:	d003      	beq.n	8002f68 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8002f60:	2002      	movs	r0, #2
}
 8002f62:	b005      	add	sp, #20
 8002f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f68:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f6a:	9000      	str	r0, [sp, #0]
 8002f6c:	2319      	movs	r3, #25
 8002f6e:	2201      	movs	r2, #1
 8002f70:	4957      	ldr	r1, [pc, #348]	@ (80030d0 <HAL_I2C_IsDeviceReady+0x18c>)
 8002f72:	4620      	mov	r0, r4
 8002f74:	f7ff fa1c 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8002f78:	2800      	cmp	r0, #0
 8002f7a:	f040 80a0 	bne.w	80030be <HAL_I2C_IsDeviceReady+0x17a>
    __HAL_LOCK(hi2c);
 8002f7e:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	f000 809d 	beq.w	80030c2 <HAL_I2C_IsDeviceReady+0x17e>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f8e:	6823      	ldr	r3, [r4, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	f012 0f01 	tst.w	r2, #1
 8002f96:	d103      	bne.n	8002fa0 <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fa0:	6822      	ldr	r2, [r4, #0]
 8002fa2:	6813      	ldr	r3, [r2, #0]
 8002fa4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002fa8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002faa:	2324      	movs	r3, #36	@ 0x24
 8002fac:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb0:	2700      	movs	r7, #0
 8002fb2:	6427      	str	r7, [r4, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb4:	4b47      	ldr	r3, [pc, #284]	@ (80030d4 <HAL_I2C_IsDeviceReady+0x190>)
 8002fb6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002fb8:	e040      	b.n	800303c <HAL_I2C_IsDeviceReady+0xf8>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002fc2:	d002      	beq.n	8002fca <HAL_I2C_IsDeviceReady+0x86>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fc8:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_TIMEOUT;
 8002fca:	2003      	movs	r0, #3
 8002fcc:	e7c9      	b.n	8002f62 <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002fce:	23a0      	movs	r3, #160	@ 0xa0
 8002fd0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fd4:	6822      	ldr	r2, [r4, #0]
 8002fd6:	6953      	ldr	r3, [r2, #20]
 8002fd8:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fdc:	6952      	ldr	r2, [r2, #20]
 8002fde:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fe2:	f894 c03d 	ldrb.w	ip, [r4, #61]	@ 0x3d
 8002fe6:	fa5f fc8c 	uxtb.w	ip, ip
 8002fea:	f1bc 0fa0 	cmp.w	ip, #160	@ 0xa0
 8002fee:	d009      	beq.n	8003004 <HAL_I2C_IsDeviceReady+0xc0>
 8002ff0:	b943      	cbnz	r3, 8003004 <HAL_I2C_IsDeviceReady+0xc0>
 8002ff2:	b93a      	cbnz	r2, 8003004 <HAL_I2C_IsDeviceReady+0xc0>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ff4:	f7fe fd3a 	bl	8001a6c <HAL_GetTick>
 8002ff8:	1b80      	subs	r0, r0, r6
 8002ffa:	42a8      	cmp	r0, r5
 8002ffc:	d8e7      	bhi.n	8002fce <HAL_I2C_IsDeviceReady+0x8a>
 8002ffe:	2d00      	cmp	r5, #0
 8003000:	d1e8      	bne.n	8002fd4 <HAL_I2C_IsDeviceReady+0x90>
 8003002:	e7e4      	b.n	8002fce <HAL_I2C_IsDeviceReady+0x8a>
      hi2c->State = HAL_I2C_STATE_READY;
 8003004:	2320      	movs	r3, #32
 8003006:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	695a      	ldr	r2, [r3, #20]
 800300e:	f012 0f02 	tst.w	r2, #2
 8003012:	d131      	bne.n	8003078 <HAL_I2C_IsDeviceReady+0x134>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800301a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003022:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003024:	9600      	str	r6, [sp, #0]
 8003026:	2319      	movs	r3, #25
 8003028:	2201      	movs	r2, #1
 800302a:	4929      	ldr	r1, [pc, #164]	@ (80030d0 <HAL_I2C_IsDeviceReady+0x18c>)
 800302c:	4620      	mov	r0, r4
 800302e:	f7ff f9bf 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8003032:	2800      	cmp	r0, #0
 8003034:	d149      	bne.n	80030ca <HAL_I2C_IsDeviceReady+0x186>
      I2C_Trials++;
 8003036:	3701      	adds	r7, #1
    while (I2C_Trials < Trials);
 8003038:	454f      	cmp	r7, r9
 800303a:	d238      	bcs.n	80030ae <HAL_I2C_IsDeviceReady+0x16a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800303c:	6822      	ldr	r2, [r4, #0]
 800303e:	6813      	ldr	r3, [r2, #0]
 8003040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003044:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003046:	9600      	str	r6, [sp, #0]
 8003048:	462b      	mov	r3, r5
 800304a:	2200      	movs	r2, #0
 800304c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003050:	4620      	mov	r0, r4
 8003052:	f7ff f9ad 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8003056:	2800      	cmp	r0, #0
 8003058:	d1af      	bne.n	8002fba <HAL_I2C_IsDeviceReady+0x76>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	f008 02fe 	and.w	r2, r8, #254	@ 0xfe
 8003060:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8003062:	f7fe fd03 	bl	8001a6c <HAL_GetTick>
 8003066:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003068:	6822      	ldr	r2, [r4, #0]
 800306a:	6953      	ldr	r3, [r2, #20]
 800306c:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003070:	6952      	ldr	r2, [r2, #20]
 8003072:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003076:	e7b4      	b.n	8002fe2 <HAL_I2C_IsDeviceReady+0x9e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800307e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003080:	2300      	movs	r3, #0
 8003082:	9303      	str	r3, [sp, #12]
 8003084:	6823      	ldr	r3, [r4, #0]
 8003086:	695a      	ldr	r2, [r3, #20]
 8003088:	9203      	str	r2, [sp, #12]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	9303      	str	r3, [sp, #12]
 800308e:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003090:	9600      	str	r6, [sp, #0]
 8003092:	2319      	movs	r3, #25
 8003094:	2201      	movs	r2, #1
 8003096:	490e      	ldr	r1, [pc, #56]	@ (80030d0 <HAL_I2C_IsDeviceReady+0x18c>)
 8003098:	4620      	mov	r0, r4
 800309a:	f7ff f989 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 800309e:	b990      	cbnz	r0, 80030c6 <HAL_I2C_IsDeviceReady+0x182>
        hi2c->State = HAL_I2C_STATE_READY;
 80030a0:	2320      	movs	r3, #32
 80030a2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        __HAL_UNLOCK(hi2c);
 80030a6:	2300      	movs	r3, #0
 80030a8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
        return HAL_OK;
 80030ac:	e759      	b.n	8002f62 <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 80030ae:	2320      	movs	r3, #32
 80030b0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80030b4:	2300      	movs	r3, #0
 80030b6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    return HAL_ERROR;
 80030ba:	2001      	movs	r0, #1
 80030bc:	e751      	b.n	8002f62 <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 80030be:	2002      	movs	r0, #2
 80030c0:	e74f      	b.n	8002f62 <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 80030c2:	2002      	movs	r0, #2
 80030c4:	e74d      	b.n	8002f62 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80030c6:	2001      	movs	r0, #1
 80030c8:	e74b      	b.n	8002f62 <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 80030ca:	2001      	movs	r0, #1
 80030cc:	e749      	b.n	8002f62 <HAL_I2C_IsDeviceReady+0x1e>
 80030ce:	bf00      	nop
 80030d0:	00100002 	.word	0x00100002
 80030d4:	ffff0000 	.word	0xffff0000

080030d8 <HAL_I2C_MasterTxCpltCallback>:
}
 80030d8:	4770      	bx	lr

080030da <HAL_I2C_MasterRxCpltCallback>:
}
 80030da:	4770      	bx	lr

080030dc <HAL_I2C_SlaveTxCpltCallback>:
}
 80030dc:	4770      	bx	lr

080030de <I2C_SlaveTransmit_TXE>:
{
 80030de:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030e0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80030e4:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 80030e6:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	b183      	cbz	r3, 800310e <I2C_SlaveTransmit_TXE+0x30>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ec:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80030ee:	6803      	ldr	r3, [r0, #0]
 80030f0:	7809      	ldrb	r1, [r1, #0]
 80030f2:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 80030f4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80030f6:	3301      	adds	r3, #1
 80030f8:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 80030fa:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	3b01      	subs	r3, #1
 8003100:	b29b      	uxth	r3, r3
 8003102:	8543      	strh	r3, [r0, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003104:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003106:	b29b      	uxth	r3, r3
 8003108:	b90b      	cbnz	r3, 800310e <I2C_SlaveTransmit_TXE+0x30>
 800310a:	2a29      	cmp	r2, #41	@ 0x29
 800310c:	d000      	beq.n	8003110 <I2C_SlaveTransmit_TXE+0x32>
}
 800310e:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003110:	6802      	ldr	r2, [r0, #0]
 8003112:	6853      	ldr	r3, [r2, #4]
 8003114:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003118:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800311a:	2321      	movs	r3, #33	@ 0x21
 800311c:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800311e:	2328      	movs	r3, #40	@ 0x28
 8003120:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003124:	f7ff ffda 	bl	80030dc <HAL_I2C_SlaveTxCpltCallback>
}
 8003128:	e7f1      	b.n	800310e <I2C_SlaveTransmit_TXE+0x30>

0800312a <HAL_I2C_SlaveRxCpltCallback>:
}
 800312a:	4770      	bx	lr

0800312c <I2C_SlaveReceive_RXNE>:
{
 800312c:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800312e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003132:	b2da      	uxtb	r2, r3
  if (hi2c->XferCount != 0U)
 8003134:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003136:	b29b      	uxth	r3, r3
 8003138:	b183      	cbz	r3, 800315c <I2C_SlaveReceive_RXNE+0x30>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313a:	6803      	ldr	r3, [r0, #0]
 800313c:	6919      	ldr	r1, [r3, #16]
 800313e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003140:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 8003142:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003144:	3301      	adds	r3, #1
 8003146:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8003148:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29b      	uxth	r3, r3
 8003150:	8543      	strh	r3, [r0, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003152:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003154:	b29b      	uxth	r3, r3
 8003156:	b90b      	cbnz	r3, 800315c <I2C_SlaveReceive_RXNE+0x30>
 8003158:	2a2a      	cmp	r2, #42	@ 0x2a
 800315a:	d000      	beq.n	800315e <I2C_SlaveReceive_RXNE+0x32>
}
 800315c:	bd08      	pop	{r3, pc}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800315e:	6802      	ldr	r2, [r0, #0]
 8003160:	6853      	ldr	r3, [r2, #4]
 8003162:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003166:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003168:	2322      	movs	r3, #34	@ 0x22
 800316a:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800316c:	2328      	movs	r3, #40	@ 0x28
 800316e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003172:	f7ff ffda 	bl	800312a <HAL_I2C_SlaveRxCpltCallback>
}
 8003176:	e7f1      	b.n	800315c <I2C_SlaveReceive_RXNE+0x30>

08003178 <HAL_I2C_AddrCallback>:
}
 8003178:	4770      	bx	lr

0800317a <I2C_Slave_ADDR>:
{
 800317a:	b500      	push	{lr}
 800317c:	b083      	sub	sp, #12
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800317e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003182:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003186:	2b28      	cmp	r3, #40	@ 0x28
 8003188:	d00c      	beq.n	80031a4 <I2C_Slave_ADDR+0x2a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318a:	2300      	movs	r3, #0
 800318c:	9301      	str	r3, [sp, #4]
 800318e:	6802      	ldr	r2, [r0, #0]
 8003190:	6951      	ldr	r1, [r2, #20]
 8003192:	9101      	str	r1, [sp, #4]
 8003194:	6992      	ldr	r2, [r2, #24]
 8003196:	9201      	str	r2, [sp, #4]
 8003198:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(hi2c);
 800319a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
}
 800319e:	b003      	add	sp, #12
 80031a0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80031a4:	6802      	ldr	r2, [r0, #0]
 80031a6:	6853      	ldr	r3, [r2, #4]
 80031a8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031ac:	6053      	str	r3, [r2, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80031ae:	f011 0f04 	tst.w	r1, #4
 80031b2:	d00b      	beq.n	80031cc <I2C_Slave_ADDR+0x52>
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80031b4:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80031b6:	f011 0f80 	tst.w	r1, #128	@ 0x80
 80031ba:	d109      	bne.n	80031d0 <I2C_Slave_ADDR+0x56>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80031bc:	8982      	ldrh	r2, [r0, #12]
    __HAL_UNLOCK(hi2c);
 80031be:	2100      	movs	r1, #0
 80031c0:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80031c4:	4619      	mov	r1, r3
 80031c6:	f7ff ffd7 	bl	8003178 <HAL_I2C_AddrCallback>
 80031ca:	e7e8      	b.n	800319e <I2C_Slave_ADDR+0x24>
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e7f2      	b.n	80031b6 <I2C_Slave_ADDR+0x3c>
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80031d0:	8b02      	ldrh	r2, [r0, #24]
 80031d2:	e7f4      	b.n	80031be <I2C_Slave_ADDR+0x44>

080031d4 <HAL_I2C_ListenCpltCallback>:
}
 80031d4:	4770      	bx	lr
	...

080031d8 <I2C_Slave_AF>:
{
 80031d8:	b510      	push	{r4, lr}
 80031da:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031dc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80031e0:	b2db      	uxtb	r3, r3
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031e2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80031e4:	2a08      	cmp	r2, #8
 80031e6:	d001      	beq.n	80031ec <I2C_Slave_AF+0x14>
 80031e8:	2a20      	cmp	r2, #32
 80031ea:	d101      	bne.n	80031f0 <I2C_Slave_AF+0x18>
 80031ec:	2b28      	cmp	r3, #40	@ 0x28
 80031ee:	d006      	beq.n	80031fe <I2C_Slave_AF+0x26>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80031f0:	2b21      	cmp	r3, #33	@ 0x21
 80031f2:	d01f      	beq.n	8003234 <I2C_Slave_AF+0x5c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f4:	6823      	ldr	r3, [r4, #0]
 80031f6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031fa:	615a      	str	r2, [r3, #20]
}
 80031fc:	bd10      	pop	{r4, pc}
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003274 <I2C_Slave_AF+0x9c>)
 8003200:	62e3      	str	r3, [r4, #44]	@ 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003202:	6822      	ldr	r2, [r4, #0]
 8003204:	6853      	ldr	r3, [r2, #4]
 8003206:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800320a:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003212:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003214:	6822      	ldr	r2, [r4, #0]
 8003216:	6813      	ldr	r3, [r2, #0]
 8003218:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800321c:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800321e:	2300      	movs	r3, #0
 8003220:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003222:	2220      	movs	r2, #32
 8003224:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003228:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800322c:	4620      	mov	r0, r4
 800322e:	f7ff ffd1 	bl	80031d4 <HAL_I2C_ListenCpltCallback>
 8003232:	e7e3      	b.n	80031fc <I2C_Slave_AF+0x24>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003234:	4b0f      	ldr	r3, [pc, #60]	@ (8003274 <I2C_Slave_AF+0x9c>)
 8003236:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003238:	2321      	movs	r3, #33	@ 0x21
 800323a:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800323c:	2320      	movs	r3, #32
 800323e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003242:	2300      	movs	r3, #0
 8003244:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003248:	6822      	ldr	r2, [r4, #0]
 800324a:	6853      	ldr	r3, [r2, #4]
 800324c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003250:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003258:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800325a:	6822      	ldr	r2, [r4, #0]
 800325c:	6813      	ldr	r3, [r2, #0]
 800325e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003262:	6013      	str	r3, [r2, #0]
    I2C_Flush_DR(hi2c);
 8003264:	4620      	mov	r0, r4
 8003266:	f7fe fea2 	bl	8001fae <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800326a:	4620      	mov	r0, r4
 800326c:	f7ff ff36 	bl	80030dc <HAL_I2C_SlaveTxCpltCallback>
 8003270:	e7c4      	b.n	80031fc <I2C_Slave_AF+0x24>
 8003272:	bf00      	nop
 8003274:	ffff0000 	.word	0xffff0000

08003278 <HAL_I2C_MemTxCpltCallback>:
}
 8003278:	4770      	bx	lr

0800327a <I2C_MasterTransmit_BTF>:
{
 800327a:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800327c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800327e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b21      	cmp	r3, #33	@ 0x21
 8003286:	d000      	beq.n	800328a <I2C_MasterTransmit_BTF+0x10>
}
 8003288:	bd08      	pop	{r3, pc}
    if (hi2c->XferCount != 0U)
 800328a:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	b163      	cbz	r3, 80032aa <I2C_MasterTransmit_BTF+0x30>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003290:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8003292:	6803      	ldr	r3, [r0, #0]
 8003294:	7812      	ldrb	r2, [r2, #0]
 8003296:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003298:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800329a:	3301      	adds	r3, #1
 800329c:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 800329e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	8543      	strh	r3, [r0, #42]	@ 0x2a
 80032a8:	e7ee      	b.n	8003288 <I2C_MasterTransmit_BTF+0xe>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80032aa:	2a08      	cmp	r2, #8
 80032ac:	d004      	beq.n	80032b8 <I2C_MasterTransmit_BTF+0x3e>
 80032ae:	2a20      	cmp	r2, #32
 80032b0:	d002      	beq.n	80032b8 <I2C_MasterTransmit_BTF+0x3e>
 80032b2:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 80032b6:	d119      	bne.n	80032ec <I2C_MasterTransmit_BTF+0x72>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032b8:	6802      	ldr	r2, [r0, #0]
 80032ba:	6853      	ldr	r3, [r2, #4]
 80032bc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80032c0:	6053      	str	r3, [r2, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c2:	6802      	ldr	r2, [r0, #0]
 80032c4:	6813      	ldr	r3, [r2, #0]
 80032c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032ca:	6013      	str	r3, [r2, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80032cc:	2300      	movs	r3, #0
 80032ce:	6303      	str	r3, [r0, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80032d0:	2320      	movs	r3, #32
 80032d2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80032d6:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b40      	cmp	r3, #64	@ 0x40
 80032de:	d015      	beq.n	800330c <I2C_MasterTransmit_BTF+0x92>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80032e6:	f7ff fef7 	bl	80030d8 <HAL_I2C_MasterTxCpltCallback>
}
 80032ea:	e7cd      	b.n	8003288 <I2C_MasterTransmit_BTF+0xe>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032ec:	6802      	ldr	r2, [r0, #0]
 80032ee:	6853      	ldr	r3, [r2, #4]
 80032f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80032f4:	6053      	str	r3, [r2, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80032f6:	2311      	movs	r3, #17
 80032f8:	6303      	str	r3, [r0, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fa:	2300      	movs	r3, #0
 80032fc:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003300:	2320      	movs	r3, #32
 8003302:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003306:	f7ff fee7 	bl	80030d8 <HAL_I2C_MasterTxCpltCallback>
 800330a:	e7bd      	b.n	8003288 <I2C_MasterTransmit_BTF+0xe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800330c:	2300      	movs	r3, #0
 800330e:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003312:	f7ff ffb1 	bl	8003278 <HAL_I2C_MemTxCpltCallback>
 8003316:	e7b7      	b.n	8003288 <I2C_MasterTransmit_BTF+0xe>

08003318 <I2C_MemoryTransmit_TXE_BTF>:
{
 8003318:	b508      	push	{r3, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800331a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
  if (hi2c->EventCount == 0U)
 800331e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8003320:	b99a      	cbnz	r2, 800334a <I2C_MemoryTransmit_TXE_BTF+0x32>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003322:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8003324:	2b01      	cmp	r3, #1
 8003326:	d008      	beq.n	800333a <I2C_MemoryTransmit_TXE_BTF+0x22>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003328:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800332a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800332e:	6802      	ldr	r2, [r0, #0]
 8003330:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8003332:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003334:	3301      	adds	r3, #1
 8003336:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8003338:	bd08      	pop	{r3, pc}
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800333a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800333c:	6802      	ldr	r2, [r0, #0]
 800333e:	b2db      	uxtb	r3, r3
 8003340:	6113      	str	r3, [r2, #16]
      hi2c->EventCount += 2U;
 8003342:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003344:	3302      	adds	r3, #2
 8003346:	6503      	str	r3, [r0, #80]	@ 0x50
 8003348:	e7f6      	b.n	8003338 <I2C_MemoryTransmit_TXE_BTF+0x20>
 800334a:	b2db      	uxtb	r3, r3
  else if (hi2c->EventCount == 1U)
 800334c:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800334e:	2a01      	cmp	r2, #1
 8003350:	d023      	beq.n	800339a <I2C_MemoryTransmit_TXE_BTF+0x82>
  else if (hi2c->EventCount == 2U)
 8003352:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8003354:	2a02      	cmp	r2, #2
 8003356:	d13e      	bne.n	80033d6 <I2C_MemoryTransmit_TXE_BTF+0xbe>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003358:	2b22      	cmp	r3, #34	@ 0x22
 800335a:	d026      	beq.n	80033aa <I2C_MemoryTransmit_TXE_BTF+0x92>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800335c:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
 800335e:	b292      	uxth	r2, r2
 8003360:	b10a      	cbz	r2, 8003366 <I2C_MemoryTransmit_TXE_BTF+0x4e>
 8003362:	2b21      	cmp	r3, #33	@ 0x21
 8003364:	d02a      	beq.n	80033bc <I2C_MemoryTransmit_TXE_BTF+0xa4>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003366:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
 8003368:	b292      	uxth	r2, r2
 800336a:	2a00      	cmp	r2, #0
 800336c:	d1e4      	bne.n	8003338 <I2C_MemoryTransmit_TXE_BTF+0x20>
 800336e:	2b21      	cmp	r3, #33	@ 0x21
 8003370:	d1e2      	bne.n	8003338 <I2C_MemoryTransmit_TXE_BTF+0x20>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003372:	6802      	ldr	r2, [r0, #0]
 8003374:	6853      	ldr	r3, [r2, #4]
 8003376:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800337a:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800337c:	6802      	ldr	r2, [r0, #0]
 800337e:	6813      	ldr	r3, [r2, #0]
 8003380:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003384:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003386:	2300      	movs	r3, #0
 8003388:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800338a:	2220      	movs	r2, #32
 800338c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003390:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003394:	f7ff ff70 	bl	8003278 <HAL_I2C_MemTxCpltCallback>
 8003398:	e7ce      	b.n	8003338 <I2C_MemoryTransmit_TXE_BTF+0x20>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800339a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800339c:	6802      	ldr	r2, [r0, #0]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	6113      	str	r3, [r2, #16]
    hi2c->EventCount++;
 80033a2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80033a4:	3301      	adds	r3, #1
 80033a6:	6503      	str	r3, [r0, #80]	@ 0x50
 80033a8:	e7c6      	b.n	8003338 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80033aa:	6802      	ldr	r2, [r0, #0]
 80033ac:	6813      	ldr	r3, [r2, #0]
 80033ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033b2:	6013      	str	r3, [r2, #0]
      hi2c->EventCount++;
 80033b4:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80033b6:	3301      	adds	r3, #1
 80033b8:	6503      	str	r3, [r0, #80]	@ 0x50
 80033ba:	e7bd      	b.n	8003338 <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033bc:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 80033be:	6803      	ldr	r3, [r0, #0]
 80033c0:	7812      	ldrb	r2, [r2, #0]
 80033c2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80033c4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80033c6:	3301      	adds	r3, #1
 80033c8:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 80033ca:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	3b01      	subs	r3, #1
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	8543      	strh	r3, [r0, #42]	@ 0x2a
 80033d4:	e7b0      	b.n	8003338 <I2C_MemoryTransmit_TXE_BTF+0x20>
    I2C_Flush_DR(hi2c);
 80033d6:	f7fe fdea 	bl	8001fae <I2C_Flush_DR>
}
 80033da:	e7ad      	b.n	8003338 <I2C_MemoryTransmit_TXE_BTF+0x20>

080033dc <I2C_MasterTransmit_TXE>:
{
 80033dc:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033de:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80033e2:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80033e4:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
 80033e8:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80033ea:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033ec:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 80033ee:	2900      	cmp	r1, #0
 80033f0:	d13b      	bne.n	800346a <I2C_MasterTransmit_TXE+0x8e>
 80033f2:	2b21      	cmp	r3, #33	@ 0x21
 80033f4:	d002      	beq.n	80033fc <I2C_MasterTransmit_TXE+0x20>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80033f6:	2a40      	cmp	r2, #64	@ 0x40
 80033f8:	d042      	beq.n	8003480 <I2C_MasterTransmit_TXE+0xa4>
}
 80033fa:	bd10      	pop	{r4, pc}
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80033fc:	2c08      	cmp	r4, #8
 80033fe:	d004      	beq.n	800340a <I2C_MasterTransmit_TXE+0x2e>
 8003400:	2c20      	cmp	r4, #32
 8003402:	d002      	beq.n	800340a <I2C_MasterTransmit_TXE+0x2e>
 8003404:	f514 3f80 	cmn.w	r4, #65536	@ 0x10000
 8003408:	d119      	bne.n	800343e <I2C_MasterTransmit_TXE+0x62>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800340a:	6802      	ldr	r2, [r0, #0]
 800340c:	6853      	ldr	r3, [r2, #4]
 800340e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003412:	6053      	str	r3, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003414:	6802      	ldr	r2, [r0, #0]
 8003416:	6813      	ldr	r3, [r2, #0]
 8003418:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800341c:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800341e:	2300      	movs	r3, #0
 8003420:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003422:	2320      	movs	r3, #32
 8003424:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003428:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b40      	cmp	r3, #64	@ 0x40
 8003430:	d015      	beq.n	800345e <I2C_MasterTransmit_TXE+0x82>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003432:	2300      	movs	r3, #0
 8003434:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003438:	f7ff fe4e 	bl	80030d8 <HAL_I2C_MasterTxCpltCallback>
 800343c:	e7dd      	b.n	80033fa <I2C_MasterTransmit_TXE+0x1e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800343e:	6802      	ldr	r2, [r0, #0]
 8003440:	6853      	ldr	r3, [r2, #4]
 8003442:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003446:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003448:	2311      	movs	r3, #17
 800344a:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800344c:	2300      	movs	r3, #0
 800344e:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003452:	2320      	movs	r3, #32
 8003454:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003458:	f7ff fe3e 	bl	80030d8 <HAL_I2C_MasterTxCpltCallback>
 800345c:	e7cd      	b.n	80033fa <I2C_MasterTransmit_TXE+0x1e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800345e:	2300      	movs	r3, #0
 8003460:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003464:	f7ff ff08 	bl	8003278 <HAL_I2C_MemTxCpltCallback>
 8003468:	e7c7      	b.n	80033fa <I2C_MasterTransmit_TXE+0x1e>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800346a:	2b21      	cmp	r3, #33	@ 0x21
 800346c:	d1c3      	bne.n	80033f6 <I2C_MasterTransmit_TXE+0x1a>
    if (hi2c->XferCount == 0U)
 800346e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	b943      	cbnz	r3, 8003486 <I2C_MasterTransmit_TXE+0xaa>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003474:	6802      	ldr	r2, [r0, #0]
 8003476:	6853      	ldr	r3, [r2, #4]
 8003478:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800347c:	6053      	str	r3, [r2, #4]
 800347e:	e7bc      	b.n	80033fa <I2C_MasterTransmit_TXE+0x1e>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003480:	2b22      	cmp	r3, #34	@ 0x22
 8003482:	d1ba      	bne.n	80033fa <I2C_MasterTransmit_TXE+0x1e>
 8003484:	e7f3      	b.n	800346e <I2C_MasterTransmit_TXE+0x92>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003486:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b40      	cmp	r3, #64	@ 0x40
 800348e:	d00c      	beq.n	80034aa <I2C_MasterTransmit_TXE+0xce>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003490:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8003492:	6803      	ldr	r3, [r0, #0]
 8003494:	7812      	ldrb	r2, [r2, #0]
 8003496:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003498:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800349a:	3301      	adds	r3, #1
 800349c:	6243      	str	r3, [r0, #36]	@ 0x24
        hi2c->XferCount--;
 800349e:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	8543      	strh	r3, [r0, #42]	@ 0x2a
}
 80034a8:	e7a7      	b.n	80033fa <I2C_MasterTransmit_TXE+0x1e>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80034aa:	f7ff ff35 	bl	8003318 <I2C_MemoryTransmit_TXE_BTF>
 80034ae:	e7a4      	b.n	80033fa <I2C_MasterTransmit_TXE+0x1e>

080034b0 <HAL_I2C_MemRxCpltCallback>:
}
 80034b0:	4770      	bx	lr

080034b2 <I2C_MasterReceive_BTF>:
{
 80034b2:	b508      	push	{r3, lr}
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034b4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
  if (hi2c->XferCount == 4U)
 80034b6:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d014      	beq.n	80034e8 <I2C_MasterReceive_BTF+0x36>
  else if (hi2c->XferCount == 3U)
 80034be:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d022      	beq.n	800350c <I2C_MasterReceive_BTF+0x5a>
  else if (hi2c->XferCount == 2U)
 80034c6:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d039      	beq.n	8003542 <I2C_MasterReceive_BTF+0x90>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ce:	6803      	ldr	r3, [r0, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80034d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034d6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80034d8:	3301      	adds	r3, #1
 80034da:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 80034dc:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	8543      	strh	r3, [r0, #42]	@ 0x2a
}
 80034e6:	e010      	b.n	800350a <I2C_MasterReceive_BTF+0x58>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80034e8:	6802      	ldr	r2, [r0, #0]
 80034ea:	6853      	ldr	r3, [r2, #4]
 80034ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034f0:	6053      	str	r3, [r2, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f2:	6803      	ldr	r3, [r0, #0]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80034f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80034fa:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80034fc:	3301      	adds	r3, #1
 80034fe:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8003500:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b29b      	uxth	r3, r3
 8003508:	8543      	strh	r3, [r0, #42]	@ 0x2a
}
 800350a:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800350c:	6801      	ldr	r1, [r0, #0]
 800350e:	684b      	ldr	r3, [r1, #4]
 8003510:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003514:	604b      	str	r3, [r1, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003516:	2a04      	cmp	r2, #4
 8003518:	d006      	beq.n	8003528 <I2C_MasterReceive_BTF+0x76>
 800351a:	2a02      	cmp	r2, #2
 800351c:	d004      	beq.n	8003528 <I2C_MasterReceive_BTF+0x76>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800351e:	6802      	ldr	r2, [r0, #0]
 8003520:	6813      	ldr	r3, [r2, #0]
 8003522:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003526:	6013      	str	r3, [r2, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003528:	6803      	ldr	r3, [r0, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800352e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003530:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003532:	3301      	adds	r3, #1
 8003534:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8003536:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29b      	uxth	r3, r3
 800353e:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8003540:	e7e3      	b.n	800350a <I2C_MasterReceive_BTF+0x58>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003542:	1e53      	subs	r3, r2, #1
 8003544:	2b0f      	cmp	r3, #15
 8003546:	d842      	bhi.n	80035ce <I2C_MasterReceive_BTF+0x11c>
 8003548:	e8df f003 	tbb	[pc, r3]
 800354c:	3b413b08 	.word	0x3b413b08
 8003550:	41414141 	.word	0x41414141
 8003554:	41414141 	.word	0x41414141
 8003558:	08414141 	.word	0x08414141
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800355c:	6801      	ldr	r1, [r0, #0]
 800355e:	680b      	ldr	r3, [r1, #0]
 8003560:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003564:	600b      	str	r3, [r1, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003566:	6803      	ldr	r3, [r0, #0]
 8003568:	6919      	ldr	r1, [r3, #16]
 800356a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800356c:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 800356e:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8003570:	1c4b      	adds	r3, r1, #1
 8003572:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 8003574:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	b29b      	uxth	r3, r3
 800357c:	8543      	strh	r3, [r0, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357e:	6803      	ldr	r3, [r0, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	704b      	strb	r3, [r1, #1]
    hi2c->pBuffPtr++;
 8003584:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003586:	3301      	adds	r3, #1
 8003588:	6243      	str	r3, [r0, #36]	@ 0x24
    hi2c->XferCount--;
 800358a:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29b      	uxth	r3, r3
 8003592:	8543      	strh	r3, [r0, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003594:	6801      	ldr	r1, [r0, #0]
 8003596:	684b      	ldr	r3, [r1, #4]
 8003598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800359c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800359e:	2320      	movs	r3, #32
 80035a0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80035a4:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b40      	cmp	r3, #64	@ 0x40
 80035ac:	d015      	beq.n	80035da <I2C_MasterReceive_BTF+0x128>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ae:	2300      	movs	r3, #0
 80035b0:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80035b4:	2a08      	cmp	r2, #8
 80035b6:	d017      	beq.n	80035e8 <I2C_MasterReceive_BTF+0x136>
 80035b8:	2a20      	cmp	r2, #32
 80035ba:	d015      	beq.n	80035e8 <I2C_MasterReceive_BTF+0x136>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80035bc:	2312      	movs	r3, #18
 80035be:	6303      	str	r3, [r0, #48]	@ 0x30
 80035c0:	e014      	b.n	80035ec <I2C_MasterReceive_BTF+0x13a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c2:	6801      	ldr	r1, [r0, #0]
 80035c4:	680b      	ldr	r3, [r1, #0]
 80035c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035ca:	600b      	str	r3, [r1, #0]
 80035cc:	e7cb      	b.n	8003566 <I2C_MasterReceive_BTF+0xb4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ce:	6801      	ldr	r1, [r0, #0]
 80035d0:	680b      	ldr	r3, [r1, #0]
 80035d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035d6:	600b      	str	r3, [r1, #0]
 80035d8:	e7c5      	b.n	8003566 <I2C_MasterReceive_BTF+0xb4>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035da:	2300      	movs	r3, #0
 80035dc:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80035e0:	6303      	str	r3, [r0, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80035e2:	f7ff ff65 	bl	80034b0 <HAL_I2C_MemRxCpltCallback>
 80035e6:	e790      	b.n	800350a <I2C_MasterReceive_BTF+0x58>
        hi2c->PreviousState = I2C_STATE_NONE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	6303      	str	r3, [r0, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80035ec:	f7ff fd75 	bl	80030da <HAL_I2C_MasterRxCpltCallback>
 80035f0:	e78b      	b.n	800350a <I2C_MasterReceive_BTF+0x58>

080035f2 <HAL_I2C_ErrorCallback>:
}
 80035f2:	4770      	bx	lr

080035f4 <I2C_MasterReceive_RXNE>:
{
 80035f4:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035f6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b22      	cmp	r3, #34	@ 0x22
 80035fe:	d000      	beq.n	8003602 <I2C_MasterReceive_RXNE+0xe>
}
 8003600:	bd38      	pop	{r3, r4, r5, pc}
 8003602:	4604      	mov	r4, r0
    CurrentXferOptions = hi2c->XferOptions;
 8003604:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
    tmp = hi2c->XferCount;
 8003606:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003608:	b29b      	uxth	r3, r3
    if (tmp > 3U)
 800360a:	2b03      	cmp	r3, #3
 800360c:	d915      	bls.n	800363a <I2C_MasterReceive_RXNE+0x46>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360e:	6803      	ldr	r3, [r0, #0]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003614:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003616:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003618:	3301      	adds	r3, #1
 800361a:	6243      	str	r3, [r0, #36]	@ 0x24
      hi2c->XferCount--;
 800361c:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29b      	uxth	r3, r3
 8003624:	8543      	strh	r3, [r0, #42]	@ 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8003626:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b03      	cmp	r3, #3
 800362c:	d1e8      	bne.n	8003600 <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800362e:	6802      	ldr	r2, [r0, #0]
 8003630:	6853      	ldr	r3, [r2, #4]
 8003632:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003636:	6053      	str	r3, [r2, #4]
 8003638:	e7e2      	b.n	8003600 <I2C_MasterReceive_RXNE+0xc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800363a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800363c:	2a02      	cmp	r2, #2
 800363e:	d001      	beq.n	8003644 <I2C_MasterReceive_RXNE+0x50>
 8003640:	2b01      	cmp	r3, #1
 8003642:	d905      	bls.n	8003650 <I2C_MasterReceive_RXNE+0x5c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003644:	6822      	ldr	r2, [r4, #0]
 8003646:	6853      	ldr	r3, [r2, #4]
 8003648:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800364c:	6053      	str	r3, [r2, #4]
}
 800364e:	e7d7      	b.n	8003600 <I2C_MasterReceive_RXNE+0xc>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003650:	f7fe fe62 	bl	8002318 <I2C_WaitOnSTOPRequestThroughIT>
 8003654:	2800      	cmp	r0, #0
 8003656:	d135      	bne.n	80036c4 <I2C_MasterReceive_RXNE+0xd0>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003658:	6822      	ldr	r2, [r4, #0]
 800365a:	6813      	ldr	r3, [r2, #0]
 800365c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003660:	6013      	str	r3, [r2, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003662:	6822      	ldr	r2, [r4, #0]
 8003664:	6853      	ldr	r3, [r2, #4]
 8003666:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800366a:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003672:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003674:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003676:	3301      	adds	r3, #1
 8003678:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 800367a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800367c:	b29b      	uxth	r3, r3
 800367e:	3b01      	subs	r3, #1
 8003680:	b29b      	uxth	r3, r3
 8003682:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003684:	2320      	movs	r3, #32
 8003686:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800368a:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b40      	cmp	r3, #64	@ 0x40
 8003692:	d009      	beq.n	80036a8 <I2C_MasterReceive_RXNE+0xb4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003694:	2300      	movs	r3, #0
 8003696:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800369a:	2d08      	cmp	r5, #8
 800369c:	d00c      	beq.n	80036b8 <I2C_MasterReceive_RXNE+0xc4>
 800369e:	2d20      	cmp	r5, #32
 80036a0:	d00a      	beq.n	80036b8 <I2C_MasterReceive_RXNE+0xc4>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036a2:	2312      	movs	r3, #18
 80036a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80036a6:	e009      	b.n	80036bc <I2C_MasterReceive_RXNE+0xc8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80036ae:	6323      	str	r3, [r4, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80036b0:	4620      	mov	r0, r4
 80036b2:	f7ff fefd 	bl	80034b0 <HAL_I2C_MemRxCpltCallback>
 80036b6:	e7a3      	b.n	8003600 <I2C_MasterReceive_RXNE+0xc>
            hi2c->PreviousState = I2C_STATE_NONE;
 80036b8:	2300      	movs	r3, #0
 80036ba:	6323      	str	r3, [r4, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80036bc:	4620      	mov	r0, r4
 80036be:	f7ff fd0c 	bl	80030da <HAL_I2C_MasterRxCpltCallback>
 80036c2:	e79d      	b.n	8003600 <I2C_MasterReceive_RXNE+0xc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036c4:	6822      	ldr	r2, [r4, #0]
 80036c6:	6853      	ldr	r3, [r2, #4]
 80036c8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80036cc:	6053      	str	r3, [r2, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80036d4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80036d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80036d8:	3301      	adds	r3, #1
 80036da:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80036dc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80036e6:	2320      	movs	r3, #32
 80036e8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80036f2:	4620      	mov	r0, r4
 80036f4:	f7ff ff7d 	bl	80035f2 <HAL_I2C_ErrorCallback>
 80036f8:	e782      	b.n	8003600 <I2C_MasterReceive_RXNE+0xc>

080036fa <HAL_I2C_AbortCpltCallback>:
}
 80036fa:	4770      	bx	lr

080036fc <I2C_DMAAbort>:
{
 80036fc:	b500      	push	{lr}
 80036fe:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	9301      	str	r3, [sp, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003704:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003706:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
 800370a:	b2d2      	uxtb	r2, r2
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800370c:	4b32      	ldr	r3, [pc, #200]	@ (80037d8 <I2C_DMAAbort+0xdc>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	08db      	lsrs	r3, r3, #3
 8003712:	4932      	ldr	r1, [pc, #200]	@ (80037dc <I2C_DMAAbort+0xe0>)
 8003714:	fba1 1303 	umull	r1, r3, r1, r3
 8003718:	0a1b      	lsrs	r3, r3, #8
 800371a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800371e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003722:	9301      	str	r3, [sp, #4]
    if (count == 0U)
 8003724:	9b01      	ldr	r3, [sp, #4]
 8003726:	b143      	cbz	r3, 800373a <I2C_DMAAbort+0x3e>
    count--;
 8003728:	9b01      	ldr	r3, [sp, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800372e:	6803      	ldr	r3, [r0, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8003736:	d1f5      	bne.n	8003724 <I2C_DMAAbort+0x28>
 8003738:	e003      	b.n	8003742 <I2C_DMAAbort+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800373a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800373c:	f043 0320 	orr.w	r3, r3, #32
 8003740:	6403      	str	r3, [r0, #64]	@ 0x40
  if (hi2c->hdmatx != NULL)
 8003742:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003744:	b10b      	cbz	r3, 800374a <I2C_DMAAbort+0x4e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003746:	2100      	movs	r1, #0
 8003748:	6299      	str	r1, [r3, #40]	@ 0x28
  if (hi2c->hdmarx != NULL)
 800374a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800374c:	b10b      	cbz	r3, 8003752 <I2C_DMAAbort+0x56>
    hi2c->hdmarx->XferCpltCallback = NULL;
 800374e:	2100      	movs	r1, #0
 8003750:	6299      	str	r1, [r3, #40]	@ 0x28
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003752:	6801      	ldr	r1, [r0, #0]
 8003754:	680b      	ldr	r3, [r1, #0]
 8003756:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800375a:	600b      	str	r3, [r1, #0]
  hi2c->XferCount = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	8543      	strh	r3, [r0, #42]	@ 0x2a
  if (hi2c->hdmatx != NULL)
 8003760:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003762:	b10b      	cbz	r3, 8003768 <I2C_DMAAbort+0x6c>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003764:	2100      	movs	r1, #0
 8003766:	6359      	str	r1, [r3, #52]	@ 0x34
  if (hi2c->hdmarx != NULL)
 8003768:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800376a:	b10b      	cbz	r3, 8003770 <I2C_DMAAbort+0x74>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800376c:	2100      	movs	r1, #0
 800376e:	6359      	str	r1, [r3, #52]	@ 0x34
  __HAL_I2C_DISABLE(hi2c);
 8003770:	6801      	ldr	r1, [r0, #0]
 8003772:	680b      	ldr	r3, [r1, #0]
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	600b      	str	r3, [r1, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800377a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b60      	cmp	r3, #96	@ 0x60
 8003782:	d00e      	beq.n	80037a2 <I2C_DMAAbort+0xa6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003784:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8003788:	2a28      	cmp	r2, #40	@ 0x28
 800378a:	d014      	beq.n	80037b6 <I2C_DMAAbort+0xba>
      hi2c->State = HAL_I2C_STATE_READY;
 800378c:	2320      	movs	r3, #32
 800378e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003792:	2300      	movs	r3, #0
 8003794:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003798:	f7ff ff2b 	bl	80035f2 <HAL_I2C_ErrorCallback>
}
 800379c:	b003      	add	sp, #12
 800379e:	f85d fb04 	ldr.w	pc, [sp], #4
    hi2c->State         = HAL_I2C_STATE_READY;
 80037a2:	2320      	movs	r3, #32
 80037a4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80037ae:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80037b0:	f7ff ffa3 	bl	80036fa <HAL_I2C_AbortCpltCallback>
 80037b4:	e7f2      	b.n	800379c <I2C_DMAAbort+0xa0>
      __HAL_I2C_ENABLE(hi2c);
 80037b6:	6802      	ldr	r2, [r0, #0]
 80037b8:	6813      	ldr	r3, [r2, #0]
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c0:	6802      	ldr	r2, [r0, #0]
 80037c2:	6813      	ldr	r3, [r2, #0]
 80037c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037c8:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037ce:	2328      	movs	r3, #40	@ 0x28
 80037d0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
 80037d4:	e7e0      	b.n	8003798 <I2C_DMAAbort+0x9c>
 80037d6:	bf00      	nop
 80037d8:	20000008 	.word	0x20000008
 80037dc:	14f8b589 	.word	0x14f8b589

080037e0 <I2C_ITError>:
{
 80037e0:	b510      	push	{r4, lr}
 80037e2:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037e4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80037e8:	b2db      	uxtb	r3, r3
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80037ea:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
 80037ee:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80037f0:	2a10      	cmp	r2, #16
 80037f2:	d036      	beq.n	8003862 <I2C_ITError+0x82>
 80037f4:	2a40      	cmp	r2, #64	@ 0x40
 80037f6:	d034      	beq.n	8003862 <I2C_ITError+0x82>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037f8:	f003 0228 	and.w	r2, r3, #40	@ 0x28
 80037fc:	2a28      	cmp	r2, #40	@ 0x28
 80037fe:	d038      	beq.n	8003872 <I2C_ITError+0x92>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003800:	6822      	ldr	r2, [r4, #0]
 8003802:	6852      	ldr	r2, [r2, #4]
 8003804:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8003808:	d107      	bne.n	800381a <I2C_ITError+0x3a>
 800380a:	2b60      	cmp	r3, #96	@ 0x60
 800380c:	d005      	beq.n	800381a <I2C_ITError+0x3a>
      hi2c->State = HAL_I2C_STATE_READY;
 800380e:	2320      	movs	r3, #32
 8003810:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003814:	2300      	movs	r3, #0
 8003816:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 800381a:	2300      	movs	r3, #0
 800381c:	6323      	str	r3, [r4, #48]	@ 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8003826:	d048      	beq.n	80038ba <I2C_ITError+0xda>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800382e:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003830:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003832:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	d020      	beq.n	800387e <I2C_ITError+0x9e>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800383c:	4b44      	ldr	r3, [pc, #272]	@ (8003950 <I2C_ITError+0x170>)
 800383e:	6353      	str	r3, [r2, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003840:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003842:	f7fe f9cb 	bl	8001bdc <HAL_DMA_Abort_IT>
 8003846:	2800      	cmp	r0, #0
 8003848:	d049      	beq.n	80038de <I2C_ITError+0xfe>
        __HAL_I2C_DISABLE(hi2c);
 800384a:	6822      	ldr	r2, [r4, #0]
 800384c:	6813      	ldr	r3, [r2, #0]
 800384e:	f023 0301 	bic.w	r3, r3, #1
 8003852:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003854:	2320      	movs	r3, #32
 8003856:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800385a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800385c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800385e:	4798      	blx	r3
 8003860:	e03d      	b.n	80038de <I2C_ITError+0xfe>
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003862:	2b22      	cmp	r3, #34	@ 0x22
 8003864:	d1c8      	bne.n	80037f8 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003866:	6821      	ldr	r1, [r4, #0]
 8003868:	680a      	ldr	r2, [r1, #0]
 800386a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800386e:	600a      	str	r2, [r1, #0]
 8003870:	e7c2      	b.n	80037f8 <I2C_ITError+0x18>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003872:	2300      	movs	r3, #0
 8003874:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003876:	2328      	movs	r3, #40	@ 0x28
 8003878:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
 800387c:	e7cf      	b.n	800381e <I2C_ITError+0x3e>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800387e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003880:	4a33      	ldr	r2, [pc, #204]	@ (8003950 <I2C_ITError+0x170>)
 8003882:	635a      	str	r2, [r3, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003884:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003886:	f7fe f9a9 	bl	8001bdc <HAL_DMA_Abort_IT>
 800388a:	b340      	cbz	r0, 80038de <I2C_ITError+0xfe>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003894:	d005      	beq.n	80038a2 <I2C_ITError+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800389a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800389c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800389e:	3301      	adds	r3, #1
 80038a0:	6263      	str	r3, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 80038a2:	6822      	ldr	r2, [r4, #0]
 80038a4:	6813      	ldr	r3, [r2, #0]
 80038a6:	f023 0301 	bic.w	r3, r3, #1
 80038aa:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	2320      	movs	r3, #32
 80038ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038b2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80038b4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80038b6:	4798      	blx	r3
 80038b8:	e011      	b.n	80038de <I2C_ITError+0xfe>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80038ba:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	2a60      	cmp	r2, #96	@ 0x60
 80038c2:	d01f      	beq.n	8003904 <I2C_ITError+0x124>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80038c4:	695a      	ldr	r2, [r3, #20]
 80038c6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80038ca:	d005      	beq.n	80038d8 <I2C_ITError+0xf8>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80038d0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80038d2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80038d4:	3301      	adds	r3, #1
 80038d6:	6263      	str	r3, [r4, #36]	@ 0x24
    HAL_I2C_ErrorCallback(hi2c);
 80038d8:	4620      	mov	r0, r4
 80038da:	f7ff fe8a 	bl	80035f2 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 80038de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80038e0:	f013 0f0f 	tst.w	r3, #15
 80038e4:	d004      	beq.n	80038f0 <I2C_ITError+0x110>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038e6:	6822      	ldr	r2, [r4, #0]
 80038e8:	6853      	ldr	r3, [r2, #4]
 80038ea:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80038ee:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 80038f0:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80038f4:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80038f6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80038f8:	f012 0f04 	tst.w	r2, #4
 80038fc:	d001      	beq.n	8003902 <I2C_ITError+0x122>
 80038fe:	2b28      	cmp	r3, #40	@ 0x28
 8003900:	d018      	beq.n	8003934 <I2C_ITError+0x154>
}
 8003902:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8003904:	2220      	movs	r2, #32
 8003906:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800390a:	2200      	movs	r2, #0
 800390c:	6422      	str	r2, [r4, #64]	@ 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003914:	d005      	beq.n	8003922 <I2C_ITError+0x142>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800391a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800391c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800391e:	3301      	adds	r3, #1
 8003920:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003922:	6822      	ldr	r2, [r4, #0]
 8003924:	6813      	ldr	r3, [r2, #0]
 8003926:	f023 0301 	bic.w	r3, r3, #1
 800392a:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800392c:	4620      	mov	r0, r4
 800392e:	f7ff fee4 	bl	80036fa <HAL_I2C_AbortCpltCallback>
 8003932:	e7d4      	b.n	80038de <I2C_ITError+0xfe>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003934:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <I2C_ITError+0x174>)
 8003936:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003938:	2300      	movs	r3, #0
 800393a:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800393c:	2220      	movs	r2, #32
 800393e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003942:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003946:	4620      	mov	r0, r4
 8003948:	f7ff fc44 	bl	80031d4 <HAL_I2C_ListenCpltCallback>
}
 800394c:	e7d9      	b.n	8003902 <I2C_ITError+0x122>
 800394e:	bf00      	nop
 8003950:	080036fd 	.word	0x080036fd
 8003954:	ffff0000 	.word	0xffff0000

08003958 <I2C_Slave_STOPF>:
{
 8003958:	b530      	push	{r4, r5, lr}
 800395a:	b083      	sub	sp, #12
 800395c:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800395e:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 8003962:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003964:	6802      	ldr	r2, [r0, #0]
 8003966:	6853      	ldr	r3, [r2, #4]
 8003968:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800396c:	6053      	str	r3, [r2, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800396e:	2300      	movs	r3, #0
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	6803      	ldr	r3, [r0, #0]
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	9201      	str	r2, [sp, #4]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	9b01      	ldr	r3, [sp, #4]
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003982:	6802      	ldr	r2, [r0, #0]
 8003984:	6813      	ldr	r3, [r2, #0]
 8003986:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800398a:	6013      	str	r3, [r2, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800398c:	6803      	ldr	r3, [r0, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8003994:	d038      	beq.n	8003a08 <I2C_Slave_STOPF+0xb0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003996:	2d22      	cmp	r5, #34	@ 0x22
 8003998:	d021      	beq.n	80039de <I2C_Slave_STOPF+0x86>
 800399a:	2d2a      	cmp	r5, #42	@ 0x2a
 800399c:	d01f      	beq.n	80039de <I2C_Slave_STOPF+0x86>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800399e:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	6852      	ldr	r2, [r2, #4]
 80039a4:	b292      	uxth	r2, r2
 80039a6:	8542      	strh	r2, [r0, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 80039a8:	8d42      	ldrh	r2, [r0, #42]	@ 0x2a
 80039aa:	b292      	uxth	r2, r2
 80039ac:	b11a      	cbz	r2, 80039b6 <I2C_Slave_STOPF+0x5e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039ae:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80039b0:	f042 0204 	orr.w	r2, r2, #4
 80039b4:	6402      	str	r2, [r0, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039bc:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039be:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80039c0:	f7fe f958 	bl	8001c74 <HAL_DMA_GetState>
 80039c4:	2801      	cmp	r0, #1
 80039c6:	d01f      	beq.n	8003a08 <I2C_Slave_STOPF+0xb0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80039c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80039ca:	4a44      	ldr	r2, [pc, #272]	@ (8003adc <I2C_Slave_STOPF+0x184>)
 80039cc:	635a      	str	r2, [r3, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80039ce:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80039d0:	f7fe f904 	bl	8001bdc <HAL_DMA_Abort_IT>
 80039d4:	b1c0      	cbz	r0, 8003a08 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80039d6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80039d8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80039da:	4798      	blx	r3
 80039dc:	e014      	b.n	8003a08 <I2C_Slave_STOPF+0xb0>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80039de:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80039e0:	6812      	ldr	r2, [r2, #0]
 80039e2:	6852      	ldr	r2, [r2, #4]
 80039e4:	b292      	uxth	r2, r2
 80039e6:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 80039e8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80039ea:	b292      	uxth	r2, r2
 80039ec:	b11a      	cbz	r2, 80039f6 <I2C_Slave_STOPF+0x9e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039ee:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80039f0:	f042 0204 	orr.w	r2, r2, #4
 80039f4:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039fc:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039fe:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003a00:	f7fe f938 	bl	8001c74 <HAL_DMA_GetState>
 8003a04:	2801      	cmp	r0, #1
 8003a06:	d142      	bne.n	8003a8e <I2C_Slave_STOPF+0x136>
  if (hi2c->XferCount != 0U)
 8003a08:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	b333      	cbz	r3, 8003a5c <I2C_Slave_STOPF+0x104>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a0e:	6823      	ldr	r3, [r4, #0]
 8003a10:	695a      	ldr	r2, [r3, #20]
 8003a12:	f012 0f04 	tst.w	r2, #4
 8003a16:	d00a      	beq.n	8003a2e <I2C_Slave_STOPF+0xd6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a18:	691a      	ldr	r2, [r3, #16]
 8003a1a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a1c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003a1e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a20:	3301      	adds	r3, #1
 8003a22:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003a24:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	695a      	ldr	r2, [r3, #20]
 8003a32:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003a36:	d00a      	beq.n	8003a4e <I2C_Slave_STOPF+0xf6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a3c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003a3e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003a40:	3301      	adds	r3, #1
 8003a42:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003a44:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8003a4e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	b11b      	cbz	r3, 8003a5c <I2C_Slave_STOPF+0x104>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a56:	f043 0304 	orr.w	r3, r3, #4
 8003a5a:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a5e:	bb13      	cbnz	r3, 8003aa6 <I2C_Slave_STOPF+0x14e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a60:	2d2a      	cmp	r5, #42	@ 0x2a
 8003a62:	d025      	beq.n	8003ab0 <I2C_Slave_STOPF+0x158>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a64:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b28      	cmp	r3, #40	@ 0x28
 8003a6c:	d029      	beq.n	8003ac2 <I2C_Slave_STOPF+0x16a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003a6e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003a70:	2b22      	cmp	r3, #34	@ 0x22
 8003a72:	d001      	beq.n	8003a78 <I2C_Slave_STOPF+0x120>
 8003a74:	2d22      	cmp	r5, #34	@ 0x22
 8003a76:	d119      	bne.n	8003aac <I2C_Slave_STOPF+0x154>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a82:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a86:	4620      	mov	r0, r4
 8003a88:	f7ff fb4f 	bl	800312a <HAL_I2C_SlaveRxCpltCallback>
}
 8003a8c:	e00e      	b.n	8003aac <I2C_Slave_STOPF+0x154>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a8e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003a90:	4a12      	ldr	r2, [pc, #72]	@ (8003adc <I2C_Slave_STOPF+0x184>)
 8003a92:	635a      	str	r2, [r3, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a94:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003a96:	f7fe f8a1 	bl	8001bdc <HAL_DMA_Abort_IT>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	d0b4      	beq.n	8003a08 <I2C_Slave_STOPF+0xb0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a9e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003aa0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003aa2:	4798      	blx	r3
 8003aa4:	e7b0      	b.n	8003a08 <I2C_Slave_STOPF+0xb0>
    I2C_ITError(hi2c);
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	f7ff fe9a 	bl	80037e0 <I2C_ITError>
}
 8003aac:	b003      	add	sp, #12
 8003aae:	bd30      	pop	{r4, r5, pc}
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003ab4:	2328      	movs	r3, #40	@ 0x28
 8003ab6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003aba:	4620      	mov	r0, r4
 8003abc:	f7ff fb35 	bl	800312a <HAL_I2C_SlaveRxCpltCallback>
 8003ac0:	e7d0      	b.n	8003a64 <I2C_Slave_STOPF+0x10c>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ac2:	4b07      	ldr	r3, [pc, #28]	@ (8003ae0 <I2C_Slave_STOPF+0x188>)
 8003ac4:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	2220      	movs	r2, #32
 8003acc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f7ff fb7d 	bl	80031d4 <HAL_I2C_ListenCpltCallback>
 8003ada:	e7e7      	b.n	8003aac <I2C_Slave_STOPF+0x154>
 8003adc:	080036fd 	.word	0x080036fd
 8003ae0:	ffff0000 	.word	0xffff0000

08003ae4 <HAL_I2C_EV_IRQHandler>:
{
 8003ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae6:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003ae8:	6802      	ldr	r2, [r0, #0]
 8003aea:	6855      	ldr	r5, [r2, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003aec:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003aee:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8003af2:	b2db      	uxtb	r3, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003af4:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
 8003af8:	b2c8      	uxtb	r0, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003afa:	2b10      	cmp	r3, #16
 8003afc:	d013      	beq.n	8003b26 <HAL_I2C_EV_IRQHandler+0x42>
 8003afe:	2b40      	cmp	r3, #64	@ 0x40
 8003b00:	d011      	beq.n	8003b26 <HAL_I2C_EV_IRQHandler+0x42>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d07a      	beq.n	8003bfe <HAL_I2C_EV_IRQHandler+0x11a>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b08:	6953      	ldr	r3, [r2, #20]
  uint32_t sr2itflags               = 0U;
 8003b0a:	2100      	movs	r1, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b0c:	f013 0f02 	tst.w	r3, #2
 8003b10:	d078      	beq.n	8003c04 <HAL_I2C_EV_IRQHandler+0x120>
 8003b12:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003b16:	d075      	beq.n	8003c04 <HAL_I2C_EV_IRQHandler+0x120>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003b1a:	b103      	cbz	r3, 8003b1e <HAL_I2C_EV_IRQHandler+0x3a>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b1c:	6991      	ldr	r1, [r2, #24]
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f7ff fb2b 	bl	800317a <I2C_Slave_ADDR>
}
 8003b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b26:	f8d2 c018 	ldr.w	ip, [r2, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b2a:	6951      	ldr	r1, [r2, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003b2c:	f011 0701 	ands.w	r7, r1, #1
 8003b30:	d105      	bne.n	8003b3e <HAL_I2C_EV_IRQHandler+0x5a>
 8003b32:	f5b6 0f2a 	cmp.w	r6, #11141120	@ 0xaa0000
 8003b36:	d0f5      	beq.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
 8003b38:	f1b6 4f2a 	cmp.w	r6, #2852126720	@ 0xaa000000
 8003b3c:	d0f2      	beq.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b3e:	b117      	cbz	r7, 8003b46 <HAL_I2C_EV_IRQHandler+0x62>
 8003b40:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003b44:	d129      	bne.n	8003b9a <HAL_I2C_EV_IRQHandler+0xb6>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b46:	f011 0f08 	tst.w	r1, #8
 8003b4a:	d002      	beq.n	8003b52 <HAL_I2C_EV_IRQHandler+0x6e>
 8003b4c:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003b50:	d12a      	bne.n	8003ba8 <HAL_I2C_EV_IRQHandler+0xc4>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b52:	f011 0f02 	tst.w	r1, #2
 8003b56:	d002      	beq.n	8003b5e <HAL_I2C_EV_IRQHandler+0x7a>
 8003b58:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003b5c:	d128      	bne.n	8003bb0 <HAL_I2C_EV_IRQHandler+0xcc>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003b5e:	f01c 0f04 	tst.w	ip, #4
 8003b62:	d031      	beq.n	8003bc8 <HAL_I2C_EV_IRQHandler+0xe4>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003b64:	6852      	ldr	r2, [r2, #4]
 8003b66:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8003b6a:	d1db      	bne.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b6c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003b70:	d005      	beq.n	8003b7e <HAL_I2C_EV_IRQHandler+0x9a>
 8003b72:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8003b76:	d002      	beq.n	8003b7e <HAL_I2C_EV_IRQHandler+0x9a>
 8003b78:	f011 0f04 	tst.w	r1, #4
 8003b7c:	d01c      	beq.n	8003bb8 <HAL_I2C_EV_IRQHandler+0xd4>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b7e:	f011 0f04 	tst.w	r1, #4
 8003b82:	d0cf      	beq.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
 8003b84:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003b88:	d0cc      	beq.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b8a:	2821      	cmp	r0, #33	@ 0x21
 8003b8c:	d018      	beq.n	8003bc0 <HAL_I2C_EV_IRQHandler+0xdc>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003b8e:	2b40      	cmp	r3, #64	@ 0x40
 8003b90:	d1c8      	bne.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b92:	4620      	mov	r0, r4
 8003b94:	f7ff fbc0 	bl	8003318 <I2C_MemoryTransmit_TXE_BTF>
 8003b98:	e7c4      	b.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_ConvertOtherXferOptions(hi2c);
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	f7fe fbf9 	bl	8002392 <I2C_ConvertOtherXferOptions>
      I2C_Master_SB(hi2c);
 8003ba0:	4620      	mov	r0, r4
 8003ba2:	f7fe fa0c 	bl	8001fbe <I2C_Master_SB>
 8003ba6:	e7bd      	b.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADD10(hi2c);
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f7fe fa5c 	bl	8002066 <I2C_Master_ADD10>
 8003bae:	e7b9      	b.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Master_ADDR(hi2c);
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	f7fe fa6d 	bl	8002090 <I2C_Master_ADDR>
 8003bb6:	e7b5      	b.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterTransmit_TXE(hi2c);
 8003bb8:	4620      	mov	r0, r4
 8003bba:	f7ff fc0f 	bl	80033dc <I2C_MasterTransmit_TXE>
 8003bbe:	e7b1      	b.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
            I2C_MasterTransmit_BTF(hi2c);
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f7ff fb5a 	bl	800327a <I2C_MasterTransmit_BTF>
 8003bc6:	e7ad      	b.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003bc8:	6853      	ldr	r3, [r2, #4]
 8003bca:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8003bce:	d1a9      	bne.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bd0:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8003bd4:	d005      	beq.n	8003be2 <HAL_I2C_EV_IRQHandler+0xfe>
 8003bd6:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8003bda:	d002      	beq.n	8003be2 <HAL_I2C_EV_IRQHandler+0xfe>
 8003bdc:	f011 0f04 	tst.w	r1, #4
 8003be0:	d009      	beq.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x112>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003be2:	f011 0f04 	tst.w	r1, #4
 8003be6:	d09d      	beq.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
 8003be8:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003bec:	d09a      	beq.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_BTF(hi2c);
 8003bee:	4620      	mov	r0, r4
 8003bf0:	f7ff fc5f 	bl	80034b2 <I2C_MasterReceive_BTF>
 8003bf4:	e796      	b.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
          I2C_MasterReceive_RXNE(hi2c);
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f7ff fcfc 	bl	80035f4 <I2C_MasterReceive_RXNE>
 8003bfc:	e792      	b.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003bfe:	6991      	ldr	r1, [r2, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c00:	6953      	ldr	r3, [r2, #20]
 8003c02:	e783      	b.n	8003b0c <HAL_I2C_EV_IRQHandler+0x28>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c04:	f013 0f10 	tst.w	r3, #16
 8003c08:	d002      	beq.n	8003c10 <HAL_I2C_EV_IRQHandler+0x12c>
 8003c0a:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003c0e:	d118      	bne.n	8003c42 <HAL_I2C_EV_IRQHandler+0x15e>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c10:	2821      	cmp	r0, #33	@ 0x21
 8003c12:	d01a      	beq.n	8003c4a <HAL_I2C_EV_IRQHandler+0x166>
 8003c14:	2829      	cmp	r0, #41	@ 0x29
 8003c16:	d018      	beq.n	8003c4a <HAL_I2C_EV_IRQHandler+0x166>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c18:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003c1c:	d005      	beq.n	8003c2a <HAL_I2C_EV_IRQHandler+0x146>
 8003c1e:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8003c22:	d002      	beq.n	8003c2a <HAL_I2C_EV_IRQHandler+0x146>
 8003c24:	f013 0f04 	tst.w	r3, #4
 8003c28:	d028      	beq.n	8003c7c <HAL_I2C_EV_IRQHandler+0x198>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c2a:	f013 0f04 	tst.w	r3, #4
 8003c2e:	f43f af79 	beq.w	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
 8003c32:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003c36:	f43f af75 	beq.w	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_BTF(hi2c);
 8003c3a:	4620      	mov	r0, r4
 8003c3c:	f7fe fb5c 	bl	80022f8 <I2C_SlaveReceive_BTF>
      }
 8003c40:	e770      	b.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
      I2C_Slave_STOPF(hi2c);
 8003c42:	4620      	mov	r0, r4
 8003c44:	f7ff fe88 	bl	8003958 <I2C_Slave_STOPF>
 8003c48:	e76c      	b.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c4a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003c4e:	d005      	beq.n	8003c5c <HAL_I2C_EV_IRQHandler+0x178>
 8003c50:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8003c54:	d002      	beq.n	8003c5c <HAL_I2C_EV_IRQHandler+0x178>
 8003c56:	f013 0f04 	tst.w	r3, #4
 8003c5a:	d00b      	beq.n	8003c74 <HAL_I2C_EV_IRQHandler+0x190>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c5c:	f013 0f04 	tst.w	r3, #4
 8003c60:	f43f af60 	beq.w	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
 8003c64:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003c68:	f43f af5c 	beq.w	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_BTF(hi2c);
 8003c6c:	4620      	mov	r0, r4
 8003c6e:	f7fe fb33 	bl	80022d8 <I2C_SlaveTransmit_BTF>
 8003c72:	e757      	b.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveTransmit_TXE(hi2c);
 8003c74:	4620      	mov	r0, r4
 8003c76:	f7ff fa32 	bl	80030de <I2C_SlaveTransmit_TXE>
 8003c7a:	e753      	b.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>
        I2C_SlaveReceive_RXNE(hi2c);
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f7ff fa55 	bl	800312c <I2C_SlaveReceive_RXNE>
 8003c82:	e74f      	b.n	8003b24 <HAL_I2C_EV_IRQHandler+0x40>

08003c84 <HAL_I2C_ER_IRQHandler>:
{
 8003c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c86:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003c88:	6803      	ldr	r3, [r0, #0]
 8003c8a:	695d      	ldr	r5, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003c8c:	685f      	ldr	r7, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c8e:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
 8003c92:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c94:	f415 7680 	ands.w	r6, r5, #256	@ 0x100
 8003c98:	d00b      	beq.n	8003cb2 <HAL_I2C_ER_IRQHandler+0x2e>
 8003c9a:	f417 7680 	ands.w	r6, r7, #256	@ 0x100
 8003c9e:	d008      	beq.n	8003cb2 <HAL_I2C_ER_IRQHandler+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ca0:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 8003ca4:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8003ca6:	6801      	ldr	r1, [r0, #0]
 8003ca8:	680b      	ldr	r3, [r1, #0]
 8003caa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cae:	600b      	str	r3, [r1, #0]
    error |= HAL_I2C_ERROR_BERR;
 8003cb0:	2601      	movs	r6, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cb2:	f415 7f00 	tst.w	r5, #512	@ 0x200
 8003cb6:	d008      	beq.n	8003cca <HAL_I2C_ER_IRQHandler+0x46>
 8003cb8:	f417 7f80 	tst.w	r7, #256	@ 0x100
 8003cbc:	d005      	beq.n	8003cca <HAL_I2C_ER_IRQHandler+0x46>
    error |= HAL_I2C_ERROR_ARLO;
 8003cbe:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003cc2:	6823      	ldr	r3, [r4, #0]
 8003cc4:	f46f 7100 	mvn.w	r1, #512	@ 0x200
 8003cc8:	6159      	str	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003cca:	f415 6f80 	tst.w	r5, #1024	@ 0x400
 8003cce:	d019      	beq.n	8003d04 <HAL_I2C_ER_IRQHandler+0x80>
 8003cd0:	f417 7f80 	tst.w	r7, #256	@ 0x100
 8003cd4:	d016      	beq.n	8003d04 <HAL_I2C_ER_IRQHandler+0x80>
    tmp2 = hi2c->XferCount;
 8003cd6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003cd8:	b299      	uxth	r1, r3
    tmp3 = hi2c->State;
 8003cda:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003cde:	b2db      	uxtb	r3, r3
    tmp4 = hi2c->PreviousState;
 8003ce0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003ce2:	2a20      	cmp	r2, #32
 8003ce4:	d01b      	beq.n	8003d1e <HAL_I2C_ER_IRQHandler+0x9a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
 8003cec:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8003cee:	f046 0604 	orr.w	r6, r6, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003cf2:	2a10      	cmp	r2, #16
 8003cf4:	d001      	beq.n	8003cfa <HAL_I2C_ER_IRQHandler+0x76>
 8003cf6:	2a40      	cmp	r2, #64	@ 0x40
 8003cf8:	d104      	bne.n	8003d04 <HAL_I2C_ER_IRQHandler+0x80>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfa:	6822      	ldr	r2, [r4, #0]
 8003cfc:	6813      	ldr	r3, [r2, #0]
 8003cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d02:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d04:	f415 6f00 	tst.w	r5, #2048	@ 0x800
 8003d08:	d017      	beq.n	8003d3a <HAL_I2C_ER_IRQHandler+0xb6>
 8003d0a:	f417 7f80 	tst.w	r7, #256	@ 0x100
 8003d0e:	d014      	beq.n	8003d3a <HAL_I2C_ER_IRQHandler+0xb6>
    error |= HAL_I2C_ERROR_OVR;
 8003d10:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d14:	6823      	ldr	r3, [r4, #0]
 8003d16:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003d1a:	615a      	str	r2, [r3, #20]
  if (error != HAL_I2C_ERROR_NONE)
 8003d1c:	e00e      	b.n	8003d3c <HAL_I2C_ER_IRQHandler+0xb8>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003d1e:	2900      	cmp	r1, #0
 8003d20:	d1e1      	bne.n	8003ce6 <HAL_I2C_ER_IRQHandler+0x62>
 8003d22:	2b21      	cmp	r3, #33	@ 0x21
 8003d24:	d005      	beq.n	8003d32 <HAL_I2C_ER_IRQHandler+0xae>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003d26:	2b29      	cmp	r3, #41	@ 0x29
 8003d28:	d003      	beq.n	8003d32 <HAL_I2C_ER_IRQHandler+0xae>
 8003d2a:	2b28      	cmp	r3, #40	@ 0x28
 8003d2c:	d1db      	bne.n	8003ce6 <HAL_I2C_ER_IRQHandler+0x62>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003d2e:	2821      	cmp	r0, #33	@ 0x21
 8003d30:	d1d9      	bne.n	8003ce6 <HAL_I2C_ER_IRQHandler+0x62>
      I2C_Slave_AF(hi2c);
 8003d32:	4620      	mov	r0, r4
 8003d34:	f7ff fa50 	bl	80031d8 <I2C_Slave_AF>
 8003d38:	e7e4      	b.n	8003d04 <HAL_I2C_ER_IRQHandler+0x80>
  if (error != HAL_I2C_ERROR_NONE)
 8003d3a:	b12e      	cbz	r6, 8003d48 <HAL_I2C_ER_IRQHandler+0xc4>
    hi2c->ErrorCode |= error;
 8003d3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d3e:	4333      	orrs	r3, r6
 8003d40:	6423      	str	r3, [r4, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003d42:	4620      	mov	r0, r4
 8003d44:	f7ff fd4c 	bl	80037e0 <I2C_ITError>
}
 8003d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d4c:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d4e:	4b08      	ldr	r3, [pc, #32]	@ (8003d70 <RCC_Delay+0x24>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a08      	ldr	r2, [pc, #32]	@ (8003d74 <RCC_Delay+0x28>)
 8003d54:	fba2 2303 	umull	r2, r3, r2, r3
 8003d58:	0a5b      	lsrs	r3, r3, #9
 8003d5a:	fb00 f303 	mul.w	r3, r0, r3
 8003d5e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003d60:	bf00      	nop
  }
  while (Delay --);
 8003d62:	9b01      	ldr	r3, [sp, #4]
 8003d64:	1e5a      	subs	r2, r3, #1
 8003d66:	9201      	str	r2, [sp, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f9      	bne.n	8003d60 <RCC_Delay+0x14>
}
 8003d6c:	b002      	add	sp, #8
 8003d6e:	4770      	bx	lr
 8003d70:	20000008 	.word	0x20000008
 8003d74:	10624dd3 	.word	0x10624dd3

08003d78 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003d78:	2800      	cmp	r0, #0
 8003d7a:	f000 81f1 	beq.w	8004160 <HAL_RCC_OscConfig+0x3e8>
{
 8003d7e:	b570      	push	{r4, r5, r6, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d84:	6803      	ldr	r3, [r0, #0]
 8003d86:	f013 0f01 	tst.w	r3, #1
 8003d8a:	d02c      	beq.n	8003de6 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d8c:	4b99      	ldr	r3, [pc, #612]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 030c 	and.w	r3, r3, #12
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d01d      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x5c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d98:	4b96      	ldr	r3, [pc, #600]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 030c 	and.w	r3, r3, #12
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d012      	beq.n	8003dca <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da4:	6863      	ldr	r3, [r4, #4]
 8003da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003daa:	d041      	beq.n	8003e30 <HAL_RCC_OscConfig+0xb8>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d155      	bne.n	8003e5c <HAL_RCC_OscConfig+0xe4>
 8003db0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003db4:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	e037      	b.n	8003e3a <HAL_RCC_OscConfig+0xc2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003dca:	4b8a      	ldr	r3, [pc, #552]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003dd2:	d0e7      	beq.n	8003da4 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd4:	4b87      	ldr	r3, [pc, #540]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003ddc:	d003      	beq.n	8003de6 <HAL_RCC_OscConfig+0x6e>
 8003dde:	6863      	ldr	r3, [r4, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 81bf 	beq.w	8004164 <HAL_RCC_OscConfig+0x3ec>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	f013 0f02 	tst.w	r3, #2
 8003dec:	d075      	beq.n	8003eda <HAL_RCC_OscConfig+0x162>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dee:	4b81      	ldr	r3, [pc, #516]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f013 0f0c 	tst.w	r3, #12
 8003df6:	d05f      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x140>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003df8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 030c 	and.w	r3, r3, #12
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d054      	beq.n	8003eae <HAL_RCC_OscConfig+0x136>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e04:	6923      	ldr	r3, [r4, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 808a 	beq.w	8003f20 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_ENABLE();
 8003e0c:	4b7a      	ldr	r3, [pc, #488]	@ (8003ff8 <HAL_RCC_OscConfig+0x280>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e12:	f7fd fe2b 	bl	8001a6c <HAL_GetTick>
 8003e16:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e18:	4b76      	ldr	r3, [pc, #472]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f013 0f02 	tst.w	r3, #2
 8003e20:	d175      	bne.n	8003f0e <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e22:	f7fd fe23 	bl	8001a6c <HAL_GetTick>
 8003e26:	1b40      	subs	r0, r0, r5
 8003e28:	2802      	cmp	r0, #2
 8003e2a:	d9f5      	bls.n	8003e18 <HAL_RCC_OscConfig+0xa0>
            return HAL_TIMEOUT;
 8003e2c:	2003      	movs	r0, #3
 8003e2e:	e19e      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e30:	4a70      	ldr	r2, [pc, #448]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003e32:	6813      	ldr	r3, [r2, #0]
 8003e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e38:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e3a:	6863      	ldr	r3, [r4, #4]
 8003e3c:	b343      	cbz	r3, 8003e90 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8003e3e:	f7fd fe15 	bl	8001a6c <HAL_GetTick>
 8003e42:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e44:	4b6b      	ldr	r3, [pc, #428]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003e4c:	d1cb      	bne.n	8003de6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e4e:	f7fd fe0d 	bl	8001a6c <HAL_GetTick>
 8003e52:	1b40      	subs	r0, r0, r5
 8003e54:	2864      	cmp	r0, #100	@ 0x64
 8003e56:	d9f5      	bls.n	8003e44 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8003e58:	2003      	movs	r0, #3
 8003e5a:	e188      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e60:	d009      	beq.n	8003e76 <HAL_RCC_OscConfig+0xfe>
 8003e62:	4b64      	ldr	r3, [pc, #400]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	e7e1      	b.n	8003e3a <HAL_RCC_OscConfig+0xc2>
 8003e76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e7a:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e7d4      	b.n	8003e3a <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8003e90:	f7fd fdec 	bl	8001a6c <HAL_GetTick>
 8003e94:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	4b57      	ldr	r3, [pc, #348]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003e9e:	d0a2      	beq.n	8003de6 <HAL_RCC_OscConfig+0x6e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea0:	f7fd fde4 	bl	8001a6c <HAL_GetTick>
 8003ea4:	1b40      	subs	r0, r0, r5
 8003ea6:	2864      	cmp	r0, #100	@ 0x64
 8003ea8:	d9f5      	bls.n	8003e96 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8003eaa:	2003      	movs	r0, #3
 8003eac:	e15f      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003eae:	4b51      	ldr	r3, [pc, #324]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8003eb6:	d1a5      	bne.n	8003e04 <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eb8:	4b4e      	ldr	r3, [pc, #312]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f013 0f02 	tst.w	r3, #2
 8003ec0:	d003      	beq.n	8003eca <HAL_RCC_OscConfig+0x152>
 8003ec2:	6923      	ldr	r3, [r4, #16]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	f040 814f 	bne.w	8004168 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eca:	4a4a      	ldr	r2, [pc, #296]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003ecc:	6813      	ldr	r3, [r2, #0]
 8003ece:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003ed2:	6961      	ldr	r1, [r4, #20]
 8003ed4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ed8:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	f013 0f08 	tst.w	r3, #8
 8003ee0:	d033      	beq.n	8003f4a <HAL_RCC_OscConfig+0x1d2>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ee2:	69a3      	ldr	r3, [r4, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d05c      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x22a>
      __HAL_RCC_LSI_ENABLE();
 8003ee8:	4b43      	ldr	r3, [pc, #268]	@ (8003ff8 <HAL_RCC_OscConfig+0x280>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8003ef0:	f7fd fdbc 	bl	8001a6c <HAL_GetTick>
 8003ef4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	f013 0f02 	tst.w	r3, #2
 8003efe:	d121      	bne.n	8003f44 <HAL_RCC_OscConfig+0x1cc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f00:	f7fd fdb4 	bl	8001a6c <HAL_GetTick>
 8003f04:	1b40      	subs	r0, r0, r5
 8003f06:	2802      	cmp	r0, #2
 8003f08:	d9f5      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x17e>
          return HAL_TIMEOUT;
 8003f0a:	2003      	movs	r0, #3
 8003f0c:	e12f      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0e:	4a39      	ldr	r2, [pc, #228]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003f10:	6813      	ldr	r3, [r2, #0]
 8003f12:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003f16:	6961      	ldr	r1, [r4, #20]
 8003f18:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e7dc      	b.n	8003eda <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8003f20:	4b35      	ldr	r3, [pc, #212]	@ (8003ff8 <HAL_RCC_OscConfig+0x280>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003f26:	f7fd fda1 	bl	8001a6c <HAL_GetTick>
 8003f2a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2c:	4b31      	ldr	r3, [pc, #196]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f013 0f02 	tst.w	r3, #2
 8003f34:	d0d1      	beq.n	8003eda <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f36:	f7fd fd99 	bl	8001a6c <HAL_GetTick>
 8003f3a:	1b40      	subs	r0, r0, r5
 8003f3c:	2802      	cmp	r0, #2
 8003f3e:	d9f5      	bls.n	8003f2c <HAL_RCC_OscConfig+0x1b4>
            return HAL_TIMEOUT;
 8003f40:	2003      	movs	r0, #3
 8003f42:	e114      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
      RCC_Delay(1);
 8003f44:	2001      	movs	r0, #1
 8003f46:	f7ff ff01 	bl	8003d4c <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	f013 0f04 	tst.w	r3, #4
 8003f50:	f000 8096 	beq.w	8004080 <HAL_RCC_OscConfig+0x308>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f54:	4b27      	ldr	r3, [pc, #156]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003f56:	69db      	ldr	r3, [r3, #28]
 8003f58:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003f5c:	d134      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x250>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f5e:	4b25      	ldr	r3, [pc, #148]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003f60:	69da      	ldr	r2, [r3, #28]
 8003f62:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003f66:	61da      	str	r2, [r3, #28]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f6e:	9301      	str	r3, [sp, #4]
 8003f70:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003f72:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f74:	4b21      	ldr	r3, [pc, #132]	@ (8003ffc <HAL_RCC_OscConfig+0x284>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003f7c:	d026      	beq.n	8003fcc <HAL_RCC_OscConfig+0x254>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f7e:	68e3      	ldr	r3, [r4, #12]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d03d      	beq.n	8004000 <HAL_RCC_OscConfig+0x288>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d153      	bne.n	8004030 <HAL_RCC_OscConfig+0x2b8>
 8003f88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f8c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8003f90:	6a1a      	ldr	r2, [r3, #32]
 8003f92:	f022 0201 	bic.w	r2, r2, #1
 8003f96:	621a      	str	r2, [r3, #32]
 8003f98:	6a1a      	ldr	r2, [r3, #32]
 8003f9a:	f022 0204 	bic.w	r2, r2, #4
 8003f9e:	621a      	str	r2, [r3, #32]
 8003fa0:	e033      	b.n	800400a <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_DISABLE();
 8003fa2:	4b15      	ldr	r3, [pc, #84]	@ (8003ff8 <HAL_RCC_OscConfig+0x280>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8003faa:	f7fd fd5f 	bl	8001a6c <HAL_GetTick>
 8003fae:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb0:	4b10      	ldr	r3, [pc, #64]	@ (8003ff4 <HAL_RCC_OscConfig+0x27c>)
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	f013 0f02 	tst.w	r3, #2
 8003fb8:	d0c7      	beq.n	8003f4a <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fba:	f7fd fd57 	bl	8001a6c <HAL_GetTick>
 8003fbe:	1b40      	subs	r0, r0, r5
 8003fc0:	2802      	cmp	r0, #2
 8003fc2:	d9f5      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x238>
          return HAL_TIMEOUT;
 8003fc4:	2003      	movs	r0, #3
 8003fc6:	e0d2      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
    FlagStatus       pwrclkchanged = RESET;
 8003fc8:	2500      	movs	r5, #0
 8003fca:	e7d3      	b.n	8003f74 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8003ffc <HAL_RCC_OscConfig+0x284>)
 8003fce:	6813      	ldr	r3, [r2, #0]
 8003fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003fd6:	f7fd fd49 	bl	8001a6c <HAL_GetTick>
 8003fda:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fdc:	4b07      	ldr	r3, [pc, #28]	@ (8003ffc <HAL_RCC_OscConfig+0x284>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003fe4:	d1cb      	bne.n	8003f7e <HAL_RCC_OscConfig+0x206>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fe6:	f7fd fd41 	bl	8001a6c <HAL_GetTick>
 8003fea:	1b80      	subs	r0, r0, r6
 8003fec:	2864      	cmp	r0, #100	@ 0x64
 8003fee:	d9f5      	bls.n	8003fdc <HAL_RCC_OscConfig+0x264>
          return HAL_TIMEOUT;
 8003ff0:	2003      	movs	r0, #3
 8003ff2:	e0bc      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	42420000 	.word	0x42420000
 8003ffc:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004000:	4a5f      	ldr	r2, [pc, #380]	@ (8004180 <HAL_RCC_OscConfig+0x408>)
 8004002:	6a13      	ldr	r3, [r2, #32]
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800400a:	68e3      	ldr	r3, [r4, #12]
 800400c:	b333      	cbz	r3, 800405c <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 800400e:	f7fd fd2d 	bl	8001a6c <HAL_GetTick>
 8004012:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004014:	4b5a      	ldr	r3, [pc, #360]	@ (8004180 <HAL_RCC_OscConfig+0x408>)
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f013 0f02 	tst.w	r3, #2
 800401c:	d12f      	bne.n	800407e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401e:	f7fd fd25 	bl	8001a6c <HAL_GetTick>
 8004022:	1b80      	subs	r0, r0, r6
 8004024:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004028:	4298      	cmp	r0, r3
 800402a:	d9f3      	bls.n	8004014 <HAL_RCC_OscConfig+0x29c>
          return HAL_TIMEOUT;
 800402c:	2003      	movs	r0, #3
 800402e:	e09e      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004030:	2b05      	cmp	r3, #5
 8004032:	d009      	beq.n	8004048 <HAL_RCC_OscConfig+0x2d0>
 8004034:	4b52      	ldr	r3, [pc, #328]	@ (8004180 <HAL_RCC_OscConfig+0x408>)
 8004036:	6a1a      	ldr	r2, [r3, #32]
 8004038:	f022 0201 	bic.w	r2, r2, #1
 800403c:	621a      	str	r2, [r3, #32]
 800403e:	6a1a      	ldr	r2, [r3, #32]
 8004040:	f022 0204 	bic.w	r2, r2, #4
 8004044:	621a      	str	r2, [r3, #32]
 8004046:	e7e0      	b.n	800400a <HAL_RCC_OscConfig+0x292>
 8004048:	4b4d      	ldr	r3, [pc, #308]	@ (8004180 <HAL_RCC_OscConfig+0x408>)
 800404a:	6a1a      	ldr	r2, [r3, #32]
 800404c:	f042 0204 	orr.w	r2, r2, #4
 8004050:	621a      	str	r2, [r3, #32]
 8004052:	6a1a      	ldr	r2, [r3, #32]
 8004054:	f042 0201 	orr.w	r2, r2, #1
 8004058:	621a      	str	r2, [r3, #32]
 800405a:	e7d6      	b.n	800400a <HAL_RCC_OscConfig+0x292>
      tickstart = HAL_GetTick();
 800405c:	f7fd fd06 	bl	8001a6c <HAL_GetTick>
 8004060:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004062:	4b47      	ldr	r3, [pc, #284]	@ (8004180 <HAL_RCC_OscConfig+0x408>)
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f013 0f02 	tst.w	r3, #2
 800406a:	d008      	beq.n	800407e <HAL_RCC_OscConfig+0x306>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406c:	f7fd fcfe 	bl	8001a6c <HAL_GetTick>
 8004070:	1b80      	subs	r0, r0, r6
 8004072:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004076:	4298      	cmp	r0, r3
 8004078:	d9f3      	bls.n	8004062 <HAL_RCC_OscConfig+0x2ea>
          return HAL_TIMEOUT;
 800407a:	2003      	movs	r0, #3
 800407c:	e077      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
    if (pwrclkchanged == SET)
 800407e:	b9e5      	cbnz	r5, 80040ba <HAL_RCC_OscConfig+0x342>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004080:	69e3      	ldr	r3, [r4, #28]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d072      	beq.n	800416c <HAL_RCC_OscConfig+0x3f4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004086:	4a3e      	ldr	r2, [pc, #248]	@ (8004180 <HAL_RCC_OscConfig+0x408>)
 8004088:	6852      	ldr	r2, [r2, #4]
 800408a:	f002 020c 	and.w	r2, r2, #12
 800408e:	2a08      	cmp	r2, #8
 8004090:	d056      	beq.n	8004140 <HAL_RCC_OscConfig+0x3c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004092:	2b02      	cmp	r3, #2
 8004094:	d017      	beq.n	80040c6 <HAL_RCC_OscConfig+0x34e>
        __HAL_RCC_PLL_DISABLE();
 8004096:	4b3b      	ldr	r3, [pc, #236]	@ (8004184 <HAL_RCC_OscConfig+0x40c>)
 8004098:	2200      	movs	r2, #0
 800409a:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800409c:	f7fd fce6 	bl	8001a6c <HAL_GetTick>
 80040a0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040a2:	4b37      	ldr	r3, [pc, #220]	@ (8004180 <HAL_RCC_OscConfig+0x408>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80040aa:	d047      	beq.n	800413c <HAL_RCC_OscConfig+0x3c4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ac:	f7fd fcde 	bl	8001a6c <HAL_GetTick>
 80040b0:	1b00      	subs	r0, r0, r4
 80040b2:	2802      	cmp	r0, #2
 80040b4:	d9f5      	bls.n	80040a2 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80040b6:	2003      	movs	r0, #3
 80040b8:	e059      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ba:	4a31      	ldr	r2, [pc, #196]	@ (8004180 <HAL_RCC_OscConfig+0x408>)
 80040bc:	69d3      	ldr	r3, [r2, #28]
 80040be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040c2:	61d3      	str	r3, [r2, #28]
 80040c4:	e7dc      	b.n	8004080 <HAL_RCC_OscConfig+0x308>
        __HAL_RCC_PLL_DISABLE();
 80040c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004184 <HAL_RCC_OscConfig+0x40c>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80040cc:	f7fd fcce 	bl	8001a6c <HAL_GetTick>
 80040d0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004180 <HAL_RCC_OscConfig+0x408>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80040da:	d006      	beq.n	80040ea <HAL_RCC_OscConfig+0x372>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fd fcc6 	bl	8001a6c <HAL_GetTick>
 80040e0:	1b40      	subs	r0, r0, r5
 80040e2:	2802      	cmp	r0, #2
 80040e4:	d9f5      	bls.n	80040d2 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 80040e6:	2003      	movs	r0, #3
 80040e8:	e041      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040ea:	6a23      	ldr	r3, [r4, #32]
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f0:	d01a      	beq.n	8004128 <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f2:	4923      	ldr	r1, [pc, #140]	@ (8004180 <HAL_RCC_OscConfig+0x408>)
 80040f4:	684b      	ldr	r3, [r1, #4]
 80040f6:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 80040fa:	6a22      	ldr	r2, [r4, #32]
 80040fc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80040fe:	4302      	orrs	r2, r0
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8004104:	4b1f      	ldr	r3, [pc, #124]	@ (8004184 <HAL_RCC_OscConfig+0x40c>)
 8004106:	2201      	movs	r2, #1
 8004108:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800410a:	f7fd fcaf 	bl	8001a6c <HAL_GetTick>
 800410e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004110:	4b1b      	ldr	r3, [pc, #108]	@ (8004180 <HAL_RCC_OscConfig+0x408>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004118:	d10e      	bne.n	8004138 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411a:	f7fd fca7 	bl	8001a6c <HAL_GetTick>
 800411e:	1b00      	subs	r0, r0, r4
 8004120:	2802      	cmp	r0, #2
 8004122:	d9f5      	bls.n	8004110 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8004124:	2003      	movs	r0, #3
 8004126:	e022      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004128:	4a15      	ldr	r2, [pc, #84]	@ (8004180 <HAL_RCC_OscConfig+0x408>)
 800412a:	6853      	ldr	r3, [r2, #4]
 800412c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004130:	68a1      	ldr	r1, [r4, #8]
 8004132:	430b      	orrs	r3, r1
 8004134:	6053      	str	r3, [r2, #4]
 8004136:	e7dc      	b.n	80040f2 <HAL_RCC_OscConfig+0x37a>
  return HAL_OK;
 8004138:	2000      	movs	r0, #0
 800413a:	e018      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
 800413c:	2000      	movs	r0, #0
 800413e:	e016      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004140:	2b01      	cmp	r3, #1
 8004142:	d016      	beq.n	8004172 <HAL_RCC_OscConfig+0x3fa>
        pll_config = RCC->CFGR;
 8004144:	4b0e      	ldr	r3, [pc, #56]	@ (8004180 <HAL_RCC_OscConfig+0x408>)
 8004146:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004148:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 800414c:	6a22      	ldr	r2, [r4, #32]
 800414e:	4291      	cmp	r1, r2
 8004150:	d111      	bne.n	8004176 <HAL_RCC_OscConfig+0x3fe>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004152:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004156:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004158:	4293      	cmp	r3, r2
 800415a:	d10e      	bne.n	800417a <HAL_RCC_OscConfig+0x402>
  return HAL_OK;
 800415c:	2000      	movs	r0, #0
 800415e:	e006      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
    return HAL_ERROR;
 8004160:	2001      	movs	r0, #1
}
 8004162:	4770      	bx	lr
        return HAL_ERROR;
 8004164:	2001      	movs	r0, #1
 8004166:	e002      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
        return HAL_ERROR;
 8004168:	2001      	movs	r0, #1
 800416a:	e000      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
  return HAL_OK;
 800416c:	2000      	movs	r0, #0
}
 800416e:	b002      	add	sp, #8
 8004170:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8004172:	2001      	movs	r0, #1
 8004174:	e7fb      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
          return HAL_ERROR;
 8004176:	2001      	movs	r0, #1
 8004178:	e7f9      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
 800417a:	2001      	movs	r0, #1
 800417c:	e7f7      	b.n	800416e <HAL_RCC_OscConfig+0x3f6>
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000
 8004184:	42420000 	.word	0x42420000

08004188 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004188:	4b0f      	ldr	r3, [pc, #60]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x40>)
 800418a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800418c:	f003 020c 	and.w	r2, r3, #12
 8004190:	2a08      	cmp	r2, #8
 8004192:	d001      	beq.n	8004198 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8004194:	480d      	ldr	r0, [pc, #52]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x44>)
}
 8004196:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004198:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800419c:	490c      	ldr	r1, [pc, #48]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x48>)
 800419e:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041a0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80041a4:	d00b      	beq.n	80041be <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041a6:	4b08      	ldr	r3, [pc, #32]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x40>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80041ae:	4a09      	ldr	r2, [pc, #36]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x4c>)
 80041b0:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041b2:	4a06      	ldr	r2, [pc, #24]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x44>)
 80041b4:	fb02 f000 	mul.w	r0, r2, r0
 80041b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80041bc:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041be:	4b06      	ldr	r3, [pc, #24]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x50>)
 80041c0:	fb03 f000 	mul.w	r0, r3, r0
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	40021000 	.word	0x40021000
 80041cc:	007a1200 	.word	0x007a1200
 80041d0:	08007e8c 	.word	0x08007e8c
 80041d4:	08007e88 	.word	0x08007e88
 80041d8:	003d0900 	.word	0x003d0900

080041dc <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80041dc:	2800      	cmp	r0, #0
 80041de:	f000 80a0 	beq.w	8004322 <HAL_RCC_ClockConfig+0x146>
{
 80041e2:	b570      	push	{r4, r5, r6, lr}
 80041e4:	460d      	mov	r5, r1
 80041e6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041e8:	4b52      	ldr	r3, [pc, #328]	@ (8004334 <HAL_RCC_ClockConfig+0x158>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	428b      	cmp	r3, r1
 80041f2:	d20b      	bcs.n	800420c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f4:	4a4f      	ldr	r2, [pc, #316]	@ (8004334 <HAL_RCC_ClockConfig+0x158>)
 80041f6:	6813      	ldr	r3, [r2, #0]
 80041f8:	f023 0307 	bic.w	r3, r3, #7
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004200:	6813      	ldr	r3, [r2, #0]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	428b      	cmp	r3, r1
 8004208:	f040 808d 	bne.w	8004326 <HAL_RCC_ClockConfig+0x14a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	f013 0f02 	tst.w	r3, #2
 8004212:	d017      	beq.n	8004244 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	f013 0f04 	tst.w	r3, #4
 8004218:	d004      	beq.n	8004224 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800421a:	4a47      	ldr	r2, [pc, #284]	@ (8004338 <HAL_RCC_ClockConfig+0x15c>)
 800421c:	6853      	ldr	r3, [r2, #4]
 800421e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004222:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	f013 0f08 	tst.w	r3, #8
 800422a:	d004      	beq.n	8004236 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800422c:	4a42      	ldr	r2, [pc, #264]	@ (8004338 <HAL_RCC_ClockConfig+0x15c>)
 800422e:	6853      	ldr	r3, [r2, #4]
 8004230:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004234:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004236:	4a40      	ldr	r2, [pc, #256]	@ (8004338 <HAL_RCC_ClockConfig+0x15c>)
 8004238:	6853      	ldr	r3, [r2, #4]
 800423a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800423e:	68a1      	ldr	r1, [r4, #8]
 8004240:	430b      	orrs	r3, r1
 8004242:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	f013 0f01 	tst.w	r3, #1
 800424a:	d031      	beq.n	80042b0 <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424c:	6863      	ldr	r3, [r4, #4]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d020      	beq.n	8004294 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004252:	2b02      	cmp	r3, #2
 8004254:	d025      	beq.n	80042a2 <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004256:	4a38      	ldr	r2, [pc, #224]	@ (8004338 <HAL_RCC_ClockConfig+0x15c>)
 8004258:	6812      	ldr	r2, [r2, #0]
 800425a:	f012 0f02 	tst.w	r2, #2
 800425e:	d064      	beq.n	800432a <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004260:	4935      	ldr	r1, [pc, #212]	@ (8004338 <HAL_RCC_ClockConfig+0x15c>)
 8004262:	684a      	ldr	r2, [r1, #4]
 8004264:	f022 0203 	bic.w	r2, r2, #3
 8004268:	4313      	orrs	r3, r2
 800426a:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800426c:	f7fd fbfe 	bl	8001a6c <HAL_GetTick>
 8004270:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004272:	4b31      	ldr	r3, [pc, #196]	@ (8004338 <HAL_RCC_ClockConfig+0x15c>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f003 030c 	and.w	r3, r3, #12
 800427a:	6862      	ldr	r2, [r4, #4]
 800427c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004280:	d016      	beq.n	80042b0 <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004282:	f7fd fbf3 	bl	8001a6c <HAL_GetTick>
 8004286:	1b80      	subs	r0, r0, r6
 8004288:	f241 3388 	movw	r3, #5000	@ 0x1388
 800428c:	4298      	cmp	r0, r3
 800428e:	d9f0      	bls.n	8004272 <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 8004290:	2003      	movs	r0, #3
 8004292:	e045      	b.n	8004320 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004294:	4a28      	ldr	r2, [pc, #160]	@ (8004338 <HAL_RCC_ClockConfig+0x15c>)
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 800429c:	d1e0      	bne.n	8004260 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 800429e:	2001      	movs	r0, #1
 80042a0:	e03e      	b.n	8004320 <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a2:	4a25      	ldr	r2, [pc, #148]	@ (8004338 <HAL_RCC_ClockConfig+0x15c>)
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80042aa:	d1d9      	bne.n	8004260 <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 80042ac:	2001      	movs	r0, #1
 80042ae:	e037      	b.n	8004320 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042b0:	4b20      	ldr	r3, [pc, #128]	@ (8004334 <HAL_RCC_ClockConfig+0x158>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	42ab      	cmp	r3, r5
 80042ba:	d90a      	bls.n	80042d2 <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042bc:	4a1d      	ldr	r2, [pc, #116]	@ (8004334 <HAL_RCC_ClockConfig+0x158>)
 80042be:	6813      	ldr	r3, [r2, #0]
 80042c0:	f023 0307 	bic.w	r3, r3, #7
 80042c4:	432b      	orrs	r3, r5
 80042c6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c8:	6813      	ldr	r3, [r2, #0]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	42ab      	cmp	r3, r5
 80042d0:	d12d      	bne.n	800432e <HAL_RCC_ClockConfig+0x152>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	f013 0f04 	tst.w	r3, #4
 80042d8:	d006      	beq.n	80042e8 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042da:	4a17      	ldr	r2, [pc, #92]	@ (8004338 <HAL_RCC_ClockConfig+0x15c>)
 80042dc:	6853      	ldr	r3, [r2, #4]
 80042de:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80042e2:	68e1      	ldr	r1, [r4, #12]
 80042e4:	430b      	orrs	r3, r1
 80042e6:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	f013 0f08 	tst.w	r3, #8
 80042ee:	d007      	beq.n	8004300 <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042f0:	4a11      	ldr	r2, [pc, #68]	@ (8004338 <HAL_RCC_ClockConfig+0x15c>)
 80042f2:	6853      	ldr	r3, [r2, #4]
 80042f4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80042f8:	6921      	ldr	r1, [r4, #16]
 80042fa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80042fe:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004300:	f7ff ff42 	bl	8004188 <HAL_RCC_GetSysClockFreq>
 8004304:	4b0c      	ldr	r3, [pc, #48]	@ (8004338 <HAL_RCC_ClockConfig+0x15c>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800430c:	4a0b      	ldr	r2, [pc, #44]	@ (800433c <HAL_RCC_ClockConfig+0x160>)
 800430e:	5cd3      	ldrb	r3, [r2, r3]
 8004310:	40d8      	lsrs	r0, r3
 8004312:	4b0b      	ldr	r3, [pc, #44]	@ (8004340 <HAL_RCC_ClockConfig+0x164>)
 8004314:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004316:	4b0b      	ldr	r3, [pc, #44]	@ (8004344 <HAL_RCC_ClockConfig+0x168>)
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	f7fd fab1 	bl	8001880 <HAL_InitTick>
  return HAL_OK;
 800431e:	2000      	movs	r0, #0
}
 8004320:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004322:	2001      	movs	r0, #1
}
 8004324:	4770      	bx	lr
    return HAL_ERROR;
 8004326:	2001      	movs	r0, #1
 8004328:	e7fa      	b.n	8004320 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 800432a:	2001      	movs	r0, #1
 800432c:	e7f8      	b.n	8004320 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800432e:	2001      	movs	r0, #1
 8004330:	e7f6      	b.n	8004320 <HAL_RCC_ClockConfig+0x144>
 8004332:	bf00      	nop
 8004334:	40022000 	.word	0x40022000
 8004338:	40021000 	.word	0x40021000
 800433c:	08007e78 	.word	0x08007e78
 8004340:	20000008 	.word	0x20000008
 8004344:	20000010 	.word	0x20000010

08004348 <HAL_RCC_GetHCLKFreq>:
}
 8004348:	4b01      	ldr	r3, [pc, #4]	@ (8004350 <HAL_RCC_GetHCLKFreq+0x8>)
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	20000008 	.word	0x20000008

08004354 <HAL_RCC_GetPCLK1Freq>:
{
 8004354:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004356:	f7ff fff7 	bl	8004348 <HAL_RCC_GetHCLKFreq>
 800435a:	4b04      	ldr	r3, [pc, #16]	@ (800436c <HAL_RCC_GetPCLK1Freq+0x18>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004362:	4a03      	ldr	r2, [pc, #12]	@ (8004370 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004364:	5cd3      	ldrb	r3, [r2, r3]
}
 8004366:	40d8      	lsrs	r0, r3
 8004368:	bd08      	pop	{r3, pc}
 800436a:	bf00      	nop
 800436c:	40021000 	.word	0x40021000
 8004370:	08007e70 	.word	0x08007e70

08004374 <HAL_RCC_GetPCLK2Freq>:
{
 8004374:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004376:	f7ff ffe7 	bl	8004348 <HAL_RCC_GetHCLKFreq>
 800437a:	4b04      	ldr	r3, [pc, #16]	@ (800438c <HAL_RCC_GetPCLK2Freq+0x18>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004382:	4a03      	ldr	r2, [pc, #12]	@ (8004390 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004384:	5cd3      	ldrb	r3, [r2, r3]
}
 8004386:	40d8      	lsrs	r0, r3
 8004388:	bd08      	pop	{r3, pc}
 800438a:	bf00      	nop
 800438c:	40021000 	.word	0x40021000
 8004390:	08007e70 	.word	0x08007e70

08004394 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004394:	230f      	movs	r3, #15
 8004396:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004398:	4b0b      	ldr	r3, [pc, #44]	@ (80043c8 <HAL_RCC_GetClockConfig+0x34>)
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	f002 0203 	and.w	r2, r2, #3
 80043a0:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80043a8:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 80043b0:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	08db      	lsrs	r3, r3, #3
 80043b6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043ba:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80043bc:	4b03      	ldr	r3, [pc, #12]	@ (80043cc <HAL_RCC_GetClockConfig+0x38>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	600b      	str	r3, [r1, #0]
}
 80043c6:	4770      	bx	lr
 80043c8:	40021000 	.word	0x40021000
 80043cc:	40022000 	.word	0x40022000

080043d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043d0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d2:	6a02      	ldr	r2, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043d4:	6a03      	ldr	r3, [r0, #32]
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043de:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043e0:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043e4:	680c      	ldr	r4, [r1, #0]
 80043e6:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043e8:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043ec:	688b      	ldr	r3, [r1, #8]
 80043ee:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043f0:	4a0b      	ldr	r2, [pc, #44]	@ (8004420 <TIM_OC1_SetConfig+0x50>)
 80043f2:	4290      	cmp	r0, r2
 80043f4:	d006      	beq.n	8004404 <TIM_OC1_SetConfig+0x34>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043f6:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043f8:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043fa:	684a      	ldr	r2, [r1, #4]
 80043fc:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043fe:	6203      	str	r3, [r0, #32]
}
 8004400:	bc30      	pop	{r4, r5}
 8004402:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8004404:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004408:	68ca      	ldr	r2, [r1, #12]
 800440a:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 800440c:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004410:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8004414:	694a      	ldr	r2, [r1, #20]
 8004416:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004418:	698d      	ldr	r5, [r1, #24]
 800441a:	4315      	orrs	r5, r2
 800441c:	e7eb      	b.n	80043f6 <TIM_OC1_SetConfig+0x26>
 800441e:	bf00      	nop
 8004420:	40012c00 	.word	0x40012c00

08004424 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004424:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004426:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004428:	6a02      	ldr	r2, [r0, #32]
 800442a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800442e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004430:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004432:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004434:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004438:	680d      	ldr	r5, [r1, #0]
 800443a:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800443c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004440:	688a      	ldr	r2, [r1, #8]
 8004442:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004446:	4a0d      	ldr	r2, [pc, #52]	@ (800447c <TIM_OC3_SetConfig+0x58>)
 8004448:	4290      	cmp	r0, r2
 800444a:	d006      	beq.n	800445a <TIM_OC3_SetConfig+0x36>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800444c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800444e:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004450:	684a      	ldr	r2, [r1, #4]
 8004452:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004454:	6203      	str	r3, [r0, #32]
}
 8004456:	bc30      	pop	{r4, r5}
 8004458:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800445a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800445e:	68ca      	ldr	r2, [r1, #12]
 8004460:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004464:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004468:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800446c:	694a      	ldr	r2, [r1, #20]
 800446e:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004472:	698a      	ldr	r2, [r1, #24]
 8004474:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 8004478:	e7e8      	b.n	800444c <TIM_OC3_SetConfig+0x28>
 800447a:	bf00      	nop
 800447c:	40012c00 	.word	0x40012c00

08004480 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004480:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004482:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004484:	6a02      	ldr	r2, [r0, #32]
 8004486:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800448a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800448c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800448e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004490:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004494:	680d      	ldr	r5, [r1, #0]
 8004496:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800449a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800449e:	688d      	ldr	r5, [r1, #8]
 80044a0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a4:	4d07      	ldr	r5, [pc, #28]	@ (80044c4 <TIM_OC4_SetConfig+0x44>)
 80044a6:	42a8      	cmp	r0, r5
 80044a8:	d006      	beq.n	80044b8 <TIM_OC4_SetConfig+0x38>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044aa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044ac:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044ae:	684a      	ldr	r2, [r1, #4]
 80044b0:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b2:	6203      	str	r3, [r0, #32]
}
 80044b4:	bc30      	pop	{r4, r5}
 80044b6:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044b8:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044bc:	694d      	ldr	r5, [r1, #20]
 80044be:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80044c2:	e7f2      	b.n	80044aa <TIM_OC4_SetConfig+0x2a>
 80044c4:	40012c00 	.word	0x40012c00

080044c8 <HAL_TIM_Base_MspInit>:
}
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80044cc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d127      	bne.n	8004526 <HAL_TIM_Base_Start_IT+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 80044d6:	2302      	movs	r3, #2
 80044d8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044dc:	6802      	ldr	r2, [r0, #0]
 80044de:	68d3      	ldr	r3, [r2, #12]
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e6:	6803      	ldr	r3, [r0, #0]
 80044e8:	4a11      	ldr	r2, [pc, #68]	@ (8004530 <HAL_TIM_Base_Start_IT+0x64>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d010      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x44>
 80044ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f2:	d00d      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x44>
 80044f4:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d009      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x44>
 80044fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004500:	4293      	cmp	r3, r2
 8004502:	d005      	beq.n	8004510 <HAL_TIM_Base_Start_IT+0x44>
    __HAL_TIM_ENABLE(htim);
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800450c:	2000      	movs	r0, #0
 800450e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004516:	2a06      	cmp	r2, #6
 8004518:	d007      	beq.n	800452a <HAL_TIM_Base_Start_IT+0x5e>
      __HAL_TIM_ENABLE(htim);
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	f042 0201 	orr.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004522:	2000      	movs	r0, #0
 8004524:	4770      	bx	lr
    return HAL_ERROR;
 8004526:	2001      	movs	r0, #1
 8004528:	4770      	bx	lr
  return HAL_OK;
 800452a:	2000      	movs	r0, #0
}
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40012c00 	.word	0x40012c00

08004534 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004534:	4770      	bx	lr

08004536 <HAL_TIM_IC_CaptureCallback>:
}
 8004536:	4770      	bx	lr

08004538 <HAL_TIM_TriggerCallback>:
}
 8004538:	4770      	bx	lr

0800453a <HAL_TIM_IRQHandler>:
{
 800453a:	b570      	push	{r4, r5, r6, lr}
 800453c:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800453e:	6803      	ldr	r3, [r0, #0]
 8004540:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004542:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004544:	f015 0f02 	tst.w	r5, #2
 8004548:	d010      	beq.n	800456c <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800454a:	f016 0f02 	tst.w	r6, #2
 800454e:	d00d      	beq.n	800456c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004550:	f06f 0202 	mvn.w	r2, #2
 8004554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004556:	2301      	movs	r3, #1
 8004558:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800455a:	6803      	ldr	r3, [r0, #0]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	f013 0f03 	tst.w	r3, #3
 8004562:	d05e      	beq.n	8004622 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8004564:	f7ff ffe7 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004568:	2300      	movs	r3, #0
 800456a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800456c:	f015 0f04 	tst.w	r5, #4
 8004570:	d012      	beq.n	8004598 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004572:	f016 0f04 	tst.w	r6, #4
 8004576:	d00f      	beq.n	8004598 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	f06f 0204 	mvn.w	r2, #4
 800457e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004580:	2302      	movs	r3, #2
 8004582:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800458c:	d04f      	beq.n	800462e <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800458e:	4620      	mov	r0, r4
 8004590:	f7ff ffd1 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004594:	2300      	movs	r3, #0
 8004596:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004598:	f015 0f08 	tst.w	r5, #8
 800459c:	d012      	beq.n	80045c4 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800459e:	f016 0f08 	tst.w	r6, #8
 80045a2:	d00f      	beq.n	80045c4 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	f06f 0208 	mvn.w	r2, #8
 80045aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045ac:	2304      	movs	r3, #4
 80045ae:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	f013 0f03 	tst.w	r3, #3
 80045b8:	d040      	beq.n	800463c <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80045ba:	4620      	mov	r0, r4
 80045bc:	f7ff ffbb 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c0:	2300      	movs	r3, #0
 80045c2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045c4:	f015 0f10 	tst.w	r5, #16
 80045c8:	d012      	beq.n	80045f0 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045ca:	f016 0f10 	tst.w	r6, #16
 80045ce:	d00f      	beq.n	80045f0 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	f06f 0210 	mvn.w	r2, #16
 80045d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045d8:	2308      	movs	r3, #8
 80045da:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80045e4:	d031      	beq.n	800464a <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 80045e6:	4620      	mov	r0, r4
 80045e8:	f7ff ffa5 	bl	8004536 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ec:	2300      	movs	r3, #0
 80045ee:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80045f0:	f015 0f01 	tst.w	r5, #1
 80045f4:	d002      	beq.n	80045fc <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80045f6:	f016 0f01 	tst.w	r6, #1
 80045fa:	d12d      	bne.n	8004658 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045fc:	f015 0f80 	tst.w	r5, #128	@ 0x80
 8004600:	d002      	beq.n	8004608 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004602:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8004606:	d12f      	bne.n	8004668 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004608:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800460c:	d002      	beq.n	8004614 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800460e:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8004612:	d131      	bne.n	8004678 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004614:	f015 0f20 	tst.w	r5, #32
 8004618:	d002      	beq.n	8004620 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800461a:	f016 0f20 	tst.w	r6, #32
 800461e:	d133      	bne.n	8004688 <HAL_TIM_IRQHandler+0x14e>
}
 8004620:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004622:	f7ff ff87 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004626:	4620      	mov	r0, r4
 8004628:	f002 fabc 	bl	8006ba4 <HAL_TIM_PWM_PulseFinishedCallback>
 800462c:	e79c      	b.n	8004568 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462e:	4620      	mov	r0, r4
 8004630:	f7ff ff80 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004634:	4620      	mov	r0, r4
 8004636:	f002 fab5 	bl	8006ba4 <HAL_TIM_PWM_PulseFinishedCallback>
 800463a:	e7ab      	b.n	8004594 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800463c:	4620      	mov	r0, r4
 800463e:	f7ff ff79 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004642:	4620      	mov	r0, r4
 8004644:	f002 faae 	bl	8006ba4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004648:	e7ba      	b.n	80045c0 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800464a:	4620      	mov	r0, r4
 800464c:	f7ff ff72 	bl	8004534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004650:	4620      	mov	r0, r4
 8004652:	f002 faa7 	bl	8006ba4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004656:	e7c9      	b.n	80045ec <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	f06f 0201 	mvn.w	r2, #1
 800465e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004660:	4620      	mov	r0, r4
 8004662:	f7fc fe85 	bl	8001370 <HAL_TIM_PeriodElapsedCallback>
 8004666:	e7c9      	b.n	80045fc <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800466e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004670:	4620      	mov	r0, r4
 8004672:	f000 fa9e 	bl	8004bb2 <HAL_TIMEx_BreakCallback>
 8004676:	e7c7      	b.n	8004608 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800467e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004680:	4620      	mov	r0, r4
 8004682:	f7ff ff59 	bl	8004538 <HAL_TIM_TriggerCallback>
 8004686:	e7c5      	b.n	8004614 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	f06f 0220 	mvn.w	r2, #32
 800468e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004690:	4620      	mov	r0, r4
 8004692:	f000 fa8d 	bl	8004bb0 <HAL_TIMEx_CommutCallback>
}
 8004696:	e7c3      	b.n	8004620 <HAL_TIM_IRQHandler+0xe6>

08004698 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8004698:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800469a:	4a1f      	ldr	r2, [pc, #124]	@ (8004718 <TIM_Base_SetConfig+0x80>)
 800469c:	4290      	cmp	r0, r2
 800469e:	d00a      	beq.n	80046b6 <TIM_Base_SetConfig+0x1e>
 80046a0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80046a4:	d007      	beq.n	80046b6 <TIM_Base_SetConfig+0x1e>
 80046a6:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80046aa:	4290      	cmp	r0, r2
 80046ac:	d003      	beq.n	80046b6 <TIM_Base_SetConfig+0x1e>
 80046ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80046b2:	4290      	cmp	r0, r2
 80046b4:	d103      	bne.n	80046be <TIM_Base_SetConfig+0x26>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80046ba:	684a      	ldr	r2, [r1, #4]
 80046bc:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046be:	4a16      	ldr	r2, [pc, #88]	@ (8004718 <TIM_Base_SetConfig+0x80>)
 80046c0:	4290      	cmp	r0, r2
 80046c2:	d00a      	beq.n	80046da <TIM_Base_SetConfig+0x42>
 80046c4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80046c8:	d007      	beq.n	80046da <TIM_Base_SetConfig+0x42>
 80046ca:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80046ce:	4290      	cmp	r0, r2
 80046d0:	d003      	beq.n	80046da <TIM_Base_SetConfig+0x42>
 80046d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80046d6:	4290      	cmp	r0, r2
 80046d8:	d103      	bne.n	80046e2 <TIM_Base_SetConfig+0x4a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80046da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046de:	68ca      	ldr	r2, [r1, #12]
 80046e0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046e6:	694a      	ldr	r2, [r1, #20]
 80046e8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80046ea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046ec:	688b      	ldr	r3, [r1, #8]
 80046ee:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80046f0:	680b      	ldr	r3, [r1, #0]
 80046f2:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046f4:	4b08      	ldr	r3, [pc, #32]	@ (8004718 <TIM_Base_SetConfig+0x80>)
 80046f6:	4298      	cmp	r0, r3
 80046f8:	d00a      	beq.n	8004710 <TIM_Base_SetConfig+0x78>
  TIMx->EGR = TIM_EGR_UG;
 80046fa:	2301      	movs	r3, #1
 80046fc:	6143      	str	r3, [r0, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046fe:	6903      	ldr	r3, [r0, #16]
 8004700:	f013 0f01 	tst.w	r3, #1
 8004704:	d003      	beq.n	800470e <TIM_Base_SetConfig+0x76>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004706:	6903      	ldr	r3, [r0, #16]
 8004708:	f023 0301 	bic.w	r3, r3, #1
 800470c:	6103      	str	r3, [r0, #16]
}
 800470e:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8004710:	690b      	ldr	r3, [r1, #16]
 8004712:	6303      	str	r3, [r0, #48]	@ 0x30
 8004714:	e7f1      	b.n	80046fa <TIM_Base_SetConfig+0x62>
 8004716:	bf00      	nop
 8004718:	40012c00 	.word	0x40012c00

0800471c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800471c:	b340      	cbz	r0, 8004770 <HAL_TIM_Base_Init+0x54>
{
 800471e:	b510      	push	{r4, lr}
 8004720:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004722:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004726:	b1f3      	cbz	r3, 8004766 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	2302      	movs	r3, #2
 800472a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800472e:	4621      	mov	r1, r4
 8004730:	f851 0b04 	ldr.w	r0, [r1], #4
 8004734:	f7ff ffb0 	bl	8004698 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004738:	2301      	movs	r3, #1
 800473a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800473e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004742:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004746:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800474a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800474e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004752:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004756:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800475a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800475e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004762:	2000      	movs	r0, #0
}
 8004764:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004766:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800476a:	f7ff fead 	bl	80044c8 <HAL_TIM_Base_MspInit>
 800476e:	e7db      	b.n	8004728 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8004770:	2001      	movs	r0, #1
}
 8004772:	4770      	bx	lr

08004774 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004774:	b340      	cbz	r0, 80047c8 <HAL_TIM_PWM_Init+0x54>
{
 8004776:	b510      	push	{r4, lr}
 8004778:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800477a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800477e:	b1f3      	cbz	r3, 80047be <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	2302      	movs	r3, #2
 8004782:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004786:	4621      	mov	r1, r4
 8004788:	f851 0b04 	ldr.w	r0, [r1], #4
 800478c:	f7ff ff84 	bl	8004698 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004790:	2301      	movs	r3, #1
 8004792:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004796:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800479a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800479e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80047a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80047b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80047b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80047ba:	2000      	movs	r0, #0
}
 80047bc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80047be:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80047c2:	f7fc ffad 	bl	8001720 <HAL_TIM_PWM_MspInit>
 80047c6:	e7db      	b.n	8004780 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80047c8:	2001      	movs	r0, #1
}
 80047ca:	4770      	bx	lr

080047cc <TIM_OC2_SetConfig>:
{
 80047cc:	b430      	push	{r4, r5}
  tmpccer = TIMx->CCER;
 80047ce:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d0:	6a02      	ldr	r2, [r0, #32]
 80047d2:	f022 0210 	bic.w	r2, r2, #16
 80047d6:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80047d8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80047da:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047dc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e0:	680d      	ldr	r5, [r1, #0]
 80047e2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80047e6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047ea:	688d      	ldr	r5, [r1, #8]
 80047ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047f0:	4d0c      	ldr	r5, [pc, #48]	@ (8004824 <TIM_OC2_SetConfig+0x58>)
 80047f2:	42a8      	cmp	r0, r5
 80047f4:	d006      	beq.n	8004804 <TIM_OC2_SetConfig+0x38>
  TIMx->CR2 = tmpcr2;
 80047f6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80047f8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80047fa:	684a      	ldr	r2, [r1, #4]
 80047fc:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80047fe:	6203      	str	r3, [r0, #32]
}
 8004800:	bc30      	pop	{r4, r5}
 8004802:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 8004804:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004808:	68cd      	ldr	r5, [r1, #12]
 800480a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800480e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004812:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004816:	694d      	ldr	r5, [r1, #20]
 8004818:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800481c:	698d      	ldr	r5, [r1, #24]
 800481e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004822:	e7e8      	b.n	80047f6 <TIM_OC2_SetConfig+0x2a>
 8004824:	40012c00 	.word	0x40012c00

08004828 <HAL_TIM_PWM_ConfigChannel>:
{
 8004828:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800482a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800482e:	2b01      	cmp	r3, #1
 8004830:	d066      	beq.n	8004900 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8004832:	4604      	mov	r4, r0
 8004834:	460d      	mov	r5, r1
 8004836:	2301      	movs	r3, #1
 8004838:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800483c:	2a0c      	cmp	r2, #12
 800483e:	d85a      	bhi.n	80048f6 <HAL_TIM_PWM_ConfigChannel+0xce>
 8004840:	e8df f002 	tbb	[pc, r2]
 8004844:	59595907 	.word	0x59595907
 8004848:	5959591b 	.word	0x5959591b
 800484c:	59595930 	.word	0x59595930
 8004850:	44          	.byte	0x44
 8004851:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004852:	6800      	ldr	r0, [r0, #0]
 8004854:	f7ff fdbc 	bl	80043d0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004858:	6822      	ldr	r2, [r4, #0]
 800485a:	6993      	ldr	r3, [r2, #24]
 800485c:	f043 0308 	orr.w	r3, r3, #8
 8004860:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	6993      	ldr	r3, [r2, #24]
 8004866:	f023 0304 	bic.w	r3, r3, #4
 800486a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800486c:	6822      	ldr	r2, [r4, #0]
 800486e:	6993      	ldr	r3, [r2, #24]
 8004870:	6929      	ldr	r1, [r5, #16]
 8004872:	430b      	orrs	r3, r1
 8004874:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004876:	2000      	movs	r0, #0
      break;
 8004878:	e03e      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800487a:	6800      	ldr	r0, [r0, #0]
 800487c:	f7ff ffa6 	bl	80047cc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004880:	6822      	ldr	r2, [r4, #0]
 8004882:	6993      	ldr	r3, [r2, #24]
 8004884:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004888:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800488a:	6822      	ldr	r2, [r4, #0]
 800488c:	6993      	ldr	r3, [r2, #24]
 800488e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004892:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004894:	6822      	ldr	r2, [r4, #0]
 8004896:	6993      	ldr	r3, [r2, #24]
 8004898:	6929      	ldr	r1, [r5, #16]
 800489a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800489e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80048a0:	2000      	movs	r0, #0
      break;
 80048a2:	e029      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048a4:	6800      	ldr	r0, [r0, #0]
 80048a6:	f7ff fdbd 	bl	8004424 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048aa:	6822      	ldr	r2, [r4, #0]
 80048ac:	69d3      	ldr	r3, [r2, #28]
 80048ae:	f043 0308 	orr.w	r3, r3, #8
 80048b2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80048b4:	6822      	ldr	r2, [r4, #0]
 80048b6:	69d3      	ldr	r3, [r2, #28]
 80048b8:	f023 0304 	bic.w	r3, r3, #4
 80048bc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80048be:	6822      	ldr	r2, [r4, #0]
 80048c0:	69d3      	ldr	r3, [r2, #28]
 80048c2:	6929      	ldr	r1, [r5, #16]
 80048c4:	430b      	orrs	r3, r1
 80048c6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80048c8:	2000      	movs	r0, #0
      break;
 80048ca:	e015      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048cc:	6800      	ldr	r0, [r0, #0]
 80048ce:	f7ff fdd7 	bl	8004480 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	69d3      	ldr	r3, [r2, #28]
 80048d6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80048da:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048dc:	6822      	ldr	r2, [r4, #0]
 80048de:	69d3      	ldr	r3, [r2, #28]
 80048e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048e4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048e6:	6822      	ldr	r2, [r4, #0]
 80048e8:	69d3      	ldr	r3, [r2, #28]
 80048ea:	6929      	ldr	r1, [r5, #16]
 80048ec:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80048f0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80048f2:	2000      	movs	r0, #0
      break;
 80048f4:	e000      	b.n	80048f8 <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 80048f6:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80048f8:	2300      	movs	r3, #0
 80048fa:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80048fe:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004900:	2002      	movs	r0, #2
 8004902:	e7fc      	b.n	80048fe <HAL_TIM_PWM_ConfigChannel+0xd6>

08004904 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004904:	f001 011f 	and.w	r1, r1, #31
 8004908:	f04f 0c01 	mov.w	ip, #1
 800490c:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004910:	6a03      	ldr	r3, [r0, #32]
 8004912:	ea23 030c 	bic.w	r3, r3, ip
 8004916:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004918:	6a03      	ldr	r3, [r0, #32]
 800491a:	408a      	lsls	r2, r1
 800491c:	4313      	orrs	r3, r2
 800491e:	6203      	str	r3, [r0, #32]
}
 8004920:	4770      	bx	lr
	...

08004924 <HAL_TIM_PWM_Start_IT>:
{
 8004924:	b510      	push	{r4, lr}
 8004926:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004928:	4608      	mov	r0, r1
 800492a:	2900      	cmp	r1, #0
 800492c:	d130      	bne.n	8004990 <HAL_TIM_PWM_Start_IT+0x6c>
 800492e:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8004932:	b2db      	uxtb	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	bf18      	it	ne
 8004938:	2301      	movne	r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	f040 8090 	bne.w	8004a60 <HAL_TIM_PWM_Start_IT+0x13c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004940:	2800      	cmp	r0, #0
 8004942:	d13e      	bne.n	80049c2 <HAL_TIM_PWM_Start_IT+0x9e>
 8004944:	2302      	movs	r3, #2
 8004946:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800494a:	6822      	ldr	r2, [r4, #0]
 800494c:	68d3      	ldr	r3, [r2, #12]
 800494e:	f043 0302 	orr.w	r3, r3, #2
 8004952:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004954:	2201      	movs	r2, #1
 8004956:	4601      	mov	r1, r0
 8004958:	6820      	ldr	r0, [r4, #0]
 800495a:	f7ff ffd3 	bl	8004904 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	4a42      	ldr	r2, [pc, #264]	@ (8004a6c <HAL_TIM_PWM_Start_IT+0x148>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d06c      	beq.n	8004a40 <HAL_TIM_PWM_Start_IT+0x11c>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	4a40      	ldr	r2, [pc, #256]	@ (8004a6c <HAL_TIM_PWM_Start_IT+0x148>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d06d      	beq.n	8004a4a <HAL_TIM_PWM_Start_IT+0x126>
 800496e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004972:	d06a      	beq.n	8004a4a <HAL_TIM_PWM_Start_IT+0x126>
 8004974:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004978:	4293      	cmp	r3, r2
 800497a:	d066      	beq.n	8004a4a <HAL_TIM_PWM_Start_IT+0x126>
 800497c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004980:	4293      	cmp	r3, r2
 8004982:	d062      	beq.n	8004a4a <HAL_TIM_PWM_Start_IT+0x126>
      __HAL_TIM_ENABLE(htim);
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	f042 0201 	orr.w	r2, r2, #1
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	2000      	movs	r0, #0
 800498e:	e068      	b.n	8004a62 <HAL_TIM_PWM_Start_IT+0x13e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004990:	2904      	cmp	r1, #4
 8004992:	d008      	beq.n	80049a6 <HAL_TIM_PWM_Start_IT+0x82>
 8004994:	2908      	cmp	r1, #8
 8004996:	d00d      	beq.n	80049b4 <HAL_TIM_PWM_Start_IT+0x90>
 8004998:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800499c:	b2db      	uxtb	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	bf18      	it	ne
 80049a2:	2301      	movne	r3, #1
 80049a4:	e7c9      	b.n	800493a <HAL_TIM_PWM_Start_IT+0x16>
 80049a6:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	bf18      	it	ne
 80049b0:	2301      	movne	r3, #1
 80049b2:	e7c2      	b.n	800493a <HAL_TIM_PWM_Start_IT+0x16>
 80049b4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	3b01      	subs	r3, #1
 80049bc:	bf18      	it	ne
 80049be:	2301      	movne	r3, #1
 80049c0:	e7bb      	b.n	800493a <HAL_TIM_PWM_Start_IT+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049c2:	2804      	cmp	r0, #4
 80049c4:	d024      	beq.n	8004a10 <HAL_TIM_PWM_Start_IT+0xec>
 80049c6:	2808      	cmp	r0, #8
 80049c8:	d02b      	beq.n	8004a22 <HAL_TIM_PWM_Start_IT+0xfe>
 80049ca:	2302      	movs	r3, #2
 80049cc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  switch (Channel)
 80049d0:	280c      	cmp	r0, #12
 80049d2:	d847      	bhi.n	8004a64 <HAL_TIM_PWM_Start_IT+0x140>
 80049d4:	a301      	add	r3, pc, #4	@ (adr r3, 80049dc <HAL_TIM_PWM_Start_IT+0xb8>)
 80049d6:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80049da:	bf00      	nop
 80049dc:	0800494b 	.word	0x0800494b
 80049e0:	08004a65 	.word	0x08004a65
 80049e4:	08004a65 	.word	0x08004a65
 80049e8:	08004a65 	.word	0x08004a65
 80049ec:	08004a17 	.word	0x08004a17
 80049f0:	08004a65 	.word	0x08004a65
 80049f4:	08004a65 	.word	0x08004a65
 80049f8:	08004a65 	.word	0x08004a65
 80049fc:	08004a29 	.word	0x08004a29
 8004a00:	08004a65 	.word	0x08004a65
 8004a04:	08004a65 	.word	0x08004a65
 8004a08:	08004a65 	.word	0x08004a65
 8004a0c:	08004a35 	.word	0x08004a35
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a10:	2302      	movs	r3, #2
 8004a12:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a16:	6822      	ldr	r2, [r4, #0]
 8004a18:	68d3      	ldr	r3, [r2, #12]
 8004a1a:	f043 0304 	orr.w	r3, r3, #4
 8004a1e:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004a20:	e798      	b.n	8004954 <HAL_TIM_PWM_Start_IT+0x30>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a22:	2302      	movs	r3, #2
 8004a24:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a28:	6822      	ldr	r2, [r4, #0]
 8004a2a:	68d3      	ldr	r3, [r2, #12]
 8004a2c:	f043 0308 	orr.w	r3, r3, #8
 8004a30:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004a32:	e78f      	b.n	8004954 <HAL_TIM_PWM_Start_IT+0x30>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a34:	6822      	ldr	r2, [r4, #0]
 8004a36:	68d3      	ldr	r3, [r2, #12]
 8004a38:	f043 0310 	orr.w	r3, r3, #16
 8004a3c:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004a3e:	e789      	b.n	8004954 <HAL_TIM_PWM_Start_IT+0x30>
      __HAL_TIM_MOE_ENABLE(htim);
 8004a40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a46:	645a      	str	r2, [r3, #68]	@ 0x44
 8004a48:	e78d      	b.n	8004966 <HAL_TIM_PWM_Start_IT+0x42>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	f002 0207 	and.w	r2, r2, #7
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a50:	2a06      	cmp	r2, #6
 8004a52:	d009      	beq.n	8004a68 <HAL_TIM_PWM_Start_IT+0x144>
        __HAL_TIM_ENABLE(htim);
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	e000      	b.n	8004a62 <HAL_TIM_PWM_Start_IT+0x13e>
    return HAL_ERROR;
 8004a60:	2001      	movs	r0, #1
}
 8004a62:	bd10      	pop	{r4, pc}
  switch (Channel)
 8004a64:	2001      	movs	r0, #1
 8004a66:	e7fc      	b.n	8004a62 <HAL_TIM_PWM_Start_IT+0x13e>
 8004a68:	2000      	movs	r0, #0
 8004a6a:	e7fa      	b.n	8004a62 <HAL_TIM_PWM_Start_IT+0x13e>
 8004a6c:	40012c00 	.word	0x40012c00

08004a70 <HAL_TIM_PWM_Stop_IT>:
{
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	4605      	mov	r5, r0
 8004a74:	460c      	mov	r4, r1
  switch (Channel)
 8004a76:	290c      	cmp	r1, #12
 8004a78:	d85f      	bhi.n	8004b3a <HAL_TIM_PWM_Stop_IT+0xca>
 8004a7a:	e8df f001 	tbb	[pc, r1]
 8004a7e:	5e07      	.short	0x5e07
 8004a80:	5e2a5e5e 	.word	0x5e2a5e5e
 8004a84:	5e305e5e 	.word	0x5e305e5e
 8004a88:	5e5e      	.short	0x5e5e
 8004a8a:	36          	.byte	0x36
 8004a8b:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004a8c:	6802      	ldr	r2, [r0, #0]
 8004a8e:	68d3      	ldr	r3, [r2, #12]
 8004a90:	f023 0302 	bic.w	r3, r3, #2
 8004a94:	60d3      	str	r3, [r2, #12]
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a96:	2200      	movs	r2, #0
 8004a98:	4621      	mov	r1, r4
 8004a9a:	6828      	ldr	r0, [r5, #0]
 8004a9c:	f7ff ff32 	bl	8004904 <TIM_CCxChannelCmd>
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	4a27      	ldr	r2, [pc, #156]	@ (8004b40 <HAL_TIM_PWM_Stop_IT+0xd0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d026      	beq.n	8004af6 <HAL_TIM_PWM_Stop_IT+0x86>
    __HAL_TIM_DISABLE(htim);
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	6a19      	ldr	r1, [r3, #32]
 8004aac:	f241 1211 	movw	r2, #4369	@ 0x1111
 8004ab0:	4211      	tst	r1, r2
 8004ab2:	d108      	bne.n	8004ac6 <HAL_TIM_PWM_Stop_IT+0x56>
 8004ab4:	6a19      	ldr	r1, [r3, #32]
 8004ab6:	f240 4244 	movw	r2, #1092	@ 0x444
 8004aba:	4211      	tst	r1, r2
 8004abc:	d103      	bne.n	8004ac6 <HAL_TIM_PWM_Stop_IT+0x56>
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	f022 0201 	bic.w	r2, r2, #1
 8004ac4:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004ac6:	bb2c      	cbnz	r4, 8004b14 <HAL_TIM_PWM_Stop_IT+0xa4>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
 8004ace:	2000      	movs	r0, #0
 8004ad0:	e034      	b.n	8004b3c <HAL_TIM_PWM_Stop_IT+0xcc>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004ad2:	6802      	ldr	r2, [r0, #0]
 8004ad4:	68d3      	ldr	r3, [r2, #12]
 8004ad6:	f023 0304 	bic.w	r3, r3, #4
 8004ada:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004adc:	e7db      	b.n	8004a96 <HAL_TIM_PWM_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004ade:	6802      	ldr	r2, [r0, #0]
 8004ae0:	68d3      	ldr	r3, [r2, #12]
 8004ae2:	f023 0308 	bic.w	r3, r3, #8
 8004ae6:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004ae8:	e7d5      	b.n	8004a96 <HAL_TIM_PWM_Stop_IT+0x26>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004aea:	6802      	ldr	r2, [r0, #0]
 8004aec:	68d3      	ldr	r3, [r2, #12]
 8004aee:	f023 0310 	bic.w	r3, r3, #16
 8004af2:	60d3      	str	r3, [r2, #12]
  if (status == HAL_OK)
 8004af4:	e7cf      	b.n	8004a96 <HAL_TIM_PWM_Stop_IT+0x26>
      __HAL_TIM_MOE_DISABLE(htim);
 8004af6:	6a19      	ldr	r1, [r3, #32]
 8004af8:	f241 1211 	movw	r2, #4369	@ 0x1111
 8004afc:	4211      	tst	r1, r2
 8004afe:	d1d3      	bne.n	8004aa8 <HAL_TIM_PWM_Stop_IT+0x38>
 8004b00:	6a19      	ldr	r1, [r3, #32]
 8004b02:	f240 4244 	movw	r2, #1092	@ 0x444
 8004b06:	4211      	tst	r1, r2
 8004b08:	d1ce      	bne.n	8004aa8 <HAL_TIM_PWM_Stop_IT+0x38>
 8004b0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b10:	645a      	str	r2, [r3, #68]	@ 0x44
 8004b12:	e7c9      	b.n	8004aa8 <HAL_TIM_PWM_Stop_IT+0x38>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004b14:	2c04      	cmp	r4, #4
 8004b16:	d006      	beq.n	8004b26 <HAL_TIM_PWM_Stop_IT+0xb6>
 8004b18:	2c08      	cmp	r4, #8
 8004b1a:	d009      	beq.n	8004b30 <HAL_TIM_PWM_Stop_IT+0xc0>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
 8004b22:	2000      	movs	r0, #0
 8004b24:	e00a      	b.n	8004b3c <HAL_TIM_PWM_Stop_IT+0xcc>
 8004b26:	2301      	movs	r3, #1
 8004b28:	f885 303f 	strb.w	r3, [r5, #63]	@ 0x3f
 8004b2c:	2000      	movs	r0, #0
 8004b2e:	e005      	b.n	8004b3c <HAL_TIM_PWM_Stop_IT+0xcc>
 8004b30:	2301      	movs	r3, #1
 8004b32:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8004b36:	2000      	movs	r0, #0
 8004b38:	e000      	b.n	8004b3c <HAL_TIM_PWM_Stop_IT+0xcc>
  switch (Channel)
 8004b3a:	2001      	movs	r0, #1
}
 8004b3c:	bd38      	pop	{r3, r4, r5, pc}
 8004b3e:	bf00      	nop
 8004b40:	40012c00 	.word	0x40012c00

08004b44 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b44:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004b48:	2a01      	cmp	r2, #1
 8004b4a:	d02c      	beq.n	8004ba6 <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 8004b4c:	b410      	push	{r4}
 8004b4e:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004b50:	2201      	movs	r2, #1
 8004b52:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b56:	2202      	movs	r2, #2
 8004b58:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b5c:	6802      	ldr	r2, [r0, #0]
 8004b5e:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b60:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b62:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b66:	6808      	ldr	r0, [r1, #0]
 8004b68:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b6c:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	480e      	ldr	r0, [pc, #56]	@ (8004bac <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004b72:	4282      	cmp	r2, r0
 8004b74:	d00a      	beq.n	8004b8c <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004b76:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004b7a:	d007      	beq.n	8004b8c <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004b7c:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8004b80:	4282      	cmp	r2, r0
 8004b82:	d003      	beq.n	8004b8c <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8004b84:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004b88:	4282      	cmp	r2, r0
 8004b8a:	d104      	bne.n	8004b96 <HAL_TIMEx_MasterConfigSynchronization+0x52>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b8c:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b90:	6849      	ldr	r1, [r1, #4]
 8004b92:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b94:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b9c:	2000      	movs	r0, #0
 8004b9e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8004ba2:	bc10      	pop	{r4}
 8004ba4:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004ba6:	2002      	movs	r0, #2
}
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40012c00 	.word	0x40012c00

08004bb0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bb2:	4770      	bx	lr

08004bb4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bb4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb6:	f102 030c 	add.w	r3, r2, #12
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc2:	320c      	adds	r2, #12
 8004bc4:	e842 3100 	strex	r1, r3, [r2]
 8004bc8:	2900      	cmp	r1, #0
 8004bca:	d1f3      	bne.n	8004bb4 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bcc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bce:	f102 0314 	add.w	r3, r2, #20
 8004bd2:	e853 3f00 	ldrex	r3, [r3]
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	3214      	adds	r2, #20
 8004bdc:	e842 3100 	strex	r1, r3, [r2]
 8004be0:	2900      	cmp	r1, #0
 8004be2:	d1f3      	bne.n	8004bcc <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d005      	beq.n	8004bf6 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bea:	2320      	movs	r3, #32
 8004bec:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8004bf4:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	f102 030c 	add.w	r3, r2, #12
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c04:	320c      	adds	r2, #12
 8004c06:	e842 3100 	strex	r1, r3, [r2]
 8004c0a:	2900      	cmp	r1, #0
 8004c0c:	d1f3      	bne.n	8004bf6 <UART_EndRxTransfer+0x42>
 8004c0e:	e7ec      	b.n	8004bea <UART_EndRxTransfer+0x36>

08004c10 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c10:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b21      	cmp	r3, #33	@ 0x21
 8004c18:	d001      	beq.n	8004c1e <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004c1a:	2002      	movs	r0, #2
  }
}
 8004c1c:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c1e:	6883      	ldr	r3, [r0, #8]
 8004c20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c24:	d017      	beq.n	8004c56 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c26:	6a03      	ldr	r3, [r0, #32]
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	6202      	str	r2, [r0, #32]
 8004c2c:	781a      	ldrb	r2, [r3, #0]
 8004c2e:	6803      	ldr	r3, [r0, #0]
 8004c30:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004c32:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8004c3c:	b94b      	cbnz	r3, 8004c52 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c3e:	6802      	ldr	r2, [r0, #0]
 8004c40:	68d3      	ldr	r3, [r2, #12]
 8004c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c46:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c48:	6802      	ldr	r2, [r0, #0]
 8004c4a:	68d3      	ldr	r3, [r2, #12]
 8004c4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c50:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8004c52:	2000      	movs	r0, #0
 8004c54:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c56:	6903      	ldr	r3, [r0, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1e4      	bne.n	8004c26 <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c5c:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	6802      	ldr	r2, [r0, #0]
 8004c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c66:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004c68:	6a03      	ldr	r3, [r0, #32]
 8004c6a:	3302      	adds	r3, #2
 8004c6c:	6203      	str	r3, [r0, #32]
 8004c6e:	e7e0      	b.n	8004c32 <UART_Transmit_IT+0x22>

08004c70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c70:	b510      	push	{r4, lr}
 8004c72:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c74:	6802      	ldr	r2, [r0, #0]
 8004c76:	6913      	ldr	r3, [r2, #16]
 8004c78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004c7c:	68c1      	ldr	r1, [r0, #12]
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c82:	6883      	ldr	r3, [r0, #8]
 8004c84:	6902      	ldr	r2, [r0, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	6942      	ldr	r2, [r0, #20]
 8004c8a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004c8c:	6801      	ldr	r1, [r0, #0]
 8004c8e:	68cb      	ldr	r3, [r1, #12]
 8004c90:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004c94:	f023 030c 	bic.w	r3, r3, #12
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c9c:	6802      	ldr	r2, [r0, #0]
 8004c9e:	6953      	ldr	r3, [r2, #20]
 8004ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca4:	6981      	ldr	r1, [r0, #24]
 8004ca6:	430b      	orrs	r3, r1
 8004ca8:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8004caa:	6802      	ldr	r2, [r0, #0]
 8004cac:	4b13      	ldr	r3, [pc, #76]	@ (8004cfc <UART_SetConfig+0x8c>)
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d020      	beq.n	8004cf4 <UART_SetConfig+0x84>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004cb2:	f7ff fb4f 	bl	8004354 <HAL_RCC_GetPCLK1Freq>
 8004cb6:	4602      	mov	r2, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cb8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004cbc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004cc0:	6863      	ldr	r3, [r4, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cc8:	480d      	ldr	r0, [pc, #52]	@ (8004d00 <UART_SetConfig+0x90>)
 8004cca:	fba0 3102 	umull	r3, r1, r0, r2
 8004cce:	0949      	lsrs	r1, r1, #5
 8004cd0:	2364      	movs	r3, #100	@ 0x64
 8004cd2:	fb03 2311 	mls	r3, r3, r1, r2
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	3332      	adds	r3, #50	@ 0x32
 8004cda:	fba0 0303 	umull	r0, r3, r0, r3
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004ce4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004ce8:	f003 030f 	and.w	r3, r3, #15
 8004cec:	6821      	ldr	r1, [r4, #0]
 8004cee:	4413      	add	r3, r2
 8004cf0:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8004cf2:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cf4:	f7ff fb3e 	bl	8004374 <HAL_RCC_GetPCLK2Freq>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	e7dd      	b.n	8004cb8 <UART_SetConfig+0x48>
 8004cfc:	40013800 	.word	0x40013800
 8004d00:	51eb851f 	.word	0x51eb851f

08004d04 <UART_WaitOnFlagUntilTimeout>:
{
 8004d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	4605      	mov	r5, r0
 8004d0c:	460e      	mov	r6, r1
 8004d0e:	4617      	mov	r7, r2
 8004d10:	4699      	mov	r9, r3
 8004d12:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d16:	682b      	ldr	r3, [r5, #0]
 8004d18:	681c      	ldr	r4, [r3, #0]
 8004d1a:	ea36 0404 	bics.w	r4, r6, r4
 8004d1e:	bf0c      	ite	eq
 8004d20:	2401      	moveq	r4, #1
 8004d22:	2400      	movne	r4, #0
 8004d24:	42bc      	cmp	r4, r7
 8004d26:	d128      	bne.n	8004d7a <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8004d28:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004d2c:	d0f3      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2e:	f7fc fe9d 	bl	8001a6c <HAL_GetTick>
 8004d32:	eba0 0009 	sub.w	r0, r0, r9
 8004d36:	4540      	cmp	r0, r8
 8004d38:	d823      	bhi.n	8004d82 <UART_WaitOnFlagUntilTimeout+0x7e>
 8004d3a:	f1b8 0f00 	cmp.w	r8, #0
 8004d3e:	d022      	beq.n	8004d86 <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	68da      	ldr	r2, [r3, #12]
 8004d44:	f012 0f04 	tst.w	r2, #4
 8004d48:	d0e5      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x12>
 8004d4a:	2e80      	cmp	r6, #128	@ 0x80
 8004d4c:	d0e3      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x12>
 8004d4e:	2e40      	cmp	r6, #64	@ 0x40
 8004d50:	d0e1      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	f012 0f08 	tst.w	r2, #8
 8004d58:	d0dd      	beq.n	8004d16 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d5a:	2400      	movs	r4, #0
 8004d5c:	9401      	str	r4, [sp, #4]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	9201      	str	r2, [sp, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	9301      	str	r3, [sp, #4]
 8004d66:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f7ff ff23 	bl	8004bb4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d6e:	2308      	movs	r3, #8
 8004d70:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 8004d72:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8004d76:	2001      	movs	r0, #1
 8004d78:	e000      	b.n	8004d7c <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 8004d7a:	2000      	movs	r0, #0
}
 8004d7c:	b003      	add	sp, #12
 8004d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8004d82:	2003      	movs	r0, #3
 8004d84:	e7fa      	b.n	8004d7c <UART_WaitOnFlagUntilTimeout+0x78>
 8004d86:	2003      	movs	r0, #3
 8004d88:	e7f8      	b.n	8004d7c <UART_WaitOnFlagUntilTimeout+0x78>

08004d8a <HAL_UART_Init>:
  if (huart == NULL)
 8004d8a:	b360      	cbz	r0, 8004de6 <HAL_UART_Init+0x5c>
{
 8004d8c:	b510      	push	{r4, lr}
 8004d8e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004d90:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004d94:	b313      	cbz	r3, 8004ddc <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8004d96:	2324      	movs	r3, #36	@ 0x24
 8004d98:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8004d9c:	6822      	ldr	r2, [r4, #0]
 8004d9e:	68d3      	ldr	r3, [r2, #12]
 8004da0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004da4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004da6:	4620      	mov	r0, r4
 8004da8:	f7ff ff62 	bl	8004c70 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dac:	6822      	ldr	r2, [r4, #0]
 8004dae:	6913      	ldr	r3, [r2, #16]
 8004db0:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004db4:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004db6:	6822      	ldr	r2, [r4, #0]
 8004db8:	6953      	ldr	r3, [r2, #20]
 8004dba:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8004dbe:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004dc0:	6822      	ldr	r2, [r4, #0]
 8004dc2:	68d3      	ldr	r3, [r2, #12]
 8004dc4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004dc8:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dca:	2000      	movs	r0, #0
 8004dcc:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004dce:	2320      	movs	r3, #32
 8004dd0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004dd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dd8:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8004dda:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004ddc:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004de0:	f7fc fce2 	bl	80017a8 <HAL_UART_MspInit>
 8004de4:	e7d7      	b.n	8004d96 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004de6:	2001      	movs	r0, #1
}
 8004de8:	4770      	bx	lr

08004dea <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d031      	beq.n	8004e52 <HAL_HalfDuplex_Init+0x68>
{
 8004dee:	b510      	push	{r4, lr}
 8004df0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004df2:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004df6:	b33b      	cbz	r3, 8004e48 <HAL_HalfDuplex_Init+0x5e>
  huart->gState = HAL_UART_STATE_BUSY;
 8004df8:	2324      	movs	r3, #36	@ 0x24
 8004dfa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8004dfe:	6822      	ldr	r2, [r4, #0]
 8004e00:	68d3      	ldr	r3, [r2, #12]
 8004e02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e06:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f7ff ff31 	bl	8004c70 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e0e:	6822      	ldr	r2, [r4, #0]
 8004e10:	6913      	ldr	r3, [r2, #16]
 8004e12:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004e16:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004e18:	6822      	ldr	r2, [r4, #0]
 8004e1a:	6953      	ldr	r3, [r2, #20]
 8004e1c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004e20:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004e22:	6822      	ldr	r2, [r4, #0]
 8004e24:	6953      	ldr	r3, [r2, #20]
 8004e26:	f043 0308 	orr.w	r3, r3, #8
 8004e2a:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004e2c:	6822      	ldr	r2, [r4, #0]
 8004e2e:	68d3      	ldr	r3, [r2, #12]
 8004e30:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004e34:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e36:	2000      	movs	r0, #0
 8004e38:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e3a:	2320      	movs	r3, #32
 8004e3c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e44:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8004e46:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004e48:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004e4c:	f7fc fcac 	bl	80017a8 <HAL_UART_MspInit>
 8004e50:	e7d2      	b.n	8004df8 <HAL_HalfDuplex_Init+0xe>
    return HAL_ERROR;
 8004e52:	2001      	movs	r0, #1
}
 8004e54:	4770      	bx	lr

08004e56 <HAL_UART_Transmit>:
{
 8004e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004e5e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d156      	bne.n	8004f16 <HAL_UART_Transmit+0xc0>
 8004e68:	4604      	mov	r4, r0
 8004e6a:	460d      	mov	r5, r1
 8004e6c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004e6e:	2900      	cmp	r1, #0
 8004e70:	d055      	beq.n	8004f1e <HAL_UART_Transmit+0xc8>
 8004e72:	b90a      	cbnz	r2, 8004e78 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8004e74:	2001      	movs	r0, #1
 8004e76:	e04f      	b.n	8004f18 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e7c:	2321      	movs	r3, #33	@ 0x21
 8004e7e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8004e82:	f7fc fdf3 	bl	8001a6c <HAL_GetTick>
 8004e86:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8004e88:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004e8c:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e90:	68a3      	ldr	r3, [r4, #8]
 8004e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e96:	d002      	beq.n	8004e9e <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8004e98:	f04f 0800 	mov.w	r8, #0
 8004e9c:	e014      	b.n	8004ec8 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e9e:	6923      	ldr	r3, [r4, #16]
 8004ea0:	b32b      	cbz	r3, 8004eee <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 8004ea2:	f04f 0800 	mov.w	r8, #0
 8004ea6:	e00f      	b.n	8004ec8 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 8004ea8:	2320      	movs	r3, #32
 8004eaa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8004eae:	2003      	movs	r0, #3
 8004eb0:	e032      	b.n	8004f18 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004eb2:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004eb6:	6822      	ldr	r2, [r4, #0]
 8004eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebc:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004ebe:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8004ec0:	b292      	uxth	r2, r2
 8004ec2:	3a01      	subs	r2, #1
 8004ec4:	b292      	uxth	r2, r2
 8004ec6:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ec8:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	b193      	cbz	r3, 8004ef4 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ece:	9600      	str	r6, [sp, #0]
 8004ed0:	463b      	mov	r3, r7
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2180      	movs	r1, #128	@ 0x80
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	f7ff ff14 	bl	8004d04 <UART_WaitOnFlagUntilTimeout>
 8004edc:	2800      	cmp	r0, #0
 8004ede:	d1e3      	bne.n	8004ea8 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8004ee0:	2d00      	cmp	r5, #0
 8004ee2:	d0e6      	beq.n	8004eb2 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ee4:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004eec:	e7e7      	b.n	8004ebe <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 8004eee:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8004ef0:	2500      	movs	r5, #0
 8004ef2:	e7e9      	b.n	8004ec8 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ef4:	9600      	str	r6, [sp, #0]
 8004ef6:	463b      	mov	r3, r7
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2140      	movs	r1, #64	@ 0x40
 8004efc:	4620      	mov	r0, r4
 8004efe:	f7ff ff01 	bl	8004d04 <UART_WaitOnFlagUntilTimeout>
 8004f02:	b918      	cbnz	r0, 8004f0c <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 8004f04:	2320      	movs	r3, #32
 8004f06:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8004f0a:	e005      	b.n	8004f18 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8004f0c:	2320      	movs	r3, #32
 8004f0e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      return HAL_TIMEOUT;
 8004f12:	2003      	movs	r0, #3
 8004f14:	e000      	b.n	8004f18 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 8004f16:	2002      	movs	r0, #2
}
 8004f18:	b002      	add	sp, #8
 8004f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004f1e:	2001      	movs	r0, #1
 8004f20:	e7fa      	b.n	8004f18 <HAL_UART_Transmit+0xc2>

08004f22 <HAL_UART_Receive>:
{
 8004f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f2a:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	d159      	bne.n	8004fe8 <HAL_UART_Receive+0xc6>
 8004f34:	4604      	mov	r4, r0
 8004f36:	460d      	mov	r5, r1
 8004f38:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004f3a:	2900      	cmp	r1, #0
 8004f3c:	d058      	beq.n	8004ff0 <HAL_UART_Receive+0xce>
 8004f3e:	b90a      	cbnz	r2, 8004f44 <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 8004f40:	2001      	movs	r0, #1
 8004f42:	e052      	b.n	8004fea <HAL_UART_Receive+0xc8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f44:	2300      	movs	r3, #0
 8004f46:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f48:	2222      	movs	r2, #34	@ 0x22
 8004f4a:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f4e:	6303      	str	r3, [r0, #48]	@ 0x30
    tickstart = HAL_GetTick();
 8004f50:	f7fc fd8c 	bl	8001a6c <HAL_GetTick>
 8004f54:	4607      	mov	r7, r0
    huart->RxXferSize = Size;
 8004f56:	f8a4 802c 	strh.w	r8, [r4, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004f5a:	f8a4 802e 	strh.w	r8, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f5e:	68a3      	ldr	r3, [r4, #8]
 8004f60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f64:	d002      	beq.n	8004f6c <HAL_UART_Receive+0x4a>
      pdata16bits = NULL;
 8004f66:	f04f 0800 	mov.w	r8, #0
 8004f6a:	e01c      	b.n	8004fa6 <HAL_UART_Receive+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f6c:	6923      	ldr	r3, [r4, #16]
 8004f6e:	b113      	cbz	r3, 8004f76 <HAL_UART_Receive+0x54>
      pdata16bits = NULL;
 8004f70:	f04f 0800 	mov.w	r8, #0
 8004f74:	e017      	b.n	8004fa6 <HAL_UART_Receive+0x84>
      pdata16bits = (uint16_t *) pData;
 8004f76:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8004f78:	2500      	movs	r5, #0
 8004f7a:	e014      	b.n	8004fa6 <HAL_UART_Receive+0x84>
        huart->RxState = HAL_UART_STATE_READY;
 8004f7c:	2320      	movs	r3, #32
 8004f7e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        return HAL_TIMEOUT;
 8004f82:	2003      	movs	r0, #3
 8004f84:	e031      	b.n	8004fea <HAL_UART_Receive+0xc8>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8e:	f828 3b02 	strh.w	r3, [r8], #2
        pdata16bits++;
 8004f92:	e003      	b.n	8004f9c <HAL_UART_Receive+0x7a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	702b      	strb	r3, [r5, #0]
        pdata8bits++;
 8004f9a:	3501      	adds	r5, #1
      huart->RxXferCount--;
 8004f9c:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 8004f9e:	b292      	uxth	r2, r2
 8004fa0:	3a01      	subs	r2, #1
 8004fa2:	b292      	uxth	r2, r2
 8004fa4:	85e2      	strh	r2, [r4, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004fa6:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	b1c3      	cbz	r3, 8004fde <HAL_UART_Receive+0xbc>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004fac:	9600      	str	r6, [sp, #0]
 8004fae:	463b      	mov	r3, r7
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2120      	movs	r1, #32
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f7ff fea5 	bl	8004d04 <UART_WaitOnFlagUntilTimeout>
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d1de      	bne.n	8004f7c <HAL_UART_Receive+0x5a>
      if (pdata8bits == NULL)
 8004fbe:	2d00      	cmp	r5, #0
 8004fc0:	d0e1      	beq.n	8004f86 <HAL_UART_Receive+0x64>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fc2:	68a3      	ldr	r3, [r4, #8]
 8004fc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fc8:	d0e4      	beq.n	8004f94 <HAL_UART_Receive+0x72>
 8004fca:	b913      	cbnz	r3, 8004fd2 <HAL_UART_Receive+0xb0>
 8004fcc:	6923      	ldr	r3, [r4, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d0e0      	beq.n	8004f94 <HAL_UART_Receive+0x72>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fda:	702b      	strb	r3, [r5, #0]
 8004fdc:	e7dd      	b.n	8004f9a <HAL_UART_Receive+0x78>
    huart->RxState = HAL_UART_STATE_READY;
 8004fde:	2320      	movs	r3, #32
 8004fe0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    return HAL_OK;
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	e000      	b.n	8004fea <HAL_UART_Receive+0xc8>
    return HAL_BUSY;
 8004fe8:	2002      	movs	r0, #2
}
 8004fea:	b002      	add	sp, #8
 8004fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	e7fa      	b.n	8004fea <HAL_UART_Receive+0xc8>

08004ff4 <HAL_UART_TxCpltCallback>:
}
 8004ff4:	4770      	bx	lr

08004ff6 <UART_EndTransmit_IT>:
{
 8004ff6:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ff8:	6801      	ldr	r1, [r0, #0]
 8004ffa:	68ca      	ldr	r2, [r1, #12]
 8004ffc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005000:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005002:	2220      	movs	r2, #32
 8005004:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8005008:	f7ff fff4 	bl	8004ff4 <HAL_UART_TxCpltCallback>
}
 800500c:	2000      	movs	r0, #0
 800500e:	bd08      	pop	{r3, pc}

08005010 <HAL_UART_RxCpltCallback>:
}
 8005010:	4770      	bx	lr

08005012 <HAL_UART_ErrorCallback>:
}
 8005012:	4770      	bx	lr

08005014 <UART_DMAAbortOnError>:
{
 8005014:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005016:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 8005018:	2300      	movs	r3, #0
 800501a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800501c:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800501e:	f7ff fff8 	bl	8005012 <HAL_UART_ErrorCallback>
}
 8005022:	bd08      	pop	{r3, pc}

08005024 <HAL_UARTEx_RxEventCallback>:
}
 8005024:	4770      	bx	lr

08005026 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005026:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b22      	cmp	r3, #34	@ 0x22
 800502e:	d169      	bne.n	8005104 <UART_Receive_IT+0xde>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005030:	6883      	ldr	r3, [r0, #8]
 8005032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005036:	d04f      	beq.n	80050d8 <UART_Receive_IT+0xb2>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005038:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800503e:	d004      	beq.n	800504a <UART_Receive_IT+0x24>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d156      	bne.n	80050f2 <UART_Receive_IT+0xcc>
 8005044:	6903      	ldr	r3, [r0, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d153      	bne.n	80050f2 <UART_Receive_IT+0xcc>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800504a:	6803      	ldr	r3, [r0, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8005050:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005052:	3301      	adds	r3, #1
 8005054:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8005056:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8005058:	b29b      	uxth	r3, r3
 800505a:	3b01      	subs	r3, #1
 800505c:	b29b      	uxth	r3, r3
 800505e:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8005060:	2b00      	cmp	r3, #0
 8005062:	d151      	bne.n	8005108 <UART_Receive_IT+0xe2>
{
 8005064:	b500      	push	{lr}
 8005066:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005068:	6802      	ldr	r2, [r0, #0]
 800506a:	68d3      	ldr	r3, [r2, #12]
 800506c:	f023 0320 	bic.w	r3, r3, #32
 8005070:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005072:	6802      	ldr	r2, [r0, #0]
 8005074:	68d3      	ldr	r3, [r2, #12]
 8005076:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800507a:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800507c:	6802      	ldr	r2, [r0, #0]
 800507e:	6953      	ldr	r3, [r2, #20]
 8005080:	f023 0301 	bic.w	r3, r3, #1
 8005084:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005086:	2320      	movs	r3, #32
 8005088:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800508c:	2300      	movs	r3, #0
 800508e:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005090:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8005092:	2b01      	cmp	r3, #1
 8005094:	d133      	bne.n	80050fe <UART_Receive_IT+0xd8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005096:	2300      	movs	r3, #0
 8005098:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800509a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	f102 030c 	add.w	r3, r2, #12
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	320c      	adds	r2, #12
 80050aa:	e842 3100 	strex	r1, r3, [r2]
 80050ae:	2900      	cmp	r1, #0
 80050b0:	d1f3      	bne.n	800509a <UART_Receive_IT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050b2:	6803      	ldr	r3, [r0, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	f012 0f10 	tst.w	r2, #16
 80050ba:	d006      	beq.n	80050ca <UART_Receive_IT+0xa4>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050bc:	2200      	movs	r2, #0
 80050be:	9201      	str	r2, [sp, #4]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	9201      	str	r2, [sp, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050ca:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80050cc:	f7ff ffaa 	bl	8005024 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80050d0:	2000      	movs	r0, #0
}
 80050d2:	b003      	add	sp, #12
 80050d4:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d8:	6902      	ldr	r2, [r0, #16]
 80050da:	2a00      	cmp	r2, #0
 80050dc:	d1ac      	bne.n	8005038 <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050de:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050e0:	6803      	ldr	r3, [r0, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e8:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80050ea:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80050ec:	3302      	adds	r3, #2
 80050ee:	6283      	str	r3, [r0, #40]	@ 0x28
 80050f0:	e7b1      	b.n	8005056 <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050f2:	6803      	ldr	r3, [r0, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050fa:	7013      	strb	r3, [r2, #0]
 80050fc:	e7a8      	b.n	8005050 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 80050fe:	f7ff ff87 	bl	8005010 <HAL_UART_RxCpltCallback>
 8005102:	e7e5      	b.n	80050d0 <UART_Receive_IT+0xaa>
    return HAL_BUSY;
 8005104:	2002      	movs	r0, #2
 8005106:	4770      	bx	lr
    return HAL_OK;
 8005108:	2000      	movs	r0, #0
}
 800510a:	4770      	bx	lr

0800510c <HAL_UART_IRQHandler>:
{
 800510c:	b510      	push	{r4, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005112:	6802      	ldr	r2, [r0, #0]
 8005114:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005116:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005118:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 800511a:	f013 0f0f 	tst.w	r3, #15
 800511e:	d109      	bne.n	8005134 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005120:	f013 0f20 	tst.w	r3, #32
 8005124:	d00c      	beq.n	8005140 <HAL_UART_IRQHandler+0x34>
 8005126:	f010 0f20 	tst.w	r0, #32
 800512a:	d009      	beq.n	8005140 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 800512c:	4620      	mov	r0, r4
 800512e:	f7ff ff7a 	bl	8005026 <UART_Receive_IT>
      return;
 8005132:	e016      	b.n	8005162 <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005134:	f011 0101 	ands.w	r1, r1, #1
 8005138:	d115      	bne.n	8005166 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800513a:	f410 7f90 	tst.w	r0, #288	@ 0x120
 800513e:	d112      	bne.n	8005166 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005140:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005142:	2901      	cmp	r1, #1
 8005144:	d079      	beq.n	800523a <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005146:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800514a:	d003      	beq.n	8005154 <HAL_UART_IRQHandler+0x48>
 800514c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8005150:	f040 8113 	bne.w	800537a <HAL_UART_IRQHandler+0x26e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005154:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005158:	d003      	beq.n	8005162 <HAL_UART_IRQHandler+0x56>
 800515a:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800515e:	f040 8110 	bne.w	8005382 <HAL_UART_IRQHandler+0x276>
}
 8005162:	b002      	add	sp, #8
 8005164:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005166:	f013 0f01 	tst.w	r3, #1
 800516a:	d006      	beq.n	800517a <HAL_UART_IRQHandler+0x6e>
 800516c:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8005170:	d003      	beq.n	800517a <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005172:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005174:	f042 0201 	orr.w	r2, r2, #1
 8005178:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800517a:	f013 0f04 	tst.w	r3, #4
 800517e:	d004      	beq.n	800518a <HAL_UART_IRQHandler+0x7e>
 8005180:	b119      	cbz	r1, 800518a <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005182:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005184:	f042 0202 	orr.w	r2, r2, #2
 8005188:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800518a:	f013 0f02 	tst.w	r3, #2
 800518e:	d004      	beq.n	800519a <HAL_UART_IRQHandler+0x8e>
 8005190:	b119      	cbz	r1, 800519a <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005192:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005194:	f042 0204 	orr.w	r2, r2, #4
 8005198:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800519a:	f013 0f08 	tst.w	r3, #8
 800519e:	d007      	beq.n	80051b0 <HAL_UART_IRQHandler+0xa4>
 80051a0:	f010 0f20 	tst.w	r0, #32
 80051a4:	d100      	bne.n	80051a8 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80051a6:	b119      	cbz	r1, 80051b0 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051a8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80051aa:	f042 0208 	orr.w	r2, r2, #8
 80051ae:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051b0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80051b2:	2a00      	cmp	r2, #0
 80051b4:	d0d5      	beq.n	8005162 <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051b6:	f013 0f20 	tst.w	r3, #32
 80051ba:	d002      	beq.n	80051c2 <HAL_UART_IRQHandler+0xb6>
 80051bc:	f010 0f20 	tst.w	r0, #32
 80051c0:	d129      	bne.n	8005216 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051ca:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80051cc:	f012 0f08 	tst.w	r2, #8
 80051d0:	d100      	bne.n	80051d4 <HAL_UART_IRQHandler+0xc8>
 80051d2:	b363      	cbz	r3, 800522e <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 80051d4:	4620      	mov	r0, r4
 80051d6:	f7ff fced 	bl	8004bb4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051da:	6823      	ldr	r3, [r4, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80051e2:	d020      	beq.n	8005226 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051e4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	f102 0314 	add.w	r3, r2, #20
 80051ea:	e853 3f00 	ldrex	r3, [r3]
 80051ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f2:	3214      	adds	r2, #20
 80051f4:	e842 3100 	strex	r1, r3, [r2]
 80051f8:	2900      	cmp	r1, #0
 80051fa:	d1f3      	bne.n	80051e4 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 80051fc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80051fe:	b173      	cbz	r3, 800521e <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005200:	4a62      	ldr	r2, [pc, #392]	@ (800538c <HAL_UART_IRQHandler+0x280>)
 8005202:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005204:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005206:	f7fc fce9 	bl	8001bdc <HAL_DMA_Abort_IT>
 800520a:	2800      	cmp	r0, #0
 800520c:	d0a9      	beq.n	8005162 <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800520e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005210:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005212:	4798      	blx	r3
 8005214:	e7a5      	b.n	8005162 <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8005216:	4620      	mov	r0, r4
 8005218:	f7ff ff05 	bl	8005026 <UART_Receive_IT>
 800521c:	e7d1      	b.n	80051c2 <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 800521e:	4620      	mov	r0, r4
 8005220:	f7ff fef7 	bl	8005012 <HAL_UART_ErrorCallback>
 8005224:	e79d      	b.n	8005162 <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8005226:	4620      	mov	r0, r4
 8005228:	f7ff fef3 	bl	8005012 <HAL_UART_ErrorCallback>
 800522c:	e799      	b.n	8005162 <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 800522e:	4620      	mov	r0, r4
 8005230:	f7ff feef 	bl	8005012 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005234:	2300      	movs	r3, #0
 8005236:	6463      	str	r3, [r4, #68]	@ 0x44
    return;
 8005238:	e793      	b.n	8005162 <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800523a:	f013 0f10 	tst.w	r3, #16
 800523e:	d082      	beq.n	8005146 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005240:	f010 0f10 	tst.w	r0, #16
 8005244:	f43f af7f 	beq.w	8005146 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005248:	2300      	movs	r3, #0
 800524a:	9301      	str	r3, [sp, #4]
 800524c:	6813      	ldr	r3, [r2, #0]
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	6853      	ldr	r3, [r2, #4]
 8005252:	9301      	str	r3, [sp, #4]
 8005254:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005256:	6953      	ldr	r3, [r2, #20]
 8005258:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800525c:	d051      	beq.n	8005302 <HAL_UART_IRQHandler+0x1f6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800525e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005260:	6813      	ldr	r3, [r2, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005266:	2b00      	cmp	r3, #0
 8005268:	f43f af7b 	beq.w	8005162 <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800526c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800526e:	4299      	cmp	r1, r3
 8005270:	f67f af77 	bls.w	8005162 <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8005274:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005276:	6993      	ldr	r3, [r2, #24]
 8005278:	2b20      	cmp	r3, #32
 800527a:	d037      	beq.n	80052ec <HAL_UART_IRQHandler+0x1e0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800527c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	f102 030c 	add.w	r3, r2, #12
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528a:	320c      	adds	r2, #12
 800528c:	e842 3100 	strex	r1, r3, [r2]
 8005290:	2900      	cmp	r1, #0
 8005292:	d1f3      	bne.n	800527c <HAL_UART_IRQHandler+0x170>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005294:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005296:	f102 0314 	add.w	r3, r2, #20
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	3214      	adds	r2, #20
 80052a4:	e842 3100 	strex	r1, r3, [r2]
 80052a8:	2900      	cmp	r1, #0
 80052aa:	d1f3      	bne.n	8005294 <HAL_UART_IRQHandler+0x188>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	f102 0314 	add.w	r3, r2, #20
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	3214      	adds	r2, #20
 80052bc:	e842 3100 	strex	r1, r3, [r2]
 80052c0:	2900      	cmp	r1, #0
 80052c2:	d1f3      	bne.n	80052ac <HAL_UART_IRQHandler+0x1a0>
          huart->RxState = HAL_UART_STATE_READY;
 80052c4:	2320      	movs	r3, #32
 80052c6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ca:	2300      	movs	r3, #0
 80052cc:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	f102 030c 	add.w	r3, r2, #12
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	320c      	adds	r2, #12
 80052de:	e842 3100 	strex	r1, r3, [r2]
 80052e2:	2900      	cmp	r1, #0
 80052e4:	d1f3      	bne.n	80052ce <HAL_UART_IRQHandler+0x1c2>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052e6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80052e8:	f7fc fc54 	bl	8001b94 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052ec:	2302      	movs	r3, #2
 80052ee:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052f0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80052f2:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	1ac9      	subs	r1, r1, r3
 80052f8:	b289      	uxth	r1, r1
 80052fa:	4620      	mov	r0, r4
 80052fc:	f7ff fe92 	bl	8005024 <HAL_UARTEx_RxEventCallback>
      return;
 8005300:	e72f      	b.n	8005162 <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005302:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8005304:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8005306:	b29b      	uxth	r3, r3
 8005308:	1ac9      	subs	r1, r1, r3
 800530a:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800530c:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	f43f af26 	beq.w	8005162 <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 8005316:	2900      	cmp	r1, #0
 8005318:	f43f af23 	beq.w	8005162 <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800531c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	f102 030c 	add.w	r3, r2, #12
 8005322:	e853 3f00 	ldrex	r3, [r3]
 8005326:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	320c      	adds	r2, #12
 800532c:	e842 3000 	strex	r0, r3, [r2]
 8005330:	2800      	cmp	r0, #0
 8005332:	d1f3      	bne.n	800531c <HAL_UART_IRQHandler+0x210>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005334:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	f102 0314 	add.w	r3, r2, #20
 800533a:	e853 3f00 	ldrex	r3, [r3]
 800533e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	3214      	adds	r2, #20
 8005344:	e842 3000 	strex	r0, r3, [r2]
 8005348:	2800      	cmp	r0, #0
 800534a:	d1f3      	bne.n	8005334 <HAL_UART_IRQHandler+0x228>
        huart->RxState = HAL_UART_STATE_READY;
 800534c:	2320      	movs	r3, #32
 800534e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005352:	2300      	movs	r3, #0
 8005354:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005356:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	f102 030c 	add.w	r3, r2, #12
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005364:	320c      	adds	r2, #12
 8005366:	e842 3000 	strex	r0, r3, [r2]
 800536a:	2800      	cmp	r0, #0
 800536c:	d1f3      	bne.n	8005356 <HAL_UART_IRQHandler+0x24a>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800536e:	2302      	movs	r3, #2
 8005370:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005372:	4620      	mov	r0, r4
 8005374:	f7ff fe56 	bl	8005024 <HAL_UARTEx_RxEventCallback>
      return;
 8005378:	e6f3      	b.n	8005162 <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 800537a:	4620      	mov	r0, r4
 800537c:	f7ff fc48 	bl	8004c10 <UART_Transmit_IT>
    return;
 8005380:	e6ef      	b.n	8005162 <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 8005382:	4620      	mov	r0, r4
 8005384:	f7ff fe37 	bl	8004ff6 <UART_EndTransmit_IT>
    return;
 8005388:	e6eb      	b.n	8005162 <HAL_UART_IRQHandler+0x56>
 800538a:	bf00      	nop
 800538c:	08005015 	.word	0x08005015

08005390 <HAL_HalfDuplex_EnableTransmitter>:
  __HAL_LOCK(huart);
 8005390:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8005394:	2b01      	cmp	r3, #1
 8005396:	d014      	beq.n	80053c2 <HAL_HalfDuplex_EnableTransmitter+0x32>
 8005398:	2301      	movs	r3, #1
 800539a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_BUSY;
 800539e:	2324      	movs	r3, #36	@ 0x24
 80053a0:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  tmpreg = huart->Instance->CR1;
 80053a4:	6802      	ldr	r2, [r0, #0]
 80053a6:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80053a8:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_TE;
 80053ac:	f043 0308 	orr.w	r3, r3, #8
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80053b0:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80053b2:	2320      	movs	r3, #32
 80053b4:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_UNLOCK(huart);
 80053b8:	2300      	movs	r3, #0
 80053ba:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  return HAL_OK;
 80053be:	4618      	mov	r0, r3
 80053c0:	4770      	bx	lr
  __HAL_LOCK(huart);
 80053c2:	2002      	movs	r0, #2
}
 80053c4:	4770      	bx	lr

080053c6 <HAL_HalfDuplex_EnableReceiver>:
  __HAL_LOCK(huart);
 80053c6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d014      	beq.n	80053f8 <HAL_HalfDuplex_EnableReceiver+0x32>
 80053ce:	2301      	movs	r3, #1
 80053d0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_BUSY;
 80053d4:	2324      	movs	r3, #36	@ 0x24
 80053d6:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  tmpreg = huart->Instance->CR1;
 80053da:	6802      	ldr	r2, [r0, #0]
 80053dc:	68d3      	ldr	r3, [r2, #12]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80053de:	f023 030c 	bic.w	r3, r3, #12
  tmpreg |= (uint32_t)USART_CR1_RE;
 80053e2:	f043 0304 	orr.w	r3, r3, #4
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80053e6:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80053e8:	2320      	movs	r3, #32
 80053ea:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_UNLOCK(huart);
 80053ee:	2300      	movs	r3, #0
 80053f0:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
  return HAL_OK;
 80053f4:	4618      	mov	r0, r3
 80053f6:	4770      	bx	lr
  __HAL_LOCK(huart);
 80053f8:	2002      	movs	r0, #2
}
 80053fa:	4770      	bx	lr

080053fc <AS5600_GetRawAngle>:
    }

    return status;
}

HAL_StatusTypeDef AS5600_GetRawAngle(AS5600_TypeDef *const a, uint16_t *const angle) {
 80053fc:	b510      	push	{r4, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	460c      	mov	r4, r1
    HAL_StatusTypeDef status = HAL_OK;
    uint8_t data[2] = {0};
 8005402:	2300      	movs	r3, #0
 8005404:	f8ad 3014 	strh.w	r3, [sp, #20]
    status = HAL_I2C_Mem_Read(a->i2cHandle, a->i2cAddr, AS5600_REGISTER_RAW_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, 100);
 8005408:	2364      	movs	r3, #100	@ 0x64
 800540a:	9302      	str	r3, [sp, #8]
 800540c:	2302      	movs	r3, #2
 800540e:	9301      	str	r3, [sp, #4]
 8005410:	ab05      	add	r3, sp, #20
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	2301      	movs	r3, #1
 8005416:	220c      	movs	r2, #12
 8005418:	7901      	ldrb	r1, [r0, #4]
 800541a:	6800      	ldr	r0, [r0, #0]
 800541c:	f7fd fbe4 	bl	8002be8 <HAL_I2C_Mem_Read>
    if (status != HAL_OK) {
 8005420:	b100      	cbz	r0, 8005424 <AS5600_GetRawAngle+0x28>
        status = HAL_ERROR;
 8005422:	2001      	movs	r0, #1
    }
    *angle = ((data[0] << 8) | data[1]);
 8005424:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8005428:	f89d 3015 	ldrb.w	r3, [sp, #21]
 800542c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005430:	8023      	strh	r3, [r4, #0]
    return status;
}
 8005432:	b006      	add	sp, #24
 8005434:	bd10      	pop	{r4, pc}

08005436 <AS5600_GetMagnetStatus>:
    *angle = ((data[0] << 8) | data[1]);

    return status;
}

HAL_StatusTypeDef AS5600_GetMagnetStatus(AS5600_TypeDef *const a, uint8_t *const stat) {
 8005436:	b500      	push	{lr}
 8005438:	b085      	sub	sp, #20
    HAL_StatusTypeDef status = HAL_OK;
    if(HAL_I2C_Mem_Read(a->i2cHandle, a->i2cAddr, AS5600_REGISTER_STATUS,
 800543a:	230a      	movs	r3, #10
 800543c:	9302      	str	r3, [sp, #8]
 800543e:	2301      	movs	r3, #1
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	9100      	str	r1, [sp, #0]
 8005444:	220b      	movs	r2, #11
 8005446:	7901      	ldrb	r1, [r0, #4]
 8005448:	6800      	ldr	r0, [r0, #0]
 800544a:	f7fd fbcd 	bl	8002be8 <HAL_I2C_Mem_Read>
 800544e:	b100      	cbz	r0, 8005452 <AS5600_GetMagnetStatus+0x1c>
            I2C_MEMADD_SIZE_8BIT, stat, 1, 10) != HAL_OK){
    	status = HAL_ERROR;
 8005450:	2001      	movs	r0, #1
    }
    return status;
}
 8005452:	b005      	add	sp, #20
 8005454:	f85d fb04 	ldr.w	pc, [sp], #4

08005458 <AS5600_Init>:
AS5600Init_StatusTypedef AS5600_Init(AS5600_TypeDef *a) {
 8005458:	b510      	push	{r4, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	4604      	mov	r4, r0
    uint8_t mag_status = 0;
 800545e:	2300      	movs	r3, #0
 8005460:	f88d 3017 	strb.w	r3, [sp, #23]
    if (!(a->PositiveRotationDirection)) {
 8005464:	7b83      	ldrb	r3, [r0, #14]
 8005466:	b90b      	cbnz	r3, 800546c <AS5600_Init+0x14>
        a->PositiveRotationDirection = AS5600_DIR_CW;
 8005468:	2301      	movs	r3, #1
 800546a:	7383      	strb	r3, [r0, #14]
    if (!(a->LowPowerMode)) {
 800546c:	7be3      	ldrb	r3, [r4, #15]
 800546e:	b90b      	cbnz	r3, 8005474 <AS5600_Init+0x1c>
        a->LowPowerMode = AS5600_POWER_MODE_DEFAULT;
 8005470:	2301      	movs	r3, #1
 8005472:	73e3      	strb	r3, [r4, #15]
    if (!(a->Hysteresis)) {
 8005474:	7c23      	ldrb	r3, [r4, #16]
 8005476:	b90b      	cbnz	r3, 800547c <AS5600_Init+0x24>
        a->Hysteresis = AS5600_HYSTERESIS_DEFAULT;
 8005478:	2301      	movs	r3, #1
 800547a:	7423      	strb	r3, [r4, #16]
    if (!(a->OutputMode)) {
 800547c:	7c63      	ldrb	r3, [r4, #17]
 800547e:	b90b      	cbnz	r3, 8005484 <AS5600_Init+0x2c>
        a->OutputMode = AS5600_OUTPUT_STAGE_DEFAULT;
 8005480:	2301      	movs	r3, #1
 8005482:	7463      	strb	r3, [r4, #17]
    if (!(a->PWMFrequency)) {
 8005484:	7ca3      	ldrb	r3, [r4, #18]
 8005486:	b90b      	cbnz	r3, 800548c <AS5600_Init+0x34>
        a->PWMFrequency = AS5600_PWM_FREQUENCY_DEFAULT;
 8005488:	2301      	movs	r3, #1
 800548a:	74a3      	strb	r3, [r4, #18]
    if (!(a->SlowFilter)) {
 800548c:	7ce3      	ldrb	r3, [r4, #19]
 800548e:	b90b      	cbnz	r3, 8005494 <AS5600_Init+0x3c>
        a->SlowFilter = AS5600_SLOW_FILTER_DEFAULT;
 8005490:	2301      	movs	r3, #1
 8005492:	74e3      	strb	r3, [r4, #19]
    if (!(a->FastFilterThreshold)) {
 8005494:	7d23      	ldrb	r3, [r4, #20]
 8005496:	b90b      	cbnz	r3, 800549c <AS5600_Init+0x44>
        a->FastFilterThreshold = AS5600_FAST_FILTER_DEFAULT;
 8005498:	2301      	movs	r3, #1
 800549a:	7523      	strb	r3, [r4, #20]
    if (!(a->WatchdogTimer)) {
 800549c:	7d63      	ldrb	r3, [r4, #21]
 800549e:	b90b      	cbnz	r3, 80054a4 <AS5600_Init+0x4c>
        a->WatchdogTimer = AS5600_WATCHDOG_DEFAULT;
 80054a0:	2302      	movs	r3, #2
 80054a2:	7563      	strb	r3, [r4, #21]
    switch (a->LowPowerMode) {
 80054a4:	7be3      	ldrb	r3, [r4, #15]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	f200 8127 	bhi.w	80056fc <AS5600_Init+0x2a4>
 80054ae:	e8df f003 	tbb	[pc, r3]
 80054b2:	0f02      	.short	0x0f02
 80054b4:	2118      	.short	0x2118
            a->confRegister[1] &= ~((1UL << 1) | (1UL << 0));
 80054b6:	7de3      	ldrb	r3, [r4, #23]
 80054b8:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80054bc:	75e3      	strb	r3, [r4, #23]
    switch (a->Hysteresis) {
 80054be:	7c23      	ldrb	r3, [r4, #16]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	f200 811c 	bhi.w	8005700 <AS5600_Init+0x2a8>
 80054c8:	e8df f003 	tbb	[pc, r3]
 80054cc:	39302719 	.word	0x39302719
            a->confRegister[1] |= (1UL << 0);
 80054d0:	7de3      	ldrb	r3, [r4, #23]
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] &= ~(1UL << 1);
 80054d8:	7de3      	ldrb	r3, [r4, #23]
 80054da:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 80054de:	75e3      	strb	r3, [r4, #23]
            break;
 80054e0:	e7ed      	b.n	80054be <AS5600_Init+0x66>
            a->confRegister[1] |= (1UL << 1);
 80054e2:	7de3      	ldrb	r3, [r4, #23]
 80054e4:	f043 0302 	orr.w	r3, r3, #2
 80054e8:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] &= (1UL << 0);
 80054ea:	7de3      	ldrb	r3, [r4, #23]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	75e3      	strb	r3, [r4, #23]
            break;
 80054f2:	e7e4      	b.n	80054be <AS5600_Init+0x66>
            a->confRegister[1] |= ((1UL << 1) | (1UL << 0));
 80054f4:	7de3      	ldrb	r3, [r4, #23]
 80054f6:	f043 0303 	orr.w	r3, r3, #3
 80054fa:	75e3      	strb	r3, [r4, #23]
            break;
 80054fc:	e7df      	b.n	80054be <AS5600_Init+0x66>
            a->confRegister[1] &= ~((1UL << 3) | (1UL << 2));
 80054fe:	7de3      	ldrb	r3, [r4, #23]
 8005500:	f003 03f3 	and.w	r3, r3, #243	@ 0xf3
 8005504:	75e3      	strb	r3, [r4, #23]
    switch (a->OutputMode) {
 8005506:	7c63      	ldrb	r3, [r4, #17]
 8005508:	2b02      	cmp	r3, #2
 800550a:	d02a      	beq.n	8005562 <AS5600_Init+0x10a>
 800550c:	2b03      	cmp	r3, #3
 800550e:	d031      	beq.n	8005574 <AS5600_Init+0x11c>
 8005510:	2b01      	cmp	r3, #1
 8005512:	d019      	beq.n	8005548 <AS5600_Init+0xf0>
 8005514:	2001      	movs	r0, #1
}
 8005516:	b006      	add	sp, #24
 8005518:	bd10      	pop	{r4, pc}
            a->confRegister[1] |= (1UL << 2);
 800551a:	7de3      	ldrb	r3, [r4, #23]
 800551c:	f043 0304 	orr.w	r3, r3, #4
 8005520:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] &= ~(1UL << 3);
 8005522:	7de3      	ldrb	r3, [r4, #23]
 8005524:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
 8005528:	75e3      	strb	r3, [r4, #23]
            break;
 800552a:	e7ec      	b.n	8005506 <AS5600_Init+0xae>
            a->confRegister[1] &= ~(1UL << 2);
 800552c:	7de3      	ldrb	r3, [r4, #23]
 800552e:	f003 03fb 	and.w	r3, r3, #251	@ 0xfb
 8005532:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] |= (1UL << 3);
 8005534:	7de3      	ldrb	r3, [r4, #23]
 8005536:	f043 0308 	orr.w	r3, r3, #8
 800553a:	75e3      	strb	r3, [r4, #23]
            break;
 800553c:	e7e3      	b.n	8005506 <AS5600_Init+0xae>
            a->confRegister[1] |= ((1UL << 3) | (1UL << 2));
 800553e:	7de3      	ldrb	r3, [r4, #23]
 8005540:	f043 030c 	orr.w	r3, r3, #12
 8005544:	75e3      	strb	r3, [r4, #23]
            break;
 8005546:	e7de      	b.n	8005506 <AS5600_Init+0xae>
            a->confRegister[1] &= ~((1UL << 5) | (1UL << 4));
 8005548:	7de3      	ldrb	r3, [r4, #23]
 800554a:	f003 03cf 	and.w	r3, r3, #207	@ 0xcf
 800554e:	75e3      	strb	r3, [r4, #23]
    switch (a->SlowFilter) {
 8005550:	7ce3      	ldrb	r3, [r4, #19]
 8005552:	3b01      	subs	r3, #1
 8005554:	2b03      	cmp	r3, #3
 8005556:	f200 80d7 	bhi.w	8005708 <AS5600_Init+0x2b0>
 800555a:	e8df f003 	tbb	[pc, r3]
 800555e:	4738      	.short	0x4738
 8005560:	5950      	.short	0x5950
            a->confRegister[1] |= (1UL << 4);
 8005562:	7de3      	ldrb	r3, [r4, #23]
 8005564:	f043 0310 	orr.w	r3, r3, #16
 8005568:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] &= ~(1UL << 5);
 800556a:	7de3      	ldrb	r3, [r4, #23]
 800556c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005570:	75e3      	strb	r3, [r4, #23]
    if (pwm) {
 8005572:	e7ed      	b.n	8005550 <AS5600_Init+0xf8>
            a->confRegister[1] &= (1UL << 4);
 8005574:	7de3      	ldrb	r3, [r4, #23]
 8005576:	f003 0310 	and.w	r3, r3, #16
 800557a:	75e3      	strb	r3, [r4, #23]
            a->confRegister[1] |= (1UL << 5);
 800557c:	7de3      	ldrb	r3, [r4, #23]
 800557e:	f043 0320 	orr.w	r3, r3, #32
 8005582:	75e3      	strb	r3, [r4, #23]
        switch (a->PWMFrequency) {
 8005584:	7ca3      	ldrb	r3, [r4, #18]
 8005586:	3b01      	subs	r3, #1
 8005588:	2b03      	cmp	r3, #3
 800558a:	f200 80bb 	bhi.w	8005704 <AS5600_Init+0x2ac>
 800558e:	e8df f003 	tbb	[pc, r3]
 8005592:	0702      	.short	0x0702
 8005594:	1910      	.short	0x1910
                a->confRegister[1] &= ~((1UL << 7) | (1UL << 6));
 8005596:	7de3      	ldrb	r3, [r4, #23]
 8005598:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800559c:	75e3      	strb	r3, [r4, #23]
                break;
 800559e:	e7d7      	b.n	8005550 <AS5600_Init+0xf8>
                a->confRegister[1] |= (1UL << 6);
 80055a0:	7de3      	ldrb	r3, [r4, #23]
 80055a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055a6:	75e3      	strb	r3, [r4, #23]
                a->confRegister[1] &= ~(1UL << 7);
 80055a8:	7de3      	ldrb	r3, [r4, #23]
 80055aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ae:	75e3      	strb	r3, [r4, #23]
                break;
 80055b0:	e7ce      	b.n	8005550 <AS5600_Init+0xf8>
                a->confRegister[1] &= ~(1UL << 6);
 80055b2:	7de3      	ldrb	r3, [r4, #23]
 80055b4:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
 80055b8:	75e3      	strb	r3, [r4, #23]
                a->confRegister[1] |= (1UL << 7);
 80055ba:	7de3      	ldrb	r3, [r4, #23]
 80055bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055c0:	75e3      	strb	r3, [r4, #23]
                break;
 80055c2:	e7c5      	b.n	8005550 <AS5600_Init+0xf8>
                a->confRegister[1] |= ((1UL << 7) | (1UL << 6));
 80055c4:	7de3      	ldrb	r3, [r4, #23]
 80055c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055ca:	75e3      	strb	r3, [r4, #23]
                break;
 80055cc:	e7c0      	b.n	8005550 <AS5600_Init+0xf8>
            a->confRegister[0] &= ~((1UL << 1) | (1UL << 0));
 80055ce:	7da3      	ldrb	r3, [r4, #22]
 80055d0:	f003 03fc 	and.w	r3, r3, #252	@ 0xfc
 80055d4:	75a3      	strb	r3, [r4, #22]
    switch (a->FastFilterThreshold) {
 80055d6:	7d23      	ldrb	r3, [r4, #20]
 80055d8:	3b01      	subs	r3, #1
 80055da:	2b07      	cmp	r3, #7
 80055dc:	f200 8096 	bhi.w	800570c <AS5600_Init+0x2b4>
 80055e0:	e8df f003 	tbb	[pc, r3]
 80055e4:	382f261b 	.word	0x382f261b
 80055e8:	5c534a41 	.word	0x5c534a41
            a->confRegister[0] |= (1UL << 0);
 80055ec:	7da3      	ldrb	r3, [r4, #22]
 80055ee:	f043 0301 	orr.w	r3, r3, #1
 80055f2:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] &= ~(1UL << 1);
 80055f4:	7da3      	ldrb	r3, [r4, #22]
 80055f6:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 80055fa:	75a3      	strb	r3, [r4, #22]
            break;
 80055fc:	e7eb      	b.n	80055d6 <AS5600_Init+0x17e>
            a->confRegister[0] &= ~(1UL << 0);
 80055fe:	7da3      	ldrb	r3, [r4, #22]
 8005600:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005604:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= (1UL << 1);
 8005606:	7da3      	ldrb	r3, [r4, #22]
 8005608:	f043 0302 	orr.w	r3, r3, #2
 800560c:	75a3      	strb	r3, [r4, #22]
            break;
 800560e:	e7e2      	b.n	80055d6 <AS5600_Init+0x17e>
            a->confRegister[0] |= ((1UL << 1) | (1UL << 0));
 8005610:	7da3      	ldrb	r3, [r4, #22]
 8005612:	f043 0303 	orr.w	r3, r3, #3
 8005616:	75a3      	strb	r3, [r4, #22]
            break;
 8005618:	e7dd      	b.n	80055d6 <AS5600_Init+0x17e>
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 800561a:	7da3      	ldrb	r3, [r4, #22]
 800561c:	f003 03e3 	and.w	r3, r3, #227	@ 0xe3
 8005620:	75a3      	strb	r3, [r4, #22]
    switch (a->WatchdogTimer) {
 8005622:	7d63      	ldrb	r3, [r4, #21]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d03e      	beq.n	80056a6 <AS5600_Init+0x24e>
 8005628:	2b02      	cmp	r3, #2
 800562a:	d062      	beq.n	80056f2 <AS5600_Init+0x29a>
 800562c:	2001      	movs	r0, #1
 800562e:	e772      	b.n	8005516 <AS5600_Init+0xbe>
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 3));
 8005630:	7da3      	ldrb	r3, [r4, #22]
 8005632:	f003 03e7 	and.w	r3, r3, #231	@ 0xe7
 8005636:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= (1UL << 2);
 8005638:	7da3      	ldrb	r3, [r4, #22]
 800563a:	f043 0304 	orr.w	r3, r3, #4
 800563e:	75a3      	strb	r3, [r4, #22]
            break;
 8005640:	e7ef      	b.n	8005622 <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~((1UL << 4) | (1UL << 2));
 8005642:	7da3      	ldrb	r3, [r4, #22]
 8005644:	f003 03eb 	and.w	r3, r3, #235	@ 0xeb
 8005648:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= (1UL << 3);
 800564a:	7da3      	ldrb	r3, [r4, #22]
 800564c:	f043 0308 	orr.w	r3, r3, #8
 8005650:	75a3      	strb	r3, [r4, #22]
            break;
 8005652:	e7e6      	b.n	8005622 <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~(1UL << 4);
 8005654:	7da3      	ldrb	r3, [r4, #22]
 8005656:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 800565a:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= ((1UL << 3) | (1UL << 2));
 800565c:	7da3      	ldrb	r3, [r4, #22]
 800565e:	f043 030c 	orr.w	r3, r3, #12
 8005662:	75a3      	strb	r3, [r4, #22]
            break;
 8005664:	e7dd      	b.n	8005622 <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~((1UL << 3) | (1UL << 2));
 8005666:	7da3      	ldrb	r3, [r4, #22]
 8005668:	f003 03f3 	and.w	r3, r3, #243	@ 0xf3
 800566c:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= (1UL << 4);
 800566e:	7da3      	ldrb	r3, [r4, #22]
 8005670:	f043 0310 	orr.w	r3, r3, #16
 8005674:	75a3      	strb	r3, [r4, #22]
            break;
 8005676:	e7d4      	b.n	8005622 <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~(1UL << 3);
 8005678:	7da3      	ldrb	r3, [r4, #22]
 800567a:	f003 03f7 	and.w	r3, r3, #247	@ 0xf7
 800567e:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= ((1UL << 4) | (1UL << 2));
 8005680:	7da3      	ldrb	r3, [r4, #22]
 8005682:	f043 0314 	orr.w	r3, r3, #20
 8005686:	75a3      	strb	r3, [r4, #22]
            break;
 8005688:	e7cb      	b.n	8005622 <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~(1UL << 2);
 800568a:	7da3      	ldrb	r3, [r4, #22]
 800568c:	f003 03fb 	and.w	r3, r3, #251	@ 0xfb
 8005690:	75a3      	strb	r3, [r4, #22]
            a->confRegister[0] |= ((1UL << 4) | (1UL << 3));
 8005692:	7da3      	ldrb	r3, [r4, #22]
 8005694:	f043 0318 	orr.w	r3, r3, #24
 8005698:	75a3      	strb	r3, [r4, #22]
            break;
 800569a:	e7c2      	b.n	8005622 <AS5600_Init+0x1ca>
            a->confRegister[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 800569c:	7da3      	ldrb	r3, [r4, #22]
 800569e:	f043 031c 	orr.w	r3, r3, #28
 80056a2:	75a3      	strb	r3, [r4, #22]
            break;
 80056a4:	e7bd      	b.n	8005622 <AS5600_Init+0x1ca>
            a->confRegister[0] &= ~(1UL << 6);
 80056a6:	7da3      	ldrb	r3, [r4, #22]
 80056a8:	f003 03bf 	and.w	r3, r3, #191	@ 0xbf
 80056ac:	75a3      	strb	r3, [r4, #22]
    if (HAL_I2C_Mem_Write(a->i2cHandle, a->i2cAddr, AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT, a->confRegister, 2, 10) != HAL_OK) {
 80056ae:	4623      	mov	r3, r4
 80056b0:	f853 0b16 	ldr.w	r0, [r3], #22
 80056b4:	220a      	movs	r2, #10
 80056b6:	9202      	str	r2, [sp, #8]
 80056b8:	2202      	movs	r2, #2
 80056ba:	9201      	str	r2, [sp, #4]
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	2301      	movs	r3, #1
 80056c0:	2207      	movs	r2, #7
 80056c2:	7921      	ldrb	r1, [r4, #4]
 80056c4:	f7fd f9de 	bl	8002a84 <HAL_I2C_Mem_Write>
 80056c8:	bb10      	cbnz	r0, 8005710 <AS5600_Init+0x2b8>
    if (AS5600_GetMagnetStatus(a, &mag_status) != HAL_OK) {
 80056ca:	f10d 0117 	add.w	r1, sp, #23
 80056ce:	4620      	mov	r0, r4
 80056d0:	f7ff feb1 	bl	8005436 <AS5600_GetMagnetStatus>
 80056d4:	b9f0      	cbnz	r0, 8005714 <AS5600_Init+0x2bc>
    if (!(mag_status & AS5600_MAGNET_DETECTED)) {
 80056d6:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80056da:	f010 0f20 	tst.w	r0, #32
 80056de:	d01b      	beq.n	8005718 <AS5600_Init+0x2c0>
    if ((mag_status & AS5600_AGC_MIN_GAIN_OVERFLOW)) {
 80056e0:	f010 0f08 	tst.w	r0, #8
 80056e4:	d11a      	bne.n	800571c <AS5600_Init+0x2c4>
    if ((mag_status & AS5600_AGC_MAX_GAIN_OVERFLOW)) {
 80056e6:	f010 0010 	ands.w	r0, r0, #16
 80056ea:	f43f af14 	beq.w	8005516 <AS5600_Init+0xbe>
        return status;
 80056ee:	2004      	movs	r0, #4
 80056f0:	e711      	b.n	8005516 <AS5600_Init+0xbe>
            a->confRegister[0] |= (1UL << 6);
 80056f2:	7da3      	ldrb	r3, [r4, #22]
 80056f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056f8:	75a3      	strb	r3, [r4, #22]
            break;
 80056fa:	e7d8      	b.n	80056ae <AS5600_Init+0x256>
    switch (a->LowPowerMode) {
 80056fc:	2001      	movs	r0, #1
 80056fe:	e70a      	b.n	8005516 <AS5600_Init+0xbe>
    switch (a->Hysteresis) {
 8005700:	2001      	movs	r0, #1
 8005702:	e708      	b.n	8005516 <AS5600_Init+0xbe>
        switch (a->PWMFrequency) {
 8005704:	2001      	movs	r0, #1
 8005706:	e706      	b.n	8005516 <AS5600_Init+0xbe>
    switch (a->SlowFilter) {
 8005708:	2001      	movs	r0, #1
 800570a:	e704      	b.n	8005516 <AS5600_Init+0xbe>
    switch (a->FastFilterThreshold) {
 800570c:	2001      	movs	r0, #1
 800570e:	e702      	b.n	8005516 <AS5600_Init+0xbe>
        return status;
 8005710:	2005      	movs	r0, #5
 8005712:	e700      	b.n	8005516 <AS5600_Init+0xbe>
        return status;
 8005714:	2005      	movs	r0, #5
 8005716:	e6fe      	b.n	8005516 <AS5600_Init+0xbe>
        return status;
 8005718:	2002      	movs	r0, #2
 800571a:	e6fc      	b.n	8005516 <AS5600_Init+0xbe>
        return status;
 800571c:	2003      	movs	r0, #3
 800571e:	e6fa      	b.n	8005516 <AS5600_Init+0xbe>

08005720 <EncoderInit>:
static uint16_t raw_buffer = 0;
static uint16_t position_prev = 0;
static uint8_t elapsed_fall_f = 0;
static uint8_t elapsed_rise_f = 0;

HAL_StatusTypeDef EncoderInit(){
 8005720:	b508      	push	{r3, lr}
	Encoder.i2cHandle = &hi2c1;
 8005722:	4b10      	ldr	r3, [pc, #64]	@ (8005764 <EncoderInit+0x44>)
 8005724:	4810      	ldr	r0, [pc, #64]	@ (8005768 <EncoderInit+0x48>)
 8005726:	6018      	str	r0, [r3, #0]
	Encoder.i2cAddr = ENCODER_ADDRESS << 1;
 8005728:	216c      	movs	r1, #108	@ 0x6c
 800572a:	7119      	strb	r1, [r3, #4]
	Encoder.DirPort = ENCODER_PORT;
 800572c:	4a0f      	ldr	r2, [pc, #60]	@ (800576c <EncoderInit+0x4c>)
 800572e:	609a      	str	r2, [r3, #8]
	Encoder.DirPin = GPIO_PIN_5;
 8005730:	2220      	movs	r2, #32
 8005732:	819a      	strh	r2, [r3, #12]

	if(HAL_I2C_IsDeviceReady(Encoder.i2cHandle, Encoder.i2cAddr, 1, 100) != HAL_OK){
 8005734:	2364      	movs	r3, #100	@ 0x64
 8005736:	2201      	movs	r2, #1
 8005738:	f7fd fc04 	bl	8002f44 <HAL_I2C_IsDeviceReady>
 800573c:	b938      	cbnz	r0, 800574e <EncoderInit+0x2e>
		emmitSysError(WATCHER_ENC_FAULT);
		return HAL_ERROR;
	}
	AS5600Init_StatusTypedef status = AS5600_Init(&Encoder);
 800573e:	4809      	ldr	r0, [pc, #36]	@ (8005764 <EncoderInit+0x44>)
 8005740:	f7ff fe8a 	bl	8005458 <AS5600_Init>
	if(status == AS5600_INIT_OK) init_success = TRUE;
 8005744:	b940      	cbnz	r0, 8005758 <EncoderInit+0x38>
 8005746:	4b0a      	ldr	r3, [pc, #40]	@ (8005770 <EncoderInit+0x50>)
 8005748:	2201      	movs	r2, #1
 800574a:	701a      	strb	r2, [r3, #0]
		emmitSysError(WATCHER_ENC_FAULT);
		return HAL_ERROR;
	}

	return HAL_OK;
}
 800574c:	bd08      	pop	{r3, pc}
		emmitSysError(WATCHER_ENC_FAULT);
 800574e:	2001      	movs	r0, #1
 8005750:	f7fc f910 	bl	8001974 <emmitSysError>
		return HAL_ERROR;
 8005754:	2001      	movs	r0, #1
 8005756:	e7f9      	b.n	800574c <EncoderInit+0x2c>
		emmitSysError(WATCHER_ENC_FAULT);
 8005758:	2001      	movs	r0, #1
 800575a:	f7fc f90b 	bl	8001974 <emmitSysError>
		return HAL_ERROR;
 800575e:	2001      	movs	r0, #1
 8005760:	e7f4      	b.n	800574c <EncoderInit+0x2c>
 8005762:	bf00      	nop
 8005764:	200004e4 	.word	0x200004e4
 8005768:	20000430 	.word	0x20000430
 800576c:	40010c00 	.word	0x40010c00
 8005770:	200004e0 	.word	0x200004e0

08005774 <EncoderEnablePool>:
	if(status == HAL_OK){
		*res = result;
	}
}

int32_t EncoderEnablePool(){
 8005774:	b508      	push	{r3, lr}
	HAL_StatusTypeDef status = AS5600_GetRawAngle(&Encoder, &raw_buffer);
 8005776:	492d      	ldr	r1, [pc, #180]	@ (800582c <EncoderEnablePool+0xb8>)
 8005778:	482d      	ldr	r0, [pc, #180]	@ (8005830 <EncoderEnablePool+0xbc>)
 800577a:	f7ff fe3f 	bl	80053fc <AS5600_GetRawAngle>
	if(status != HAL_OK){
 800577e:	2800      	cmp	r0, #0
 8005780:	d144      	bne.n	800580c <EncoderEnablePool+0x98>
		emmitSysError(WATCHER_ENC_FAULT);
		return 0;
	}
	active_quadrant = -1;
 8005782:	4b2c      	ldr	r3, [pc, #176]	@ (8005834 <EncoderEnablePool+0xc0>)
 8005784:	22ff      	movs	r2, #255	@ 0xff
 8005786:	701a      	strb	r2, [r3, #0]

	if(raw_buffer >= 0 && raw_buffer <= 1024) active_quadrant = 1;
 8005788:	4b28      	ldr	r3, [pc, #160]	@ (800582c <EncoderEnablePool+0xb8>)
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005790:	d802      	bhi.n	8005798 <EncoderEnablePool+0x24>
 8005792:	4a28      	ldr	r2, [pc, #160]	@ (8005834 <EncoderEnablePool+0xc0>)
 8005794:	2101      	movs	r1, #1
 8005796:	7011      	strb	r1, [r2, #0]
	if(raw_buffer >= 1025 && raw_buffer <= 2048) active_quadrant = 2;
 8005798:	f2a3 4201 	subw	r2, r3, #1025	@ 0x401
 800579c:	b292      	uxth	r2, r2
 800579e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80057a2:	d202      	bcs.n	80057aa <EncoderEnablePool+0x36>
 80057a4:	4a23      	ldr	r2, [pc, #140]	@ (8005834 <EncoderEnablePool+0xc0>)
 80057a6:	2102      	movs	r1, #2
 80057a8:	7011      	strb	r1, [r2, #0]
	if(raw_buffer >= 2049 && raw_buffer <= 3072) active_quadrant = 3;
 80057aa:	f6a3 0201 	subw	r2, r3, #2049	@ 0x801
 80057ae:	b292      	uxth	r2, r2
 80057b0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80057b4:	d202      	bcs.n	80057bc <EncoderEnablePool+0x48>
 80057b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005834 <EncoderEnablePool+0xc0>)
 80057b8:	2103      	movs	r1, #3
 80057ba:	7011      	strb	r1, [r2, #0]
	if(raw_buffer >= 3073 && raw_buffer <= 4095) active_quadrant = 4;
 80057bc:	f6a3 4201 	subw	r2, r3, #3073	@ 0xc01
 80057c0:	b292      	uxth	r2, r2
 80057c2:	f240 31fe 	movw	r1, #1022	@ 0x3fe
 80057c6:	428a      	cmp	r2, r1
 80057c8:	d802      	bhi.n	80057d0 <EncoderEnablePool+0x5c>
 80057ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005834 <EncoderEnablePool+0xc0>)
 80057cc:	2104      	movs	r1, #4
 80057ce:	7011      	strb	r1, [r2, #0]

	if(last_quadrant == -1) last_quadrant = active_quadrant;
 80057d0:	4a19      	ldr	r2, [pc, #100]	@ (8005838 <EncoderEnablePool+0xc4>)
 80057d2:	f992 2000 	ldrsb.w	r2, [r2]
 80057d6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80057da:	d01c      	beq.n	8005816 <EncoderEnablePool+0xa2>
	int32_t delta = (int32_t)(raw_buffer - position_prev);
 80057dc:	4a17      	ldr	r2, [pc, #92]	@ (800583c <EncoderEnablePool+0xc8>)
 80057de:	8810      	ldrh	r0, [r2, #0]
 80057e0:	1a18      	subs	r0, r3, r0

	if(delta > 2048) {
 80057e2:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
 80057e6:	dd1b      	ble.n	8005820 <EncoderEnablePool+0xac>
		delta -= 4096;
 80057e8:	f5a0 5080 	sub.w	r0, r0, #4096	@ 0x1000
	} else if(delta < -2048) {
		delta += 4096;
	}

	accumulate_counter += delta;
 80057ec:	4a14      	ldr	r2, [pc, #80]	@ (8005840 <EncoderEnablePool+0xcc>)
 80057ee:	6811      	ldr	r1, [r2, #0]
 80057f0:	4408      	add	r0, r1
 80057f2:	6010      	str	r0, [r2, #0]

	elapsed_fall_f = FALSE;
 80057f4:	2200      	movs	r2, #0
 80057f6:	4913      	ldr	r1, [pc, #76]	@ (8005844 <EncoderEnablePool+0xd0>)
 80057f8:	700a      	strb	r2, [r1, #0]
	elapsed_rise_f = FALSE;
 80057fa:	4913      	ldr	r1, [pc, #76]	@ (8005848 <EncoderEnablePool+0xd4>)
 80057fc:	700a      	strb	r2, [r1, #0]
	position_prev = raw_buffer;
 80057fe:	4a0f      	ldr	r2, [pc, #60]	@ (800583c <EncoderEnablePool+0xc8>)
 8005800:	8013      	strh	r3, [r2, #0]
	last_quadrant = active_quadrant;
 8005802:	4b0c      	ldr	r3, [pc, #48]	@ (8005834 <EncoderEnablePool+0xc0>)
 8005804:	781a      	ldrb	r2, [r3, #0]
 8005806:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <EncoderEnablePool+0xc4>)
 8005808:	701a      	strb	r2, [r3, #0]

	return accumulate_counter;
}
 800580a:	bd08      	pop	{r3, pc}
		emmitSysError(WATCHER_ENC_FAULT);
 800580c:	2001      	movs	r0, #1
 800580e:	f7fc f8b1 	bl	8001974 <emmitSysError>
		return 0;
 8005812:	2000      	movs	r0, #0
 8005814:	e7f9      	b.n	800580a <EncoderEnablePool+0x96>
	if(last_quadrant == -1) last_quadrant = active_quadrant;
 8005816:	4a07      	ldr	r2, [pc, #28]	@ (8005834 <EncoderEnablePool+0xc0>)
 8005818:	7811      	ldrb	r1, [r2, #0]
 800581a:	4a07      	ldr	r2, [pc, #28]	@ (8005838 <EncoderEnablePool+0xc4>)
 800581c:	7011      	strb	r1, [r2, #0]
 800581e:	e7dd      	b.n	80057dc <EncoderEnablePool+0x68>
	} else if(delta < -2048) {
 8005820:	f510 6f00 	cmn.w	r0, #2048	@ 0x800
 8005824:	dae2      	bge.n	80057ec <EncoderEnablePool+0x78>
		delta += 4096;
 8005826:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 800582a:	e7df      	b.n	80057ec <EncoderEnablePool+0x78>
 800582c:	200004d8 	.word	0x200004d8
 8005830:	200004e4 	.word	0x200004e4
 8005834:	20000015 	.word	0x20000015
 8005838:	20000014 	.word	0x20000014
 800583c:	200004d6 	.word	0x200004d6
 8005840:	200004dc 	.word	0x200004dc
 8005844:	200004d5 	.word	0x200004d5
 8005848:	200004d4 	.word	0x200004d4

0800584c <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800584c:	2884      	cmp	r0, #132	@ 0x84
 800584e:	d001      	beq.n	8005854 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8005850:	3003      	adds	r0, #3
 8005852:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005854:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8005856:	4770      	bx	lr

08005858 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005858:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800585a:	f000 fa91 	bl	8005d80 <vTaskStartScheduler>
  
  return osOK;
}
 800585e:	2000      	movs	r0, #0
 8005860:	bd08      	pop	{r3, pc}

08005862 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005862:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005866:	b087      	sub	sp, #28
 8005868:	460e      	mov	r6, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800586a:	6944      	ldr	r4, [r0, #20]
 800586c:	b1c4      	cbz	r4, 80058a0 <osThreadCreate+0x3e>
 800586e:	6985      	ldr	r5, [r0, #24]
 8005870:	b1b5      	cbz	r5, 80058a0 <osThreadCreate+0x3e>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005872:	6847      	ldr	r7, [r0, #4]
 8005874:	f8d0 8000 	ldr.w	r8, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005878:	f8d0 9010 	ldr.w	r9, [r0, #16]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800587c:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8005880:	f7ff ffe4 	bl	800584c <makeFreeRtosPriority>
 8005884:	9502      	str	r5, [sp, #8]
 8005886:	9401      	str	r4, [sp, #4]
 8005888:	9000      	str	r0, [sp, #0]
 800588a:	4633      	mov	r3, r6
 800588c:	464a      	mov	r2, r9
 800588e:	4641      	mov	r1, r8
 8005890:	4638      	mov	r0, r7
 8005892:	f000 fa07 	bl	8005ca4 <xTaskCreateStatic>
 8005896:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005898:	9805      	ldr	r0, [sp, #20]
}
 800589a:	b007      	add	sp, #28
 800589c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058a0:	6844      	ldr	r4, [r0, #4]
 80058a2:	6805      	ldr	r5, [r0, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80058a4:	6907      	ldr	r7, [r0, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80058a6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80058aa:	f7ff ffcf 	bl	800584c <makeFreeRtosPriority>
 80058ae:	ab05      	add	r3, sp, #20
 80058b0:	9301      	str	r3, [sp, #4]
 80058b2:	9000      	str	r0, [sp, #0]
 80058b4:	4633      	mov	r3, r6
 80058b6:	b2ba      	uxth	r2, r7
 80058b8:	4629      	mov	r1, r5
 80058ba:	4620      	mov	r0, r4
 80058bc:	f000 fa2d 	bl	8005d1a <xTaskCreate>
 80058c0:	2801      	cmp	r0, #1
 80058c2:	d0e9      	beq.n	8005898 <osThreadCreate+0x36>
      return NULL;
 80058c4:	2000      	movs	r0, #0
 80058c6:	e7e8      	b.n	800589a <osThreadCreate+0x38>

080058c8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80058c8:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80058ca:	b900      	cbnz	r0, 80058ce <osDelay+0x6>
 80058cc:	2001      	movs	r0, #1
 80058ce:	f000 fba9 	bl	8006024 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80058d2:	2000      	movs	r0, #0
 80058d4:	bd08      	pop	{r3, pc}

080058d6 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058d6:	f100 0308 	add.w	r3, r0, #8
 80058da:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058dc:	f04f 32ff 	mov.w	r2, #4294967295
 80058e0:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058e2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058e4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058ea:	4770      	bx	lr

080058ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80058ec:	2300      	movs	r3, #0
 80058ee:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058f0:	4770      	bx	lr

080058f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80058f2:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058f4:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058fa:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058fc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058fe:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005900:	6803      	ldr	r3, [r0, #0]
 8005902:	3301      	adds	r3, #1
 8005904:	6003      	str	r3, [r0, #0]
}
 8005906:	4770      	bx	lr

08005908 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005908:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800590a:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800590c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005910:	d011      	beq.n	8005936 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005912:	f100 0308 	add.w	r3, r0, #8
 8005916:	461c      	mov	r4, r3
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	42aa      	cmp	r2, r5
 800591e:	d9fa      	bls.n	8005916 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005920:	6863      	ldr	r3, [r4, #4]
 8005922:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005924:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005926:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005928:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800592a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800592c:	6803      	ldr	r3, [r0, #0]
 800592e:	3301      	adds	r3, #1
 8005930:	6003      	str	r3, [r0, #0]
}
 8005932:	bc30      	pop	{r4, r5}
 8005934:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8005936:	6904      	ldr	r4, [r0, #16]
 8005938:	e7f2      	b.n	8005920 <vListInsert+0x18>

0800593a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800593a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800593c:	6841      	ldr	r1, [r0, #4]
 800593e:	6882      	ldr	r2, [r0, #8]
 8005940:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005942:	6841      	ldr	r1, [r0, #4]
 8005944:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	4282      	cmp	r2, r0
 800594a:	d006      	beq.n	800595a <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800594c:	2200      	movs	r2, #0
 800594e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	3a01      	subs	r2, #1
 8005954:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005956:	6818      	ldr	r0, [r3, #0]
}
 8005958:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800595a:	6882      	ldr	r2, [r0, #8]
 800595c:	605a      	str	r2, [r3, #4]
 800595e:	e7f5      	b.n	800594c <uxListRemove+0x12>

08005960 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005960:	4b08      	ldr	r3, [pc, #32]	@ (8005984 <prvResetNextTaskUnblockTime+0x24>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	b923      	cbnz	r3, 8005972 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005968:	4b07      	ldr	r3, [pc, #28]	@ (8005988 <prvResetNextTaskUnblockTime+0x28>)
 800596a:	f04f 32ff 	mov.w	r2, #4294967295
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005972:	4b04      	ldr	r3, [pc, #16]	@ (8005984 <prvResetNextTaskUnblockTime+0x24>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	4b02      	ldr	r3, [pc, #8]	@ (8005988 <prvResetNextTaskUnblockTime+0x28>)
 800597e:	601a      	str	r2, [r3, #0]
	}
}
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	2000056c 	.word	0x2000056c
 8005988:	20000504 	.word	0x20000504

0800598c <prvInitialiseNewTask>:
{
 800598c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005990:	4607      	mov	r7, r0
 8005992:	4698      	mov	r8, r3
 8005994:	9d08      	ldr	r5, [sp, #32]
 8005996:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 800599a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800599c:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800599e:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80059a2:	3a01      	subs	r2, #1
 80059a4:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059a8:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80059ac:	2900      	cmp	r1, #0
 80059ae:	d044      	beq.n	8005a3a <prvInitialiseNewTask+0xae>
 80059b0:	4608      	mov	r0, r1
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059b2:	f04f 0c00 	mov.w	ip, #0
 80059b6:	f1bc 0f0f 	cmp.w	ip, #15
 80059ba:	d809      	bhi.n	80059d0 <prvInitialiseNewTask+0x44>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059bc:	f810 200c 	ldrb.w	r2, [r0, ip]
 80059c0:	eb04 030c 	add.w	r3, r4, ip
 80059c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 80059c8:	b112      	cbz	r2, 80059d0 <prvInitialiseNewTask+0x44>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059ca:	f10c 0c01 	add.w	ip, ip, #1
 80059ce:	e7f2      	b.n	80059b6 <prvInitialiseNewTask+0x2a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059d0:	2300      	movs	r3, #0
 80059d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059d6:	2d06      	cmp	r5, #6
 80059d8:	d900      	bls.n	80059dc <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059da:	2506      	movs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80059dc:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80059de:	6465      	str	r5, [r4, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80059e0:	f04f 0a00 	mov.w	sl, #0
 80059e4:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059e8:	1d20      	adds	r0, r4, #4
 80059ea:	f7ff ff7f 	bl	80058ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059ee:	f104 0018 	add.w	r0, r4, #24
 80059f2:	f7ff ff7b 	bl	80058ec <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059f6:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f8:	f1c5 0507 	rsb	r5, r5, #7
 80059fc:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059fe:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8005a00:	f8c4 a098 	str.w	sl, [r4, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a04:	f884 a09c 	strb.w	sl, [r4, #156]	@ 0x9c
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a08:	224c      	movs	r2, #76	@ 0x4c
 8005a0a:	4651      	mov	r1, sl
 8005a0c:	18a0      	adds	r0, r4, r2
 8005a0e:	f001 f9a3 	bl	8006d58 <memset>
 8005a12:	4b0c      	ldr	r3, [pc, #48]	@ (8005a44 <prvInitialiseNewTask+0xb8>)
 8005a14:	6523      	str	r3, [r4, #80]	@ 0x50
 8005a16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a1a:	6562      	str	r2, [r4, #84]	@ 0x54
 8005a1c:	33d0      	adds	r3, #208	@ 0xd0
 8005a1e:	65a3      	str	r3, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a20:	4642      	mov	r2, r8
 8005a22:	4639      	mov	r1, r7
 8005a24:	4630      	mov	r0, r6
 8005a26:	f000 fc1b 	bl	8006260 <pxPortInitialiseStack>
 8005a2a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005a2c:	f1b9 0f00 	cmp.w	r9, #0
 8005a30:	d001      	beq.n	8005a36 <prvInitialiseNewTask+0xaa>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a32:	f8c9 4000 	str.w	r4, [r9]
}
 8005a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8005a40:	e7c9      	b.n	80059d6 <prvInitialiseNewTask+0x4a>
 8005a42:	bf00      	nop
 8005a44:	20001290 	.word	0x20001290

08005a48 <prvInitialiseTaskLists>:
{
 8005a48:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a4a:	2400      	movs	r4, #0
 8005a4c:	e007      	b.n	8005a5e <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a4e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8005a52:	0093      	lsls	r3, r2, #2
 8005a54:	480e      	ldr	r0, [pc, #56]	@ (8005a90 <prvInitialiseTaskLists+0x48>)
 8005a56:	4418      	add	r0, r3
 8005a58:	f7ff ff3d 	bl	80058d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a5c:	3401      	adds	r4, #1
 8005a5e:	2c06      	cmp	r4, #6
 8005a60:	d9f5      	bls.n	8005a4e <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 8005a62:	4d0c      	ldr	r5, [pc, #48]	@ (8005a94 <prvInitialiseTaskLists+0x4c>)
 8005a64:	4628      	mov	r0, r5
 8005a66:	f7ff ff36 	bl	80058d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a6a:	4c0b      	ldr	r4, [pc, #44]	@ (8005a98 <prvInitialiseTaskLists+0x50>)
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f7ff ff32 	bl	80058d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a72:	480a      	ldr	r0, [pc, #40]	@ (8005a9c <prvInitialiseTaskLists+0x54>)
 8005a74:	f7ff ff2f 	bl	80058d6 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8005a78:	4809      	ldr	r0, [pc, #36]	@ (8005aa0 <prvInitialiseTaskLists+0x58>)
 8005a7a:	f7ff ff2c 	bl	80058d6 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005a7e:	4809      	ldr	r0, [pc, #36]	@ (8005aa4 <prvInitialiseTaskLists+0x5c>)
 8005a80:	f7ff ff29 	bl	80058d6 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a84:	4b08      	ldr	r3, [pc, #32]	@ (8005aa8 <prvInitialiseTaskLists+0x60>)
 8005a86:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a88:	4b08      	ldr	r3, [pc, #32]	@ (8005aac <prvInitialiseTaskLists+0x64>)
 8005a8a:	601c      	str	r4, [r3, #0]
}
 8005a8c:	bd38      	pop	{r3, r4, r5, pc}
 8005a8e:	bf00      	nop
 8005a90:	20000598 	.word	0x20000598
 8005a94:	20000584 	.word	0x20000584
 8005a98:	20000570 	.word	0x20000570
 8005a9c:	20000554 	.word	0x20000554
 8005aa0:	20000540 	.word	0x20000540
 8005aa4:	20000528 	.word	0x20000528
 8005aa8:	2000056c 	.word	0x2000056c
 8005aac:	20000568 	.word	0x20000568

08005ab0 <prvAddNewTaskToReadyList>:
{
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005ab4:	f000 fbfe 	bl	80062b4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005ab8:	4a21      	ldr	r2, [pc, #132]	@ (8005b40 <prvAddNewTaskToReadyList+0x90>)
 8005aba:	6813      	ldr	r3, [r2, #0]
 8005abc:	3301      	adds	r3, #1
 8005abe:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ac0:	4b20      	ldr	r3, [pc, #128]	@ (8005b44 <prvAddNewTaskToReadyList+0x94>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	b15b      	cbz	r3, 8005ade <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 8005ac6:	4b20      	ldr	r3, [pc, #128]	@ (8005b48 <prvAddNewTaskToReadyList+0x98>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	b96b      	cbnz	r3, 8005ae8 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005acc:	4b1d      	ldr	r3, [pc, #116]	@ (8005b44 <prvAddNewTaskToReadyList+0x94>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d807      	bhi.n	8005ae8 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 8005ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8005b44 <prvAddNewTaskToReadyList+0x94>)
 8005ada:	601c      	str	r4, [r3, #0]
 8005adc:	e004      	b.n	8005ae8 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 8005ade:	4b19      	ldr	r3, [pc, #100]	@ (8005b44 <prvAddNewTaskToReadyList+0x94>)
 8005ae0:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ae2:	6813      	ldr	r3, [r2, #0]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d028      	beq.n	8005b3a <prvAddNewTaskToReadyList+0x8a>
		uxTaskNumber++;
 8005ae8:	4a18      	ldr	r2, [pc, #96]	@ (8005b4c <prvAddNewTaskToReadyList+0x9c>)
 8005aea:	6813      	ldr	r3, [r2, #0]
 8005aec:	3301      	adds	r3, #1
 8005aee:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005af0:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005af2:	2301      	movs	r3, #1
 8005af4:	4083      	lsls	r3, r0
 8005af6:	4a16      	ldr	r2, [pc, #88]	@ (8005b50 <prvAddNewTaskToReadyList+0xa0>)
 8005af8:	6811      	ldr	r1, [r2, #0]
 8005afa:	430b      	orrs	r3, r1
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005b02:	1d21      	adds	r1, r4, #4
 8005b04:	4b13      	ldr	r3, [pc, #76]	@ (8005b54 <prvAddNewTaskToReadyList+0xa4>)
 8005b06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005b0a:	f7ff fef2 	bl	80058f2 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005b0e:	f000 fbf3 	bl	80062f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005b12:	4b0d      	ldr	r3, [pc, #52]	@ (8005b48 <prvAddNewTaskToReadyList+0x98>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	b17b      	cbz	r3, 8005b38 <prvAddNewTaskToReadyList+0x88>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b18:	4b0a      	ldr	r3, [pc, #40]	@ (8005b44 <prvAddNewTaskToReadyList+0x94>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b1e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d209      	bcs.n	8005b38 <prvAddNewTaskToReadyList+0x88>
			taskYIELD_IF_USING_PREEMPTION();
 8005b24:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005b28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b2c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	f3bf 8f6f 	isb	sy
}
 8005b38:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 8005b3a:	f7ff ff85 	bl	8005a48 <prvInitialiseTaskLists>
 8005b3e:	e7d3      	b.n	8005ae8 <prvAddNewTaskToReadyList+0x38>
 8005b40:	20000524 	.word	0x20000524
 8005b44:	20000624 	.word	0x20000624
 8005b48:	20000518 	.word	0x20000518
 8005b4c:	20000508 	.word	0x20000508
 8005b50:	2000051c 	.word	0x2000051c
 8005b54:	20000598 	.word	0x20000598

08005b58 <prvDeleteTCB>:
	{
 8005b58:	b510      	push	{r4, lr}
 8005b5a:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b5c:	304c      	adds	r0, #76	@ 0x4c
 8005b5e:	f001 f903 	bl	8006d68 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b62:	f894 309d 	ldrb.w	r3, [r4, #157]	@ 0x9d
 8005b66:	b163      	cbz	r3, 8005b82 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d011      	beq.n	8005b90 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	d00e      	beq.n	8005b8e <prvDeleteTCB+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	e7fe      	b.n	8005b80 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8005b82:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005b84:	f000 fd64 	bl	8006650 <vPortFree>
				vPortFree( pxTCB );
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f000 fd61 	bl	8006650 <vPortFree>
	}
 8005b8e:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8005b90:	4620      	mov	r0, r4
 8005b92:	f000 fd5d 	bl	8006650 <vPortFree>
 8005b96:	e7fa      	b.n	8005b8e <prvDeleteTCB+0x36>

08005b98 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b98:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd8 <prvCheckTasksWaitingTermination+0x40>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	b1d3      	cbz	r3, 8005bd4 <prvCheckTasksWaitingTermination+0x3c>
{
 8005b9e:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 8005ba0:	f000 fb88 	bl	80062b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8005bdc <prvCheckTasksWaitingTermination+0x44>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005baa:	1d20      	adds	r0, r4, #4
 8005bac:	f7ff fec5 	bl	800593a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bb0:	4a0b      	ldr	r2, [pc, #44]	@ (8005be0 <prvCheckTasksWaitingTermination+0x48>)
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bb8:	4a07      	ldr	r2, [pc, #28]	@ (8005bd8 <prvCheckTasksWaitingTermination+0x40>)
 8005bba:	6813      	ldr	r3, [r2, #0]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 8005bc0:	f000 fb9a 	bl	80062f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f7ff ffc7 	bl	8005b58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bca:	4b03      	ldr	r3, [pc, #12]	@ (8005bd8 <prvCheckTasksWaitingTermination+0x40>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e6      	bne.n	8005ba0 <prvCheckTasksWaitingTermination+0x8>
}
 8005bd2:	bd10      	pop	{r4, pc}
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	2000053c 	.word	0x2000053c
 8005bdc:	20000540 	.word	0x20000540
 8005be0:	20000524 	.word	0x20000524

08005be4 <prvIdleTask>:
{
 8005be4:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 8005be6:	f7ff ffd7 	bl	8005b98 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005bea:	4b07      	ldr	r3, [pc, #28]	@ (8005c08 <prvIdleTask+0x24>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d9f9      	bls.n	8005be6 <prvIdleTask+0x2>
				taskYIELD();
 8005bf2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005bf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bfa:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	e7ee      	b.n	8005be6 <prvIdleTask+0x2>
 8005c08:	20000598 	.word	0x20000598

08005c0c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	4604      	mov	r4, r0
 8005c10:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c12:	4b1d      	ldr	r3, [pc, #116]	@ (8005c88 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005c14:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c16:	4b1d      	ldr	r3, [pc, #116]	@ (8005c8c <prvAddCurrentTaskToDelayedList+0x80>)
 8005c18:	6818      	ldr	r0, [r3, #0]
 8005c1a:	3004      	adds	r0, #4
 8005c1c:	f7ff fe8d 	bl	800593a <uxListRemove>
 8005c20:	b948      	cbnz	r0, 8005c36 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005c22:	4b1a      	ldr	r3, [pc, #104]	@ (8005c8c <prvAddCurrentTaskToDelayedList+0x80>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c28:	2201      	movs	r2, #1
 8005c2a:	409a      	lsls	r2, r3
 8005c2c:	4918      	ldr	r1, [pc, #96]	@ (8005c90 <prvAddCurrentTaskToDelayedList+0x84>)
 8005c2e:	680b      	ldr	r3, [r1, #0]
 8005c30:	ea23 0302 	bic.w	r3, r3, r2
 8005c34:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c36:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005c3a:	d00d      	beq.n	8005c58 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c3c:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c3e:	4b13      	ldr	r3, [pc, #76]	@ (8005c8c <prvAddCurrentTaskToDelayedList+0x80>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005c44:	42a6      	cmp	r6, r4
 8005c46:	d910      	bls.n	8005c6a <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c48:	4b12      	ldr	r3, [pc, #72]	@ (8005c94 <prvAddCurrentTaskToDelayedList+0x88>)
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005c8c <prvAddCurrentTaskToDelayedList+0x80>)
 8005c4e:	6819      	ldr	r1, [r3, #0]
 8005c50:	3104      	adds	r1, #4
 8005c52:	f7ff fe59 	bl	8005908 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c56:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c58:	2d00      	cmp	r5, #0
 8005c5a:	d0ef      	beq.n	8005c3c <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c8c <prvAddCurrentTaskToDelayedList+0x80>)
 8005c5e:	6819      	ldr	r1, [r3, #0]
 8005c60:	3104      	adds	r1, #4
 8005c62:	480d      	ldr	r0, [pc, #52]	@ (8005c98 <prvAddCurrentTaskToDelayedList+0x8c>)
 8005c64:	f7ff fe45 	bl	80058f2 <vListInsertEnd>
 8005c68:	e7f5      	b.n	8005c56 <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8005c9c <prvAddCurrentTaskToDelayedList+0x90>)
 8005c6c:	6818      	ldr	r0, [r3, #0]
 8005c6e:	4b07      	ldr	r3, [pc, #28]	@ (8005c8c <prvAddCurrentTaskToDelayedList+0x80>)
 8005c70:	6819      	ldr	r1, [r3, #0]
 8005c72:	3104      	adds	r1, #4
 8005c74:	f7ff fe48 	bl	8005908 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c78:	4b09      	ldr	r3, [pc, #36]	@ (8005ca0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	42a3      	cmp	r3, r4
 8005c7e:	d9ea      	bls.n	8005c56 <prvAddCurrentTaskToDelayedList+0x4a>
					xNextTaskUnblockTime = xTimeToWake;
 8005c80:	4b07      	ldr	r3, [pc, #28]	@ (8005ca0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c82:	601c      	str	r4, [r3, #0]
}
 8005c84:	e7e7      	b.n	8005c56 <prvAddCurrentTaskToDelayedList+0x4a>
 8005c86:	bf00      	nop
 8005c88:	20000520 	.word	0x20000520
 8005c8c:	20000624 	.word	0x20000624
 8005c90:	2000051c 	.word	0x2000051c
 8005c94:	20000568 	.word	0x20000568
 8005c98:	20000528 	.word	0x20000528
 8005c9c:	2000056c 	.word	0x2000056c
 8005ca0:	20000504 	.word	0x20000504

08005ca4 <xTaskCreateStatic>:
	{
 8005ca4:	b530      	push	{r4, r5, lr}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8005caa:	b17c      	cbz	r4, 8005ccc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005cac:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005cae:	b1b5      	cbz	r5, 8005cde <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cb0:	25a0      	movs	r5, #160	@ 0xa0
 8005cb2:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cb4:	9d04      	ldr	r5, [sp, #16]
 8005cb6:	2da0      	cmp	r5, #160	@ 0xa0
 8005cb8:	d01a      	beq.n	8005cf0 <xTaskCreateStatic+0x4c>
 8005cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	e7fe      	b.n	8005cca <xTaskCreateStatic+0x26>
 8005ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8005cdc:	e7fe      	b.n	8005cdc <xTaskCreateStatic+0x38>
 8005cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8005cee:	e7fe      	b.n	8005cee <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005cf0:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cf2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005cf4:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005cf6:	2402      	movs	r4, #2
 8005cf8:	f885 409d 	strb.w	r4, [r5, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005cfc:	2400      	movs	r4, #0
 8005cfe:	9403      	str	r4, [sp, #12]
 8005d00:	9502      	str	r5, [sp, #8]
 8005d02:	ac05      	add	r4, sp, #20
 8005d04:	9401      	str	r4, [sp, #4]
 8005d06:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005d08:	9400      	str	r4, [sp, #0]
 8005d0a:	f7ff fe3f 	bl	800598c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d0e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005d10:	f7ff fece 	bl	8005ab0 <prvAddNewTaskToReadyList>
	}
 8005d14:	9805      	ldr	r0, [sp, #20]
 8005d16:	b007      	add	sp, #28
 8005d18:	bd30      	pop	{r4, r5, pc}

08005d1a <xTaskCreate>:
	{
 8005d1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	4607      	mov	r7, r0
 8005d22:	4688      	mov	r8, r1
 8005d24:	4614      	mov	r4, r2
 8005d26:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d28:	0090      	lsls	r0, r2, #2
 8005d2a:	f000 fc0f 	bl	800654c <pvPortMalloc>
			if( pxStack != NULL )
 8005d2e:	b308      	cbz	r0, 8005d74 <xTaskCreate+0x5a>
 8005d30:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d32:	20a0      	movs	r0, #160	@ 0xa0
 8005d34:	f000 fc0a 	bl	800654c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005d38:	4605      	mov	r5, r0
 8005d3a:	b1a8      	cbz	r0, 8005d68 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8005d3c:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d40:	2300      	movs	r3, #0
 8005d42:	f880 309d 	strb.w	r3, [r0, #157]	@ 0x9d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d46:	9303      	str	r3, [sp, #12]
 8005d48:	9002      	str	r0, [sp, #8]
 8005d4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	4633      	mov	r3, r6
 8005d54:	4622      	mov	r2, r4
 8005d56:	4641      	mov	r1, r8
 8005d58:	4638      	mov	r0, r7
 8005d5a:	f7ff fe17 	bl	800598c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f7ff fea6 	bl	8005ab0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d64:	2001      	movs	r0, #1
 8005d66:	e007      	b.n	8005d78 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8005d68:	4648      	mov	r0, r9
 8005d6a:	f000 fc71 	bl	8006650 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d72:	e001      	b.n	8005d78 <xTaskCreate+0x5e>
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8005d78:	b005      	add	sp, #20
 8005d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08005d80 <vTaskStartScheduler>:
{
 8005d80:	b510      	push	{r4, lr}
 8005d82:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d84:	2400      	movs	r4, #0
 8005d86:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d88:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d8a:	aa07      	add	r2, sp, #28
 8005d8c:	a906      	add	r1, sp, #24
 8005d8e:	a805      	add	r0, sp, #20
 8005d90:	f7fb f98e 	bl	80010b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d94:	9b05      	ldr	r3, [sp, #20]
 8005d96:	9302      	str	r3, [sp, #8]
 8005d98:	9b06      	ldr	r3, [sp, #24]
 8005d9a:	9301      	str	r3, [sp, #4]
 8005d9c:	9400      	str	r4, [sp, #0]
 8005d9e:	4623      	mov	r3, r4
 8005da0:	9a07      	ldr	r2, [sp, #28]
 8005da2:	4910      	ldr	r1, [pc, #64]	@ (8005de4 <vTaskStartScheduler+0x64>)
 8005da4:	4810      	ldr	r0, [pc, #64]	@ (8005de8 <vTaskStartScheduler+0x68>)
 8005da6:	f7ff ff7d 	bl	8005ca4 <xTaskCreateStatic>
 8005daa:	4b10      	ldr	r3, [pc, #64]	@ (8005dec <vTaskStartScheduler+0x6c>)
 8005dac:	6018      	str	r0, [r3, #0]
		if( xIdleTaskHandle != NULL )
 8005dae:	b1b8      	cbz	r0, 8005de0 <vTaskStartScheduler+0x60>
 8005db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005df0 <vTaskStartScheduler+0x70>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	334c      	adds	r3, #76	@ 0x4c
 8005dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8005df4 <vTaskStartScheduler+0x74>)
 8005dc8:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8005dca:	4b0b      	ldr	r3, [pc, #44]	@ (8005df8 <vTaskStartScheduler+0x78>)
 8005dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dfc <vTaskStartScheduler+0x7c>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005dd8:	4b09      	ldr	r3, [pc, #36]	@ (8005e00 <vTaskStartScheduler+0x80>)
 8005dda:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005ddc:	f000 faf4 	bl	80063c8 <xPortStartScheduler>
}
 8005de0:	b008      	add	sp, #32
 8005de2:	bd10      	pop	{r4, pc}
 8005de4:	08007e9c 	.word	0x08007e9c
 8005de8:	08005be5 	.word	0x08005be5
 8005dec:	20000500 	.word	0x20000500
 8005df0:	20000624 	.word	0x20000624
 8005df4:	20000020 	.word	0x20000020
 8005df8:	20000504 	.word	0x20000504
 8005dfc:	20000518 	.word	0x20000518
 8005e00:	20000520 	.word	0x20000520

08005e04 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005e04:	4a02      	ldr	r2, [pc, #8]	@ (8005e10 <vTaskSuspendAll+0xc>)
 8005e06:	6813      	ldr	r3, [r2, #0]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	6013      	str	r3, [r2, #0]
}
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	200004fc 	.word	0x200004fc

08005e14 <xTaskIncrementTick>:
{
 8005e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e16:	4b3a      	ldr	r3, [pc, #232]	@ (8005f00 <xTaskIncrementTick+0xec>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d169      	bne.n	8005ef2 <xTaskIncrementTick+0xde>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e1e:	4b39      	ldr	r3, [pc, #228]	@ (8005f04 <xTaskIncrementTick+0xf0>)
 8005e20:	681d      	ldr	r5, [r3, #0]
 8005e22:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8005e24:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e26:	b9c5      	cbnz	r5, 8005e5a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8005e28:	4b37      	ldr	r3, [pc, #220]	@ (8005f08 <xTaskIncrementTick+0xf4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	b143      	cbz	r3, 8005e42 <xTaskIncrementTick+0x2e>
 8005e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	e7fe      	b.n	8005e40 <xTaskIncrementTick+0x2c>
 8005e42:	4a31      	ldr	r2, [pc, #196]	@ (8005f08 <xTaskIncrementTick+0xf4>)
 8005e44:	6811      	ldr	r1, [r2, #0]
 8005e46:	4b31      	ldr	r3, [pc, #196]	@ (8005f0c <xTaskIncrementTick+0xf8>)
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	6010      	str	r0, [r2, #0]
 8005e4c:	6019      	str	r1, [r3, #0]
 8005e4e:	4a30      	ldr	r2, [pc, #192]	@ (8005f10 <xTaskIncrementTick+0xfc>)
 8005e50:	6813      	ldr	r3, [r2, #0]
 8005e52:	3301      	adds	r3, #1
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	f7ff fd83 	bl	8005960 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8005f14 <xTaskIncrementTick+0x100>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	42ab      	cmp	r3, r5
 8005e60:	d93d      	bls.n	8005ede <xTaskIncrementTick+0xca>
BaseType_t xSwitchRequired = pdFALSE;
 8005e62:	2700      	movs	r7, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e64:	4b2c      	ldr	r3, [pc, #176]	@ (8005f18 <xTaskIncrementTick+0x104>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e6a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e6e:	009a      	lsls	r2, r3, #2
 8005e70:	4b2a      	ldr	r3, [pc, #168]	@ (8005f1c <xTaskIncrementTick+0x108>)
 8005e72:	589b      	ldr	r3, [r3, r2]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d900      	bls.n	8005e7a <xTaskIncrementTick+0x66>
				xSwitchRequired = pdTRUE;
 8005e78:	2701      	movs	r7, #1
			if( xYieldPending != pdFALSE )
 8005e7a:	4b29      	ldr	r3, [pc, #164]	@ (8005f20 <xTaskIncrementTick+0x10c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d03c      	beq.n	8005efc <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 8005e82:	2701      	movs	r7, #1
	return xSwitchRequired;
 8005e84:	e03a      	b.n	8005efc <xTaskIncrementTick+0xe8>
							xSwitchRequired = pdTRUE;
 8005e86:	2701      	movs	r7, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e88:	4b1f      	ldr	r3, [pc, #124]	@ (8005f08 <xTaskIncrementTick+0xf4>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	b343      	cbz	r3, 8005ee2 <xTaskIncrementTick+0xce>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e90:	4b1d      	ldr	r3, [pc, #116]	@ (8005f08 <xTaskIncrementTick+0xf4>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e98:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8005e9a:	429d      	cmp	r5, r3
 8005e9c:	d326      	bcc.n	8005eec <xTaskIncrementTick+0xd8>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e9e:	1d26      	adds	r6, r4, #4
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	f7ff fd4a 	bl	800593a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ea6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005ea8:	b11b      	cbz	r3, 8005eb2 <xTaskIncrementTick+0x9e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005eaa:	f104 0018 	add.w	r0, r4, #24
 8005eae:	f7ff fd44 	bl	800593a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005eb2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	409a      	lsls	r2, r3
 8005eb8:	491a      	ldr	r1, [pc, #104]	@ (8005f24 <xTaskIncrementTick+0x110>)
 8005eba:	6808      	ldr	r0, [r1, #0]
 8005ebc:	4302      	orrs	r2, r0
 8005ebe:	600a      	str	r2, [r1, #0]
 8005ec0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005ec4:	009a      	lsls	r2, r3, #2
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4814      	ldr	r0, [pc, #80]	@ (8005f1c <xTaskIncrementTick+0x108>)
 8005eca:	4410      	add	r0, r2
 8005ecc:	f7ff fd11 	bl	80058f2 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ed0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005ed2:	4b11      	ldr	r3, [pc, #68]	@ (8005f18 <xTaskIncrementTick+0x104>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d2d4      	bcs.n	8005e86 <xTaskIncrementTick+0x72>
 8005edc:	e7d4      	b.n	8005e88 <xTaskIncrementTick+0x74>
BaseType_t xSwitchRequired = pdFALSE;
 8005ede:	2700      	movs	r7, #0
 8005ee0:	e7d2      	b.n	8005e88 <xTaskIncrementTick+0x74>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8005f14 <xTaskIncrementTick+0x100>)
 8005ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee8:	601a      	str	r2, [r3, #0]
					break;
 8005eea:	e7bb      	b.n	8005e64 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 8005eec:	4a09      	ldr	r2, [pc, #36]	@ (8005f14 <xTaskIncrementTick+0x100>)
 8005eee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ef0:	e7b8      	b.n	8005e64 <xTaskIncrementTick+0x50>
		++xPendedTicks;
 8005ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8005f28 <xTaskIncrementTick+0x114>)
 8005ef4:	6813      	ldr	r3, [r2, #0]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8005efa:	2700      	movs	r7, #0
}
 8005efc:	4638      	mov	r0, r7
 8005efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f00:	200004fc 	.word	0x200004fc
 8005f04:	20000520 	.word	0x20000520
 8005f08:	2000056c 	.word	0x2000056c
 8005f0c:	20000568 	.word	0x20000568
 8005f10:	2000050c 	.word	0x2000050c
 8005f14:	20000504 	.word	0x20000504
 8005f18:	20000624 	.word	0x20000624
 8005f1c:	20000598 	.word	0x20000598
 8005f20:	20000510 	.word	0x20000510
 8005f24:	2000051c 	.word	0x2000051c
 8005f28:	20000514 	.word	0x20000514

08005f2c <xTaskResumeAll>:
{
 8005f2c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 8005f2e:	4b35      	ldr	r3, [pc, #212]	@ (8006004 <xTaskResumeAll+0xd8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	b943      	cbnz	r3, 8005f46 <xTaskResumeAll+0x1a>
 8005f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	e7fe      	b.n	8005f44 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 8005f46:	f000 f9b5 	bl	80062b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005f4a:	4b2e      	ldr	r3, [pc, #184]	@ (8006004 <xTaskResumeAll+0xd8>)
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	3a01      	subs	r2, #1
 8005f50:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d14f      	bne.n	8005ff8 <xTaskResumeAll+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f58:	4b2b      	ldr	r3, [pc, #172]	@ (8006008 <xTaskResumeAll+0xdc>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	b90b      	cbnz	r3, 8005f62 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8005f5e:	2400      	movs	r4, #0
 8005f60:	e04b      	b.n	8005ffa <xTaskResumeAll+0xce>
TCB_t *pxTCB = NULL;
 8005f62:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f64:	4b29      	ldr	r3, [pc, #164]	@ (800600c <xTaskResumeAll+0xe0>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	b31b      	cbz	r3, 8005fb2 <xTaskResumeAll+0x86>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f6a:	4b28      	ldr	r3, [pc, #160]	@ (800600c <xTaskResumeAll+0xe0>)
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f70:	f104 0018 	add.w	r0, r4, #24
 8005f74:	f7ff fce1 	bl	800593a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f78:	1d25      	adds	r5, r4, #4
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	f7ff fcdd 	bl	800593a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f80:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005f82:	2301      	movs	r3, #1
 8005f84:	4083      	lsls	r3, r0
 8005f86:	4a22      	ldr	r2, [pc, #136]	@ (8006010 <xTaskResumeAll+0xe4>)
 8005f88:	6811      	ldr	r1, [r2, #0]
 8005f8a:	430b      	orrs	r3, r1
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005f92:	4629      	mov	r1, r5
 8005f94:	4b1f      	ldr	r3, [pc, #124]	@ (8006014 <xTaskResumeAll+0xe8>)
 8005f96:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005f9a:	f7ff fcaa 	bl	80058f2 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f9e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8006018 <xTaskResumeAll+0xec>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d3dc      	bcc.n	8005f64 <xTaskResumeAll+0x38>
						xYieldPending = pdTRUE;
 8005faa:	4b1c      	ldr	r3, [pc, #112]	@ (800601c <xTaskResumeAll+0xf0>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	e7d8      	b.n	8005f64 <xTaskResumeAll+0x38>
				if( pxTCB != NULL )
 8005fb2:	b10c      	cbz	r4, 8005fb8 <xTaskResumeAll+0x8c>
					prvResetNextTaskUnblockTime();
 8005fb4:	f7ff fcd4 	bl	8005960 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005fb8:	4b19      	ldr	r3, [pc, #100]	@ (8006020 <xTaskResumeAll+0xf4>)
 8005fba:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005fbc:	b984      	cbnz	r4, 8005fe0 <xTaskResumeAll+0xb4>
				if( xYieldPending != pdFALSE )
 8005fbe:	4b17      	ldr	r3, [pc, #92]	@ (800601c <xTaskResumeAll+0xf0>)
 8005fc0:	681c      	ldr	r4, [r3, #0]
 8005fc2:	b1d4      	cbz	r4, 8005ffa <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 8005fc4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005fc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fcc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005fd8:	2401      	movs	r4, #1
 8005fda:	e00e      	b.n	8005ffa <xTaskResumeAll+0xce>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005fdc:	3c01      	subs	r4, #1
 8005fde:	d007      	beq.n	8005ff0 <xTaskResumeAll+0xc4>
							if( xTaskIncrementTick() != pdFALSE )
 8005fe0:	f7ff ff18 	bl	8005e14 <xTaskIncrementTick>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d0f9      	beq.n	8005fdc <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 8005fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800601c <xTaskResumeAll+0xf0>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	e7f5      	b.n	8005fdc <xTaskResumeAll+0xb0>
						xPendedTicks = 0;
 8005ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8006020 <xTaskResumeAll+0xf4>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	e7e2      	b.n	8005fbe <xTaskResumeAll+0x92>
BaseType_t xAlreadyYielded = pdFALSE;
 8005ff8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005ffa:	f000 f97d 	bl	80062f8 <vPortExitCritical>
}
 8005ffe:	4620      	mov	r0, r4
 8006000:	bd38      	pop	{r3, r4, r5, pc}
 8006002:	bf00      	nop
 8006004:	200004fc 	.word	0x200004fc
 8006008:	20000524 	.word	0x20000524
 800600c:	20000554 	.word	0x20000554
 8006010:	2000051c 	.word	0x2000051c
 8006014:	20000598 	.word	0x20000598
 8006018:	20000624 	.word	0x20000624
 800601c:	20000510 	.word	0x20000510
 8006020:	20000514 	.word	0x20000514

08006024 <vTaskDelay>:
	{
 8006024:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006026:	b1a8      	cbz	r0, 8006054 <vTaskDelay+0x30>
 8006028:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800602a:	4b10      	ldr	r3, [pc, #64]	@ (800606c <vTaskDelay+0x48>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	b143      	cbz	r3, 8006042 <vTaskDelay+0x1e>
 8006030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	e7fe      	b.n	8006040 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006042:	f7ff fedf 	bl	8005e04 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006046:	2100      	movs	r1, #0
 8006048:	4620      	mov	r0, r4
 800604a:	f7ff fddf 	bl	8005c0c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800604e:	f7ff ff6d 	bl	8005f2c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006052:	b948      	cbnz	r0, 8006068 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8006054:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006058:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800605c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	f3bf 8f6f 	isb	sy
	}
 8006068:	bd10      	pop	{r4, pc}
 800606a:	bf00      	nop
 800606c:	200004fc 	.word	0x200004fc

08006070 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006070:	4b22      	ldr	r3, [pc, #136]	@ (80060fc <vTaskSwitchContext+0x8c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	b11b      	cbz	r3, 800607e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006076:	4b22      	ldr	r3, [pc, #136]	@ (8006100 <vTaskSwitchContext+0x90>)
 8006078:	2201      	movs	r2, #1
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800607e:	4b20      	ldr	r3, [pc, #128]	@ (8006100 <vTaskSwitchContext+0x90>)
 8006080:	2200      	movs	r2, #0
 8006082:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006084:	4b1f      	ldr	r3, [pc, #124]	@ (8006104 <vTaskSwitchContext+0x94>)
 8006086:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006088:	fab3 f383 	clz	r3, r3
 800608c:	b2db      	uxtb	r3, r3
 800608e:	f1c3 031f 	rsb	r3, r3, #31
 8006092:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006096:	008a      	lsls	r2, r1, #2
 8006098:	491b      	ldr	r1, [pc, #108]	@ (8006108 <vTaskSwitchContext+0x98>)
 800609a:	588a      	ldr	r2, [r1, r2]
 800609c:	b942      	cbnz	r2, 80060b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	e7fe      	b.n	80060ae <vTaskSwitchContext+0x3e>
 80060b0:	4815      	ldr	r0, [pc, #84]	@ (8006108 <vTaskSwitchContext+0x98>)
 80060b2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80060b6:	008a      	lsls	r2, r1, #2
 80060b8:	4402      	add	r2, r0
 80060ba:	6851      	ldr	r1, [r2, #4]
 80060bc:	6849      	ldr	r1, [r1, #4]
 80060be:	6051      	str	r1, [r2, #4]
 80060c0:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80060c4:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80060c8:	3208      	adds	r2, #8
 80060ca:	4402      	add	r2, r0
 80060cc:	4291      	cmp	r1, r2
 80060ce:	d00d      	beq.n	80060ec <vTaskSwitchContext+0x7c>
 80060d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80060d4:	009a      	lsls	r2, r3, #2
 80060d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006108 <vTaskSwitchContext+0x98>)
 80060d8:	4413      	add	r3, r2
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	4b0b      	ldr	r3, [pc, #44]	@ (800610c <vTaskSwitchContext+0x9c>)
 80060e0:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	334c      	adds	r3, #76	@ 0x4c
 80060e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006110 <vTaskSwitchContext+0xa0>)
 80060e8:	6013      	str	r3, [r2, #0]
}
 80060ea:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ec:	6848      	ldr	r0, [r1, #4]
 80060ee:	4662      	mov	r2, ip
 80060f0:	0091      	lsls	r1, r2, #2
 80060f2:	4a05      	ldr	r2, [pc, #20]	@ (8006108 <vTaskSwitchContext+0x98>)
 80060f4:	440a      	add	r2, r1
 80060f6:	6050      	str	r0, [r2, #4]
 80060f8:	e7ea      	b.n	80060d0 <vTaskSwitchContext+0x60>
 80060fa:	bf00      	nop
 80060fc:	200004fc 	.word	0x200004fc
 8006100:	20000510 	.word	0x20000510
 8006104:	2000051c 	.word	0x2000051c
 8006108:	20000598 	.word	0x20000598
 800610c:	20000624 	.word	0x20000624
 8006110:	20000020 	.word	0x20000020

08006114 <vTaskSuspend>:
	{
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8006118:	f000 f8cc 	bl	80062b4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800611c:	b364      	cbz	r4, 8006178 <vTaskSuspend+0x64>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800611e:	1d25      	adds	r5, r4, #4
 8006120:	4628      	mov	r0, r5
 8006122:	f7ff fc0a 	bl	800593a <uxListRemove>
 8006126:	b970      	cbnz	r0, 8006146 <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006128:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800612a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	492c      	ldr	r1, [pc, #176]	@ (80061e4 <vTaskSuspend+0xd0>)
 8006132:	58cb      	ldr	r3, [r1, r3]
 8006134:	b93b      	cbnz	r3, 8006146 <vTaskSuspend+0x32>
 8006136:	2301      	movs	r3, #1
 8006138:	fa03 f202 	lsl.w	r2, r3, r2
 800613c:	492a      	ldr	r1, [pc, #168]	@ (80061e8 <vTaskSuspend+0xd4>)
 800613e:	680b      	ldr	r3, [r1, #0]
 8006140:	ea23 0302 	bic.w	r3, r3, r2
 8006144:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006146:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006148:	b11b      	cbz	r3, 8006152 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800614a:	f104 0018 	add.w	r0, r4, #24
 800614e:	f7ff fbf4 	bl	800593a <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8006152:	4629      	mov	r1, r5
 8006154:	4825      	ldr	r0, [pc, #148]	@ (80061ec <vTaskSuspend+0xd8>)
 8006156:	f7ff fbcc 	bl	80058f2 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800615a:	f894 309c 	ldrb.w	r3, [r4, #156]	@ 0x9c
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b01      	cmp	r3, #1
 8006162:	d00c      	beq.n	800617e <vTaskSuspend+0x6a>
		taskEXIT_CRITICAL();
 8006164:	f000 f8c8 	bl	80062f8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8006168:	4b21      	ldr	r3, [pc, #132]	@ (80061f0 <vTaskSuspend+0xdc>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	b95b      	cbnz	r3, 8006186 <vTaskSuspend+0x72>
		if( pxTCB == pxCurrentTCB )
 800616e:	4b21      	ldr	r3, [pc, #132]	@ (80061f4 <vTaskSuspend+0xe0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	42a3      	cmp	r3, r4
 8006174:	d00e      	beq.n	8006194 <vTaskSuspend+0x80>
	}
 8006176:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8006178:	4b1e      	ldr	r3, [pc, #120]	@ (80061f4 <vTaskSuspend+0xe0>)
 800617a:	681c      	ldr	r4, [r3, #0]
 800617c:	e7cf      	b.n	800611e <vTaskSuspend+0xa>
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800617e:	2300      	movs	r3, #0
 8006180:	f884 309c 	strb.w	r3, [r4, #156]	@ 0x9c
 8006184:	e7ee      	b.n	8006164 <vTaskSuspend+0x50>
			taskENTER_CRITICAL();
 8006186:	f000 f895 	bl	80062b4 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 800618a:	f7ff fbe9 	bl	8005960 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 800618e:	f000 f8b3 	bl	80062f8 <vPortExitCritical>
 8006192:	e7ec      	b.n	800616e <vTaskSuspend+0x5a>
			if( xSchedulerRunning != pdFALSE )
 8006194:	4b16      	ldr	r3, [pc, #88]	@ (80061f0 <vTaskSuspend+0xdc>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	b1b3      	cbz	r3, 80061c8 <vTaskSuspend+0xb4>
				configASSERT( uxSchedulerSuspended == 0 );
 800619a:	4b17      	ldr	r3, [pc, #92]	@ (80061f8 <vTaskSuspend+0xe4>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	b143      	cbz	r3, 80061b2 <vTaskSuspend+0x9e>
 80061a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	e7fe      	b.n	80061b0 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 80061b2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80061b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	e7d6      	b.n	8006176 <vTaskSuspend+0x62>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80061c8:	4b08      	ldr	r3, [pc, #32]	@ (80061ec <vTaskSuspend+0xd8>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	4b0b      	ldr	r3, [pc, #44]	@ (80061fc <vTaskSuspend+0xe8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d103      	bne.n	80061dc <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 80061d4:	4b07      	ldr	r3, [pc, #28]	@ (80061f4 <vTaskSuspend+0xe0>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	e7cc      	b.n	8006176 <vTaskSuspend+0x62>
					vTaskSwitchContext();
 80061dc:	f7ff ff48 	bl	8006070 <vTaskSwitchContext>
	}
 80061e0:	e7c9      	b.n	8006176 <vTaskSuspend+0x62>
 80061e2:	bf00      	nop
 80061e4:	20000598 	.word	0x20000598
 80061e8:	2000051c 	.word	0x2000051c
 80061ec:	20000528 	.word	0x20000528
 80061f0:	20000518 	.word	0x20000518
 80061f4:	20000624 	.word	0x20000624
 80061f8:	200004fc 	.word	0x200004fc
 80061fc:	20000524 	.word	0x20000524

08006200 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006200:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8006202:	2300      	movs	r3, #0
 8006204:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006206:	4b0d      	ldr	r3, [pc, #52]	@ (800623c <prvTaskExitError+0x3c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620e:	d008      	beq.n	8006222 <prvTaskExitError+0x22>
 8006210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	e7fe      	b.n	8006220 <prvTaskExitError+0x20>
 8006222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006232:	9b01      	ldr	r3, [sp, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d0fc      	beq.n	8006232 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006238:	b002      	add	sp, #8
 800623a:	4770      	bx	lr
 800623c:	20000018 	.word	0x20000018

08006240 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006240:	4806      	ldr	r0, [pc, #24]	@ (800625c <prvPortStartFirstTask+0x1c>)
 8006242:	6800      	ldr	r0, [r0, #0]
 8006244:	6800      	ldr	r0, [r0, #0]
 8006246:	f380 8808 	msr	MSP, r0
 800624a:	b662      	cpsie	i
 800624c:	b661      	cpsie	f
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	df00      	svc	0
 8006258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800625a:	0000      	.short	0x0000
 800625c:	e000ed08 	.word	0xe000ed08

08006260 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006260:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006264:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006268:	f021 0101 	bic.w	r1, r1, #1
 800626c:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006270:	4b03      	ldr	r3, [pc, #12]	@ (8006280 <pxPortInitialiseStack+0x20>)
 8006272:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006276:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800627a:	3840      	subs	r0, #64	@ 0x40
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	08006201 	.word	0x08006201
	...

08006290 <SVC_Handler>:
	__asm volatile (
 8006290:	4b07      	ldr	r3, [pc, #28]	@ (80062b0 <pxCurrentTCBConst2>)
 8006292:	6819      	ldr	r1, [r3, #0]
 8006294:	6808      	ldr	r0, [r1, #0]
 8006296:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800629a:	f380 8809 	msr	PSP, r0
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f04f 0000 	mov.w	r0, #0
 80062a6:	f380 8811 	msr	BASEPRI, r0
 80062aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80062ae:	4770      	bx	lr

080062b0 <pxCurrentTCBConst2>:
 80062b0:	20000624 	.word	0x20000624

080062b4 <vPortEnterCritical>:
 80062b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062c4:	4a0b      	ldr	r2, [pc, #44]	@ (80062f4 <vPortEnterCritical+0x40>)
 80062c6:	6813      	ldr	r3, [r2, #0]
 80062c8:	3301      	adds	r3, #1
 80062ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d000      	beq.n	80062d2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 80062d0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80062d6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80062da:	f013 0fff 	tst.w	r3, #255	@ 0xff
 80062de:	d0f7      	beq.n	80062d0 <vPortEnterCritical+0x1c>
 80062e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	e7fe      	b.n	80062f0 <vPortEnterCritical+0x3c>
 80062f2:	bf00      	nop
 80062f4:	20000018 	.word	0x20000018

080062f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80062f8:	4b09      	ldr	r3, [pc, #36]	@ (8006320 <vPortExitCritical+0x28>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	b943      	cbnz	r3, 8006310 <vPortExitCritical+0x18>
 80062fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	e7fe      	b.n	800630e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006310:	3b01      	subs	r3, #1
 8006312:	4a03      	ldr	r2, [pc, #12]	@ (8006320 <vPortExitCritical+0x28>)
 8006314:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006316:	b90b      	cbnz	r3, 800631c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006318:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	20000018 	.word	0x20000018
	...

08006330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006330:	f3ef 8009 	mrs	r0, PSP
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	4b0d      	ldr	r3, [pc, #52]	@ (8006370 <pxCurrentTCBConst>)
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006340:	6010      	str	r0, [r2, #0]
 8006342:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006346:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800634a:	f380 8811 	msr	BASEPRI, r0
 800634e:	f7ff fe8f 	bl	8006070 <vTaskSwitchContext>
 8006352:	f04f 0000 	mov.w	r0, #0
 8006356:	f380 8811 	msr	BASEPRI, r0
 800635a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800635e:	6819      	ldr	r1, [r3, #0]
 8006360:	6808      	ldr	r0, [r1, #0]
 8006362:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006366:	f380 8809 	msr	PSP, r0
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	4770      	bx	lr

08006370 <pxCurrentTCBConst>:
 8006370:	20000624 	.word	0x20000624

08006374 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006374:	b508      	push	{r3, lr}
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006386:	f7ff fd45 	bl	8005e14 <xTaskIncrementTick>
 800638a:	b128      	cbz	r0, 8006398 <SysTick_Handler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800638c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006394:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8006398:	2300      	movs	r3, #0
 800639a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800639e:	bd08      	pop	{r3, pc}

080063a0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80063a0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80063a4:	2300      	movs	r3, #0
 80063a6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80063a8:	6193      	str	r3, [r2, #24]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063aa:	4b05      	ldr	r3, [pc, #20]	@ (80063c0 <vPortSetupTimerInterrupt+0x20>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4905      	ldr	r1, [pc, #20]	@ (80063c4 <vPortSetupTimerInterrupt+0x24>)
 80063b0:	fba1 1303 	umull	r1, r3, r1, r3
 80063b4:	099b      	lsrs	r3, r3, #6
 80063b6:	3b01      	subs	r3, #1
 80063b8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063ba:	2307      	movs	r3, #7
 80063bc:	6113      	str	r3, [r2, #16]
}
 80063be:	4770      	bx	lr
 80063c0:	20000008 	.word	0x20000008
 80063c4:	10624dd3 	.word	0x10624dd3

080063c8 <xPortStartScheduler>:
{
 80063c8:	b510      	push	{r4, lr}
 80063ca:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063cc:	4b2a      	ldr	r3, [pc, #168]	@ (8006478 <xPortStartScheduler+0xb0>)
 80063ce:	781a      	ldrb	r2, [r3, #0]
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063d4:	22ff      	movs	r2, #255	@ 0xff
 80063d6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063e0:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80063e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80063e8:	4a24      	ldr	r2, [pc, #144]	@ (800647c <xPortStartScheduler+0xb4>)
 80063ea:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063ec:	4b24      	ldr	r3, [pc, #144]	@ (8006480 <xPortStartScheduler+0xb8>)
 80063ee:	2207      	movs	r2, #7
 80063f0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063f2:	e009      	b.n	8006408 <xPortStartScheduler+0x40>
			ulMaxPRIGROUPValue--;
 80063f4:	4a22      	ldr	r2, [pc, #136]	@ (8006480 <xPortStartScheduler+0xb8>)
 80063f6:	6813      	ldr	r3, [r2, #0]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	b2db      	uxtb	r3, r3
 8006404:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006408:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800640c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006410:	d1f0      	bne.n	80063f4 <xPortStartScheduler+0x2c>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006412:	4b1b      	ldr	r3, [pc, #108]	@ (8006480 <xPortStartScheduler+0xb8>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b03      	cmp	r3, #3
 8006418:	d008      	beq.n	800642c <xPortStartScheduler+0x64>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	e7fe      	b.n	800642a <xPortStartScheduler+0x62>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	4a14      	ldr	r2, [pc, #80]	@ (8006480 <xPortStartScheduler+0xb8>)
 8006430:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006432:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006436:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006438:	9b01      	ldr	r3, [sp, #4]
 800643a:	b2db      	uxtb	r3, r3
 800643c:	4a0e      	ldr	r2, [pc, #56]	@ (8006478 <xPortStartScheduler+0xb0>)
 800643e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006440:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006444:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8006448:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800644c:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006450:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8006454:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 8006458:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800645c:	f7ff ffa0 	bl	80063a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006460:	2400      	movs	r4, #0
 8006462:	4b08      	ldr	r3, [pc, #32]	@ (8006484 <xPortStartScheduler+0xbc>)
 8006464:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8006466:	f7ff feeb 	bl	8006240 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800646a:	f7ff fe01 	bl	8006070 <vTaskSwitchContext>
	prvTaskExitError();
 800646e:	f7ff fec7 	bl	8006200 <prvTaskExitError>
}
 8006472:	4620      	mov	r0, r4
 8006474:	b002      	add	sp, #8
 8006476:	bd10      	pop	{r4, pc}
 8006478:	e000e400 	.word	0xe000e400
 800647c:	2000062c 	.word	0x2000062c
 8006480:	20000628 	.word	0x20000628
 8006484:	20000018 	.word	0x20000018

08006488 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006488:	4a12      	ldr	r2, [pc, #72]	@ (80064d4 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800648a:	f012 0f07 	tst.w	r2, #7
 800648e:	d01e      	beq.n	80064ce <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006490:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006492:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006496:	f5c1 6340 	rsb	r3, r1, #3072	@ 0xc00
 800649a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800649c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800649e:	480e      	ldr	r0, [pc, #56]	@ (80064d8 <prvHeapInit+0x50>)
 80064a0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064a2:	2100      	movs	r1, #0
 80064a4:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064a6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80064a8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064aa:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80064ae:	480b      	ldr	r0, [pc, #44]	@ (80064dc <prvHeapInit+0x54>)
 80064b0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80064b2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80064b4:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80064b6:	1a99      	subs	r1, r3, r2
 80064b8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80064ba:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064bc:	4b08      	ldr	r3, [pc, #32]	@ (80064e0 <prvHeapInit+0x58>)
 80064be:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80064c0:	4b08      	ldr	r3, [pc, #32]	@ (80064e4 <prvHeapInit+0x5c>)
 80064c2:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80064c4:	4b08      	ldr	r3, [pc, #32]	@ (80064e8 <prvHeapInit+0x60>)
 80064c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80064ca:	601a      	str	r2, [r3, #0]
}
 80064cc:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064ce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80064d2:	e7e4      	b.n	800649e <prvHeapInit+0x16>
 80064d4:	20000650 	.word	0x20000650
 80064d8:	20000648 	.word	0x20000648
 80064dc:	20000644 	.word	0x20000644
 80064e0:	2000063c 	.word	0x2000063c
 80064e4:	20000640 	.word	0x20000640
 80064e8:	20000630 	.word	0x20000630

080064ec <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80064ec:	4b15      	ldr	r3, [pc, #84]	@ (8006544 <prvInsertBlockIntoFreeList+0x58>)
 80064ee:	461a      	mov	r2, r3
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4283      	cmp	r3, r0
 80064f4:	d3fb      	bcc.n	80064ee <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064f6:	6851      	ldr	r1, [r2, #4]
 80064f8:	eb02 0c01 	add.w	ip, r2, r1
 80064fc:	4584      	cmp	ip, r0
 80064fe:	d009      	beq.n	8006514 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006500:	6841      	ldr	r1, [r0, #4]
 8006502:	eb00 0c01 	add.w	ip, r0, r1
 8006506:	4563      	cmp	r3, ip
 8006508:	d009      	beq.n	800651e <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800650a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800650c:	4290      	cmp	r0, r2
 800650e:	d018      	beq.n	8006542 <prvInsertBlockIntoFreeList+0x56>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006510:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8006512:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006514:	6840      	ldr	r0, [r0, #4]
 8006516:	4401      	add	r1, r0
 8006518:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 800651a:	4610      	mov	r0, r2
 800651c:	e7f0      	b.n	8006500 <prvInsertBlockIntoFreeList+0x14>
{
 800651e:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006520:	4c09      	ldr	r4, [pc, #36]	@ (8006548 <prvInsertBlockIntoFreeList+0x5c>)
 8006522:	6824      	ldr	r4, [r4, #0]
 8006524:	42a3      	cmp	r3, r4
 8006526:	d00a      	beq.n	800653e <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	4419      	add	r1, r3
 800652c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800652e:	6813      	ldr	r3, [r2, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8006534:	4290      	cmp	r0, r2
 8006536:	d000      	beq.n	800653a <prvInsertBlockIntoFreeList+0x4e>
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006538:	6010      	str	r0, [r2, #0]
	}
}
 800653a:	bc10      	pop	{r4}
 800653c:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800653e:	6004      	str	r4, [r0, #0]
 8006540:	e7f8      	b.n	8006534 <prvInsertBlockIntoFreeList+0x48>
 8006542:	4770      	bx	lr
 8006544:	20000648 	.word	0x20000648
 8006548:	20000644 	.word	0x20000644

0800654c <pvPortMalloc>:
{
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006550:	f7ff fc58 	bl	8005e04 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006554:	4b38      	ldr	r3, [pc, #224]	@ (8006638 <pvPortMalloc+0xec>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	b1b3      	cbz	r3, 8006588 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800655a:	4b38      	ldr	r3, [pc, #224]	@ (800663c <pvPortMalloc+0xf0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	421c      	tst	r4, r3
 8006560:	d150      	bne.n	8006604 <pvPortMalloc+0xb8>
			if( xWantedSize > 0 )
 8006562:	2c00      	cmp	r4, #0
 8006564:	d050      	beq.n	8006608 <pvPortMalloc+0xbc>
				xWantedSize += xHeapStructSize;
 8006566:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800656a:	f014 0f07 	tst.w	r4, #7
 800656e:	d002      	beq.n	8006576 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006570:	f022 0207 	bic.w	r2, r2, #7
 8006574:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006576:	2a00      	cmp	r2, #0
 8006578:	d055      	beq.n	8006626 <pvPortMalloc+0xda>
 800657a:	4b31      	ldr	r3, [pc, #196]	@ (8006640 <pvPortMalloc+0xf4>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4293      	cmp	r3, r2
 8006580:	d353      	bcc.n	800662a <pvPortMalloc+0xde>
				pxBlock = xStart.pxNextFreeBlock;
 8006582:	4930      	ldr	r1, [pc, #192]	@ (8006644 <pvPortMalloc+0xf8>)
 8006584:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006586:	e004      	b.n	8006592 <pvPortMalloc+0x46>
			prvHeapInit();
 8006588:	f7ff ff7e 	bl	8006488 <prvHeapInit>
 800658c:	e7e5      	b.n	800655a <pvPortMalloc+0xe>
					pxPreviousBlock = pxBlock;
 800658e:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8006590:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006592:	6863      	ldr	r3, [r4, #4]
 8006594:	4293      	cmp	r3, r2
 8006596:	d202      	bcs.n	800659e <pvPortMalloc+0x52>
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1f7      	bne.n	800658e <pvPortMalloc+0x42>
				if( pxBlock != pxEnd )
 800659e:	4b26      	ldr	r3, [pc, #152]	@ (8006638 <pvPortMalloc+0xec>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	42a3      	cmp	r3, r4
 80065a4:	d043      	beq.n	800662e <pvPortMalloc+0xe2>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065a6:	680d      	ldr	r5, [r1, #0]
 80065a8:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065ae:	6863      	ldr	r3, [r4, #4]
 80065b0:	1a9b      	subs	r3, r3, r2
 80065b2:	2b10      	cmp	r3, #16
 80065b4:	d910      	bls.n	80065d8 <pvPortMalloc+0x8c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065b6:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065b8:	f010 0f07 	tst.w	r0, #7
 80065bc:	d008      	beq.n	80065d0 <pvPortMalloc+0x84>
 80065be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c2:	f383 8811 	msr	BASEPRI, r3
 80065c6:	f3bf 8f6f 	isb	sy
 80065ca:	f3bf 8f4f 	dsb	sy
 80065ce:	e7fe      	b.n	80065ce <pvPortMalloc+0x82>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065d0:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065d2:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065d4:	f7ff ff8a 	bl	80064ec <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065d8:	6862      	ldr	r2, [r4, #4]
 80065da:	4919      	ldr	r1, [pc, #100]	@ (8006640 <pvPortMalloc+0xf4>)
 80065dc:	680b      	ldr	r3, [r1, #0]
 80065de:	1a9b      	subs	r3, r3, r2
 80065e0:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065e2:	4919      	ldr	r1, [pc, #100]	@ (8006648 <pvPortMalloc+0xfc>)
 80065e4:	6809      	ldr	r1, [r1, #0]
 80065e6:	428b      	cmp	r3, r1
 80065e8:	d201      	bcs.n	80065ee <pvPortMalloc+0xa2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065ea:	4917      	ldr	r1, [pc, #92]	@ (8006648 <pvPortMalloc+0xfc>)
 80065ec:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065ee:	4b13      	ldr	r3, [pc, #76]	@ (800663c <pvPortMalloc+0xf0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 80065fa:	4a14      	ldr	r2, [pc, #80]	@ (800664c <pvPortMalloc+0x100>)
 80065fc:	6813      	ldr	r3, [r2, #0]
 80065fe:	3301      	adds	r3, #1
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	e002      	b.n	800660a <pvPortMalloc+0xbe>
void *pvReturn = NULL;
 8006604:	2500      	movs	r5, #0
 8006606:	e000      	b.n	800660a <pvPortMalloc+0xbe>
 8006608:	2500      	movs	r5, #0
	( void ) xTaskResumeAll();
 800660a:	f7ff fc8f 	bl	8005f2c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800660e:	f015 0f07 	tst.w	r5, #7
 8006612:	d00e      	beq.n	8006632 <pvPortMalloc+0xe6>
 8006614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006618:	f383 8811 	msr	BASEPRI, r3
 800661c:	f3bf 8f6f 	isb	sy
 8006620:	f3bf 8f4f 	dsb	sy
 8006624:	e7fe      	b.n	8006624 <pvPortMalloc+0xd8>
void *pvReturn = NULL;
 8006626:	2500      	movs	r5, #0
 8006628:	e7ef      	b.n	800660a <pvPortMalloc+0xbe>
 800662a:	2500      	movs	r5, #0
 800662c:	e7ed      	b.n	800660a <pvPortMalloc+0xbe>
 800662e:	2500      	movs	r5, #0
 8006630:	e7eb      	b.n	800660a <pvPortMalloc+0xbe>
}
 8006632:	4628      	mov	r0, r5
 8006634:	bd38      	pop	{r3, r4, r5, pc}
 8006636:	bf00      	nop
 8006638:	20000644 	.word	0x20000644
 800663c:	20000630 	.word	0x20000630
 8006640:	20000640 	.word	0x20000640
 8006644:	20000648 	.word	0x20000648
 8006648:	2000063c 	.word	0x2000063c
 800664c:	20000638 	.word	0x20000638

08006650 <vPortFree>:
	if( pv != NULL )
 8006650:	2800      	cmp	r0, #0
 8006652:	d034      	beq.n	80066be <vPortFree+0x6e>
{
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8006658:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800665c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006660:	4a17      	ldr	r2, [pc, #92]	@ (80066c0 <vPortFree+0x70>)
 8006662:	6812      	ldr	r2, [r2, #0]
 8006664:	4213      	tst	r3, r2
 8006666:	d108      	bne.n	800667a <vPortFree+0x2a>
 8006668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	e7fe      	b.n	8006678 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800667a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800667e:	b141      	cbz	r1, 8006692 <vPortFree+0x42>
 8006680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006684:	f383 8811 	msr	BASEPRI, r3
 8006688:	f3bf 8f6f 	isb	sy
 800668c:	f3bf 8f4f 	dsb	sy
 8006690:	e7fe      	b.n	8006690 <vPortFree+0x40>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006692:	ea23 0302 	bic.w	r3, r3, r2
 8006696:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800669a:	f7ff fbb3 	bl	8005e04 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800669e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 80066a2:	4a08      	ldr	r2, [pc, #32]	@ (80066c4 <vPortFree+0x74>)
 80066a4:	6813      	ldr	r3, [r2, #0]
 80066a6:	440b      	add	r3, r1
 80066a8:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066aa:	4628      	mov	r0, r5
 80066ac:	f7ff ff1e 	bl	80064ec <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80066b0:	4a05      	ldr	r2, [pc, #20]	@ (80066c8 <vPortFree+0x78>)
 80066b2:	6813      	ldr	r3, [r2, #0]
 80066b4:	3301      	adds	r3, #1
 80066b6:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 80066b8:	f7ff fc38 	bl	8005f2c <xTaskResumeAll>
}
 80066bc:	bd38      	pop	{r3, r4, r5, pc}
 80066be:	4770      	bx	lr
 80066c0:	20000630 	.word	0x20000630
 80066c4:	20000640 	.word	0x20000640
 80066c8:	20000634 	.word	0x20000634

080066cc <TMC2209_setdefault>:
static uint8_t oneStepMove_start = FALSE;

static uint8_t isBrake = FALSE;
void TMC2209_setdefault()
{
	gconfConfig.I_scale_analog = TRUE;
 80066cc:	4b06      	ldr	r3, [pc, #24]	@ (80066e8 <TMC2209_setdefault+0x1c>)
 80066ce:	781a      	ldrb	r2, [r3, #0]
 80066d0:	f042 0201 	orr.w	r2, r2, #1
 80066d4:	701a      	strb	r2, [r3, #0]
	gconfConfig.multistep_filt = TRUE;
 80066d6:	785a      	ldrb	r2, [r3, #1]
 80066d8:	f042 0201 	orr.w	r2, r2, #1
 80066dc:	705a      	strb	r2, [r3, #1]
	chopConfig.bytes = CHOPPER_CONFIG_DEFAULT;
 80066de:	4b03      	ldr	r3, [pc, #12]	@ (80066ec <TMC2209_setdefault+0x20>)
 80066e0:	4a03      	ldr	r2, [pc, #12]	@ (80066f0 <TMC2209_setdefault+0x24>)
 80066e2:	601a      	str	r2, [r3, #0]
}
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	20001284 	.word	0x20001284
 80066ec:	20001288 	.word	0x20001288
 80066f0:	10000053 	.word	0x10000053

080066f4 <TMC2209_enable>:
	TMC2209_disable();
	HAL_Delay(100);
}

void TMC2209_enable()
{
 80066f4:	b508      	push	{r3, lr}
	if(Driver_Enable == FALSE){
 80066f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006724 <TMC2209_enable+0x30>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	b103      	cbz	r3, 80066fe <TMC2209_enable+0xa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
		Driver_Enable = TRUE;
		chopConfig.toff = toff_;
		TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
	}
}
 80066fc:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80066fe:	2200      	movs	r2, #0
 8006700:	2104      	movs	r1, #4
 8006702:	4809      	ldr	r0, [pc, #36]	@ (8006728 <TMC2209_enable+0x34>)
 8006704:	f7fb fc4d 	bl	8001fa2 <HAL_GPIO_WritePin>
		Driver_Enable = TRUE;
 8006708:	4b06      	ldr	r3, [pc, #24]	@ (8006724 <TMC2209_enable+0x30>)
 800670a:	2201      	movs	r2, #1
 800670c:	701a      	strb	r2, [r3, #0]
		chopConfig.toff = toff_;
 800670e:	4b07      	ldr	r3, [pc, #28]	@ (800672c <TMC2209_enable+0x38>)
 8006710:	781a      	ldrb	r2, [r3, #0]
 8006712:	2103      	movs	r1, #3
 8006714:	f361 0203 	bfi	r2, r1, #0, #4
 8006718:	701a      	strb	r2, [r3, #0]
		TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 800671a:	6819      	ldr	r1, [r3, #0]
 800671c:	206c      	movs	r0, #108	@ 0x6c
 800671e:	f000 fa8b 	bl	8006c38 <TMC2209_HAL_Write>
}
 8006722:	e7eb      	b.n	80066fc <TMC2209_enable+0x8>
 8006724:	2000127d 	.word	0x2000127d
 8006728:	40010800 	.word	0x40010800
 800672c:	20001288 	.word	0x20001288

08006730 <TMC2209_disable>:

void TMC2209_disable()
{
 8006730:	b508      	push	{r3, lr}
	if(Driver_Enable == TRUE){
 8006732:	4b0b      	ldr	r3, [pc, #44]	@ (8006760 <TMC2209_disable+0x30>)
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d000      	beq.n	800673c <TMC2209_disable+0xc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
		Driver_Enable = FALSE;
		chopConfig.toff = TOFF_DISABLE;
		TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
	}
}
 800673a:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800673c:	2201      	movs	r2, #1
 800673e:	2104      	movs	r1, #4
 8006740:	4808      	ldr	r0, [pc, #32]	@ (8006764 <TMC2209_disable+0x34>)
 8006742:	f7fb fc2e 	bl	8001fa2 <HAL_GPIO_WritePin>
		Driver_Enable = FALSE;
 8006746:	2100      	movs	r1, #0
 8006748:	4b05      	ldr	r3, [pc, #20]	@ (8006760 <TMC2209_disable+0x30>)
 800674a:	7019      	strb	r1, [r3, #0]
		chopConfig.toff = TOFF_DISABLE;
 800674c:	4b06      	ldr	r3, [pc, #24]	@ (8006768 <TMC2209_disable+0x38>)
 800674e:	781a      	ldrb	r2, [r3, #0]
 8006750:	f361 0203 	bfi	r2, r1, #0, #4
 8006754:	701a      	strb	r2, [r3, #0]
		TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 8006756:	6819      	ldr	r1, [r3, #0]
 8006758:	206c      	movs	r0, #108	@ 0x6c
 800675a:	f000 fa6d 	bl	8006c38 <TMC2209_HAL_Write>
}
 800675e:	e7ec      	b.n	800673a <TMC2209_disable+0xa>
 8006760:	2000127d 	.word	0x2000127d
 8006764:	40010800 	.word	0x40010800
 8006768:	20001288 	.word	0x20001288

0800676c <TMC2209_setup>:
{
 800676c:	b530      	push	{r4, r5, lr}
 800676e:	b083      	sub	sp, #12
	TMC2209_setdefault();
 8006770:	f7ff ffac 	bl	80066cc <TMC2209_setdefault>
	gconfConfig.bytes = FALSE;
 8006774:	4b1f      	ldr	r3, [pc, #124]	@ (80067f4 <TMC2209_setup+0x88>)
 8006776:	2400      	movs	r4, #0
 8006778:	601c      	str	r4, [r3, #0]
	gconfConfig.I_scale_analog = TRUE;
 800677a:	781a      	ldrb	r2, [r3, #0]
 800677c:	f042 0201 	orr.w	r2, r2, #1
 8006780:	701a      	strb	r2, [r3, #0]
	gconfConfig.pdn_disable = TRUE;
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006788:	701a      	strb	r2, [r3, #0]
	gconfConfig.multistep_filt = TRUE;
 800678a:	785a      	ldrb	r2, [r3, #1]
 800678c:	f042 0201 	orr.w	r2, r2, #1
 8006790:	705a      	strb	r2, [r3, #1]
	gconfConfig.mstep_reg_select = TRUE;
 8006792:	781a      	ldrb	r2, [r3, #0]
 8006794:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006798:	701a      	strb	r2, [r3, #0]
	slaveConfig.conf = 0x00;
 800679a:	4b17      	ldr	r3, [pc, #92]	@ (80067f8 <TMC2209_setup+0x8c>)
 800679c:	785a      	ldrb	r2, [r3, #1]
 800679e:	f364 0203 	bfi	r2, r4, #0, #4
 80067a2:	705a      	strb	r2, [r3, #1]
	while(timeout_cnt < TMC_SETUP_TIMEOUT){
 80067a4:	e004      	b.n	80067b0 <TMC2209_setup+0x44>
			HAL_Delay(100);
 80067a6:	2064      	movs	r0, #100	@ 0x64
 80067a8:	f7fb f966 	bl	8001a78 <HAL_Delay>
		timeout_cnt++;
 80067ac:	3401      	adds	r4, #1
 80067ae:	b2e4      	uxtb	r4, r4
	while(timeout_cnt < TMC_SETUP_TIMEOUT){
 80067b0:	2c02      	cmp	r4, #2
 80067b2:	d811      	bhi.n	80067d8 <TMC2209_setup+0x6c>
		TMC2209_HAL_Write(TMC2209Reg_GCONF, gconfConfig.bytes);
 80067b4:	4d0f      	ldr	r5, [pc, #60]	@ (80067f4 <TMC2209_setup+0x88>)
 80067b6:	6829      	ldr	r1, [r5, #0]
 80067b8:	2000      	movs	r0, #0
 80067ba:	f000 fa3d 	bl	8006c38 <TMC2209_HAL_Write>
		TMC2209_HAL_Write(TMC2209Reg_SLAVECONF, slaveConfig.bytes);
 80067be:	4b0e      	ldr	r3, [pc, #56]	@ (80067f8 <TMC2209_setup+0x8c>)
 80067c0:	6819      	ldr	r1, [r3, #0]
 80067c2:	2003      	movs	r0, #3
 80067c4:	f000 fa38 	bl	8006c38 <TMC2209_HAL_Write>
		TMC2209_HAL_Read(TMC2209Reg_GCONF, &gconf_verif.bytes);
 80067c8:	a901      	add	r1, sp, #4
 80067ca:	2000      	movs	r0, #0
 80067cc:	f000 fa62 	bl	8006c94 <TMC2209_HAL_Read>
		if(gconf_verif.bytes == gconfConfig.bytes) break;
 80067d0:	682b      	ldr	r3, [r5, #0]
 80067d2:	9a01      	ldr	r2, [sp, #4]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d1e6      	bne.n	80067a6 <TMC2209_setup+0x3a>
	if(timeout_cnt >= TMC_SETUP_TIMEOUT){
 80067d8:	2c02      	cmp	r4, #2
 80067da:	d806      	bhi.n	80067ea <TMC2209_setup+0x7e>
	TMC2209_disable();
 80067dc:	f7ff ffa8 	bl	8006730 <TMC2209_disable>
	HAL_Delay(100);
 80067e0:	2064      	movs	r0, #100	@ 0x64
 80067e2:	f7fb f949 	bl	8001a78 <HAL_Delay>
}
 80067e6:	b003      	add	sp, #12
 80067e8:	bd30      	pop	{r4, r5, pc}
		emmitSysError(err);
 80067ea:	2000      	movs	r0, #0
 80067ec:	f7fb f8c2 	bl	8001974 <emmitSysError>
 80067f0:	e7f4      	b.n	80067dc <TMC2209_setup+0x70>
 80067f2:	bf00      	nop
 80067f4:	20001284 	.word	0x20001284
 80067f8:	20001280 	.word	0x20001280

080067fc <TMC2209_setMicrostep>:

void TMC2209_setMicrostep(TMC2209_Microstep Microstep)
{
 80067fc:	b510      	push	{r4, lr}
 80067fe:	4604      	mov	r4, r0
	chopConfig.mres = Microstep;
 8006800:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <TMC2209_setMicrostep+0x3c>)
 8006802:	78da      	ldrb	r2, [r3, #3]
 8006804:	f360 0203 	bfi	r2, r0, #0, #4
 8006808:	70da      	strb	r2, [r3, #3]
	TMC2209_HAL_Write(TMC2209Reg_CHOPCONF, chopConfig.bytes);
 800680a:	6819      	ldr	r1, [r3, #0]
 800680c:	206c      	movs	r0, #108	@ 0x6c
 800680e:	f000 fa13 	bl	8006c38 <TMC2209_HAL_Write>
	active_microstep = pow(2, abs(Microstep - TMC2209_Microsteps_1));
 8006812:	f1a4 0008 	sub.w	r0, r4, #8
 8006816:	2800      	cmp	r0, #0
 8006818:	bfb8      	it	lt
 800681a:	4240      	neglt	r0, r0
 800681c:	f7f9 fdea 	bl	80003f4 <__aeabi_i2d>
 8006820:	4602      	mov	r2, r0
 8006822:	460b      	mov	r3, r1
 8006824:	2000      	movs	r0, #0
 8006826:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800682a:	f000 fb67 	bl	8006efc <pow>
 800682e:	f7fa f8fb 	bl	8000a28 <__aeabi_d2uiz>
 8006832:	4b02      	ldr	r3, [pc, #8]	@ (800683c <TMC2209_setMicrostep+0x40>)
 8006834:	7018      	strb	r0, [r3, #0]
}
 8006836:	bd10      	pop	{r4, pc}
 8006838:	20001288 	.word	0x20001288
 800683c:	2000127c 	.word	0x2000127c

08006840 <TMC2209_velocity>:
	TMC2209_HAL_Read(TMC2209Reg_CHOPCONF, &buffer);
	*result = buffer;
}

void TMC2209_velocity(float velocity)
{
 8006840:	b570      	push	{r4, r5, r6, lr}
 8006842:	4604      	mov	r4, r0
	float frequency = 0.0f;
	uint16_t desired_period = 0;
	uint16_t prescaller = TMC2209_DEFAULT_PRESCALLER;

	if(vel_now == velocity) return;
 8006844:	4601      	mov	r1, r0
 8006846:	4b24      	ldr	r3, [pc, #144]	@ (80068d8 <TMC2209_velocity+0x98>)
 8006848:	6818      	ldr	r0, [r3, #0]
 800684a:	f7fa fbff 	bl	800104c <__aeabi_fcmpeq>
 800684e:	2800      	cmp	r0, #0
 8006850:	d135      	bne.n	80068be <TMC2209_velocity+0x7e>
	if(velocity < 0.01f) velocity = 0.01f;
 8006852:	4922      	ldr	r1, [pc, #136]	@ (80068dc <TMC2209_velocity+0x9c>)
 8006854:	4620      	mov	r0, r4
 8006856:	f7fa fc03 	bl	8001060 <__aeabi_fcmplt>
 800685a:	b100      	cbz	r0, 800685e <TMC2209_velocity+0x1e>
 800685c:	4c1f      	ldr	r4, [pc, #124]	@ (80068dc <TMC2209_velocity+0x9c>)
	if(velocity <= 0) {
 800685e:	2100      	movs	r1, #0
 8006860:	4620      	mov	r0, r4
 8006862:	f7fa fc07 	bl	8001074 <__aeabi_fcmple>
 8006866:	bb58      	cbnz	r0, 80068c0 <TMC2209_velocity+0x80>
	uint16_t prescaller = TMC2209_DEFAULT_PRESCALLER;
 8006868:	2648      	movs	r6, #72	@ 0x48
		PWM_Pulse_Complete = TRUE;
		return;
	}

	while(TRUE){
		frequency  = (velocity * (STEP_PER_REV * active_microstep)) / 60;
 800686a:	4b1d      	ldr	r3, [pc, #116]	@ (80068e0 <TMC2209_velocity+0xa0>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	20c8      	movs	r0, #200	@ 0xc8
 8006870:	fb03 f000 	mul.w	r0, r3, r0
 8006874:	f7fa fa02 	bl	8000c7c <__aeabi_i2f>
 8006878:	4621      	mov	r1, r4
 800687a:	f7fa fa53 	bl	8000d24 <__aeabi_fmul>
 800687e:	4919      	ldr	r1, [pc, #100]	@ (80068e4 <TMC2209_velocity+0xa4>)
 8006880:	f7fa fb04 	bl	8000e8c <__aeabi_fdiv>
 8006884:	4605      	mov	r5, r0
		if(((TMC2209_BASE_FREQ / prescaller) / frequency) > MAX_CNT_PERIOD){
 8006886:	4818      	ldr	r0, [pc, #96]	@ (80068e8 <TMC2209_velocity+0xa8>)
 8006888:	fb90 f0f6 	sdiv	r0, r0, r6
 800688c:	f7fa f9f6 	bl	8000c7c <__aeabi_i2f>
 8006890:	4629      	mov	r1, r5
 8006892:	f7fa fafb 	bl	8000e8c <__aeabi_fdiv>
 8006896:	4605      	mov	r5, r0
 8006898:	4914      	ldr	r1, [pc, #80]	@ (80068ec <TMC2209_velocity+0xac>)
 800689a:	f7fa fbff 	bl	800109c <__aeabi_fcmpgt>
 800689e:	b9b8      	cbnz	r0, 80068d0 <TMC2209_velocity+0x90>
			prescaller += TMC2209_DEFAULT_PRESCALLER;
			continue;
		}
		desired_period = (uint16_t)round((TMC2209_BASE_FREQ / prescaller) / frequency);
 80068a0:	4628      	mov	r0, r5
 80068a2:	f7f9 fdb9 	bl	8000418 <__aeabi_f2d>
 80068a6:	f000 fc71 	bl	800718c <round>
 80068aa:	f7fa f8bd 	bl	8000a28 <__aeabi_d2uiz>
 80068ae:	b280      	uxth	r0, r0
		break;
	}

	__HAL_TIM_SET_PRESCALER(&htim2, prescaller);
 80068b0:	4b0f      	ldr	r3, [pc, #60]	@ (80068f0 <TMC2209_velocity+0xb0>)
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	6296      	str	r6, [r2, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim2, desired_period);
 80068b6:	62d0      	str	r0, [r2, #44]	@ 0x2c
 80068b8:	60d8      	str	r0, [r3, #12]
	vel_now = velocity;
 80068ba:	4b07      	ldr	r3, [pc, #28]	@ (80068d8 <TMC2209_velocity+0x98>)
 80068bc:	601c      	str	r4, [r3, #0]
}
 80068be:	bd70      	pop	{r4, r5, r6, pc}
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80068c0:	2100      	movs	r1, #0
 80068c2:	480b      	ldr	r0, [pc, #44]	@ (80068f0 <TMC2209_velocity+0xb0>)
 80068c4:	f7fe f8d4 	bl	8004a70 <HAL_TIM_PWM_Stop_IT>
		PWM_Pulse_Complete = TRUE;
 80068c8:	4b0a      	ldr	r3, [pc, #40]	@ (80068f4 <TMC2209_velocity+0xb4>)
 80068ca:	2201      	movs	r2, #1
 80068cc:	701a      	strb	r2, [r3, #0]
		return;
 80068ce:	e7f6      	b.n	80068be <TMC2209_velocity+0x7e>
			prescaller += TMC2209_DEFAULT_PRESCALLER;
 80068d0:	3648      	adds	r6, #72	@ 0x48
 80068d2:	b2b6      	uxth	r6, r6
		frequency  = (velocity * (STEP_PER_REV * active_microstep)) / 60;
 80068d4:	e7c9      	b.n	800686a <TMC2209_velocity+0x2a>
 80068d6:	bf00      	nop
 80068d8:	20001278 	.word	0x20001278
 80068dc:	3c23d70a 	.word	0x3c23d70a
 80068e0:	2000127c 	.word	0x2000127c
 80068e4:	42700000 	.word	0x42700000
 80068e8:	044aa200 	.word	0x044aa200
 80068ec:	477fff00 	.word	0x477fff00
 80068f0:	200003e8 	.word	0x200003e8
 80068f4:	2000001c 	.word	0x2000001c

080068f8 <TMC2209_move>:

void TMC2209_move(){
 80068f8:	b508      	push	{r3, lr}
	if(isBrake) return;
	if(PWM_Pulse_Complete == TRUE){
 80068fa:	4b06      	ldr	r3, [pc, #24]	@ (8006914 <TMC2209_move+0x1c>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d000      	beq.n	8006904 <TMC2209_move+0xc>
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
		PWM_Pulse_Complete = FALSE;
	}
}
 8006902:	bd08      	pop	{r3, pc}
		HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8006904:	2100      	movs	r1, #0
 8006906:	4804      	ldr	r0, [pc, #16]	@ (8006918 <TMC2209_move+0x20>)
 8006908:	f7fe f80c 	bl	8004924 <HAL_TIM_PWM_Start_IT>
		PWM_Pulse_Complete = FALSE;
 800690c:	4b01      	ldr	r3, [pc, #4]	@ (8006914 <TMC2209_move+0x1c>)
 800690e:	2200      	movs	r2, #0
 8006910:	701a      	strb	r2, [r3, #0]
 8006912:	e7f6      	b.n	8006902 <TMC2209_move+0xa>
 8006914:	2000001c 	.word	0x2000001c
 8006918:	200003e8 	.word	0x200003e8

0800691c <TMC2209_stop>:

void TMC2209_stop(){
 800691c:	b508      	push	{r3, lr}
	if(PWM_Pulse_Complete == FALSE){
 800691e:	4b06      	ldr	r3, [pc, #24]	@ (8006938 <TMC2209_stop+0x1c>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	b103      	cbz	r3, 8006926 <TMC2209_stop+0xa>
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
		PWM_Pulse_Complete = TRUE;
	}
}
 8006924:	bd08      	pop	{r3, pc}
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 8006926:	2100      	movs	r1, #0
 8006928:	4804      	ldr	r0, [pc, #16]	@ (800693c <TMC2209_stop+0x20>)
 800692a:	f7fe f8a1 	bl	8004a70 <HAL_TIM_PWM_Stop_IT>
		PWM_Pulse_Complete = TRUE;
 800692e:	4b02      	ldr	r3, [pc, #8]	@ (8006938 <TMC2209_stop+0x1c>)
 8006930:	2201      	movs	r2, #1
 8006932:	701a      	strb	r2, [r3, #0]
}
 8006934:	e7f6      	b.n	8006924 <TMC2209_stop+0x8>
 8006936:	bf00      	nop
 8006938:	2000001c 	.word	0x2000001c
 800693c:	200003e8 	.word	0x200003e8

08006940 <TMC2209_direction>:
void TMC2209_direction(uint8_t direction){
	if(direction == rotation_dir) return;
 8006940:	4b0e      	ldr	r3, [pc, #56]	@ (800697c <TMC2209_direction+0x3c>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	4283      	cmp	r3, r0
 8006946:	d017      	beq.n	8006978 <TMC2209_direction+0x38>
void TMC2209_direction(uint8_t direction){
 8006948:	b510      	push	{r4, lr}
 800694a:	4604      	mov	r4, r0

	if(direction == TMC2209_ROT_FWD){
 800694c:	b110      	cbz	r0, 8006954 <TMC2209_direction+0x14>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
		rotation_dir = TMC2209_ROT_FWD;
	}
	if(direction == TMC2209_ROT_REV){
 800694e:	2c01      	cmp	r4, #1
 8006950:	d009      	beq.n	8006966 <TMC2209_direction+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
		rotation_dir = TMC2209_ROT_REV;
	}
}
 8006952:	bd10      	pop	{r4, pc}
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8006954:	2200      	movs	r2, #0
 8006956:	2102      	movs	r1, #2
 8006958:	4809      	ldr	r0, [pc, #36]	@ (8006980 <TMC2209_direction+0x40>)
 800695a:	f7fb fb22 	bl	8001fa2 <HAL_GPIO_WritePin>
		rotation_dir = TMC2209_ROT_FWD;
 800695e:	4b07      	ldr	r3, [pc, #28]	@ (800697c <TMC2209_direction+0x3c>)
 8006960:	2200      	movs	r2, #0
 8006962:	701a      	strb	r2, [r3, #0]
 8006964:	e7f3      	b.n	800694e <TMC2209_direction+0xe>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8006966:	2201      	movs	r2, #1
 8006968:	2102      	movs	r1, #2
 800696a:	4805      	ldr	r0, [pc, #20]	@ (8006980 <TMC2209_direction+0x40>)
 800696c:	f7fb fb19 	bl	8001fa2 <HAL_GPIO_WritePin>
		rotation_dir = TMC2209_ROT_REV;
 8006970:	4b02      	ldr	r3, [pc, #8]	@ (800697c <TMC2209_direction+0x3c>)
 8006972:	2201      	movs	r2, #1
 8006974:	701a      	strb	r2, [r3, #0]
 8006976:	e7ec      	b.n	8006952 <TMC2209_direction+0x12>
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	20001274 	.word	0x20001274
 8006980:	40010800 	.word	0x40010800
 8006984:	00000000 	.word	0x00000000

08006988 <PID_controller>:

void PID_controller(int32_t* setpoint, int32_t *current, float* result){
 8006988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800698c:	4607      	mov	r7, r0
 800698e:	460d      	mov	r5, r1
 8006990:	4616      	mov	r6, r2
	uint32_t time_now = HAL_GetTick();
 8006992:	f7fb f86b 	bl	8001a6c <HAL_GetTick>
 8006996:	4604      	mov	r4, r0
	if(time_now - pid_last_time >= PID_SAMPLING){
 8006998:	4b53      	ldr	r3, [pc, #332]	@ (8006ae8 <PID_controller+0x160>)
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	1a20      	subs	r0, r4, r0
 800699e:	2809      	cmp	r0, #9
 80069a0:	d937      	bls.n	8006a12 <PID_controller+0x8a>
		float delta_time = (float)(time_now - pid_last_time) / 1000.0f;
 80069a2:	f7fa f967 	bl	8000c74 <__aeabi_ui2f>
 80069a6:	4951      	ldr	r1, [pc, #324]	@ (8006aec <PID_controller+0x164>)
 80069a8:	f7fa fa70 	bl	8000e8c <__aeabi_fdiv>
 80069ac:	4680      	mov	r8, r0
		pid_error = (float)(*setpoint - *current);
 80069ae:	6838      	ldr	r0, [r7, #0]
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	1ac0      	subs	r0, r0, r3
 80069b4:	f7fa f962 	bl	8000c7c <__aeabi_i2f>
 80069b8:	4605      	mov	r5, r0
 80069ba:	4b4d      	ldr	r3, [pc, #308]	@ (8006af0 <PID_controller+0x168>)
 80069bc:	6018      	str	r0, [r3, #0]

		if(fabs(pid_error) < PID_DEADBAND){
 80069be:	f020 4700 	bic.w	r7, r0, #2147483648	@ 0x80000000
 80069c2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80069c6:	4638      	mov	r0, r7
 80069c8:	f7fa fb4a 	bl	8001060 <__aeabi_fcmplt>
 80069cc:	b9e8      	cbnz	r0, 8006a0a <PID_controller+0x82>
			*result = 0;
			pid_last_time = time_now;
			return;
		}

		if(fabs(pid_error) > PID_INTEGRAL_TRESHOLD){
 80069ce:	4949      	ldr	r1, [pc, #292]	@ (8006af4 <PID_controller+0x16c>)
 80069d0:	4638      	mov	r0, r7
 80069d2:	f7fa fb63 	bl	800109c <__aeabi_fcmpgt>
 80069d6:	b1f0      	cbz	r0, 8006a16 <PID_controller+0x8e>
			pid_integral += pid_error * delta_time;
 80069d8:	4641      	mov	r1, r8
 80069da:	4628      	mov	r0, r5
 80069dc:	f7fa f9a2 	bl	8000d24 <__aeabi_fmul>
 80069e0:	4f45      	ldr	r7, [pc, #276]	@ (8006af8 <PID_controller+0x170>)
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	f7fa f896 	bl	8000b14 <__addsf3>
 80069e8:	6038      	str	r0, [r7, #0]
			if(pid_integral > PID_INTEGRAL_MAX) pid_integral = PID_INTEGRAL_MAX;
 80069ea:	4944      	ldr	r1, [pc, #272]	@ (8006afc <PID_controller+0x174>)
 80069ec:	f7fa fb56 	bl	800109c <__aeabi_fcmpgt>
 80069f0:	b108      	cbz	r0, 80069f6 <PID_controller+0x6e>
 80069f2:	4a42      	ldr	r2, [pc, #264]	@ (8006afc <PID_controller+0x174>)
 80069f4:	603a      	str	r2, [r7, #0]
			if(pid_integral < PID_INTEGRAL_MIN) pid_integral = PID_INTEGRAL_MIN;
 80069f6:	2100      	movs	r1, #0
 80069f8:	4b3f      	ldr	r3, [pc, #252]	@ (8006af8 <PID_controller+0x170>)
 80069fa:	6818      	ldr	r0, [r3, #0]
 80069fc:	f7fa fb30 	bl	8001060 <__aeabi_fcmplt>
 8006a00:	b178      	cbz	r0, 8006a22 <PID_controller+0x9a>
 8006a02:	4b3d      	ldr	r3, [pc, #244]	@ (8006af8 <PID_controller+0x170>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	e00b      	b.n	8006a22 <PID_controller+0x9a>
			*result = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	6033      	str	r3, [r6, #0]
			pid_last_time = time_now;
 8006a0e:	4b36      	ldr	r3, [pc, #216]	@ (8006ae8 <PID_controller+0x160>)
 8006a10:	601c      	str	r4, [r3, #0]
			*result = MAX_SPEED;
		}else{
			*result = fabs(pid_output);
		}
	}
}
 8006a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			pid_integral *= 0.9f;
 8006a16:	4f38      	ldr	r7, [pc, #224]	@ (8006af8 <PID_controller+0x170>)
 8006a18:	4939      	ldr	r1, [pc, #228]	@ (8006b00 <PID_controller+0x178>)
 8006a1a:	6838      	ldr	r0, [r7, #0]
 8006a1c:	f7fa f982 	bl	8000d24 <__aeabi_fmul>
 8006a20:	6038      	str	r0, [r7, #0]
		float direvative = (pid_error - pid_last_error) / delta_time;
 8006a22:	f8df a0e0 	ldr.w	sl, [pc, #224]	@ 8006b04 <PID_controller+0x17c>
 8006a26:	f8da 1000 	ldr.w	r1, [sl]
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f7fa f870 	bl	8000b10 <__aeabi_fsub>
 8006a30:	4641      	mov	r1, r8
 8006a32:	f7fa fa2b 	bl	8000e8c <__aeabi_fdiv>
 8006a36:	4681      	mov	r9, r0
		pid_direvative = (pid_direvative * 0.9f) + (direvative * 0.1f);
 8006a38:	f8df 80cc 	ldr.w	r8, [pc, #204]	@ 8006b08 <PID_controller+0x180>
 8006a3c:	4930      	ldr	r1, [pc, #192]	@ (8006b00 <PID_controller+0x178>)
 8006a3e:	f8d8 0000 	ldr.w	r0, [r8]
 8006a42:	f7fa f96f 	bl	8000d24 <__aeabi_fmul>
 8006a46:	4607      	mov	r7, r0
 8006a48:	4930      	ldr	r1, [pc, #192]	@ (8006b0c <PID_controller+0x184>)
 8006a4a:	4648      	mov	r0, r9
 8006a4c:	f7fa f96a 	bl	8000d24 <__aeabi_fmul>
 8006a50:	4601      	mov	r1, r0
 8006a52:	4638      	mov	r0, r7
 8006a54:	f7fa f85e 	bl	8000b14 <__addsf3>
 8006a58:	4607      	mov	r7, r0
 8006a5a:	f8c8 0000 	str.w	r0, [r8]
		pid_output = (PID_KP * pid_error) + (PID_KI * pid_integral) + (PID_KD * pid_direvative);
 8006a5e:	4628      	mov	r0, r5
 8006a60:	f7f9 fcda 	bl	8000418 <__aeabi_f2d>
 8006a64:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8006a68:	4b29      	ldr	r3, [pc, #164]	@ (8006b10 <PID_controller+0x188>)
 8006a6a:	f7f9 fd2d 	bl	80004c8 <__aeabi_dmul>
 8006a6e:	4680      	mov	r8, r0
 8006a70:	4689      	mov	r9, r1
 8006a72:	4b21      	ldr	r3, [pc, #132]	@ (8006af8 <PID_controller+0x170>)
 8006a74:	6818      	ldr	r0, [r3, #0]
 8006a76:	f7f9 fccf 	bl	8000418 <__aeabi_f2d>
 8006a7a:	a317      	add	r3, pc, #92	@ (adr r3, 8006ad8 <PID_controller+0x150>)
 8006a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a80:	f7f9 fd22 	bl	80004c8 <__aeabi_dmul>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4640      	mov	r0, r8
 8006a8a:	4649      	mov	r1, r9
 8006a8c:	f7f9 fb66 	bl	800015c <__adddf3>
 8006a90:	4680      	mov	r8, r0
 8006a92:	4689      	mov	r9, r1
 8006a94:	4638      	mov	r0, r7
 8006a96:	f7f9 fcbf 	bl	8000418 <__aeabi_f2d>
 8006a9a:	a311      	add	r3, pc, #68	@ (adr r3, 8006ae0 <PID_controller+0x158>)
 8006a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa0:	f7f9 fd12 	bl	80004c8 <__aeabi_dmul>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4640      	mov	r0, r8
 8006aaa:	4649      	mov	r1, r9
 8006aac:	f7f9 fb56 	bl	800015c <__adddf3>
 8006ab0:	f7f9 ffda 	bl	8000a68 <__aeabi_d2f>
 8006ab4:	4b17      	ldr	r3, [pc, #92]	@ (8006b14 <PID_controller+0x18c>)
 8006ab6:	6018      	str	r0, [r3, #0]
		pid_last_error = pid_error;
 8006ab8:	f8ca 5000 	str.w	r5, [sl]
		pid_last_time = time_now;
 8006abc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae8 <PID_controller+0x160>)
 8006abe:	601c      	str	r4, [r3, #0]
		if(fabs(pid_output) > MAX_SPEED){
 8006ac0:	f020 4400 	bic.w	r4, r0, #2147483648	@ 0x80000000
 8006ac4:	4914      	ldr	r1, [pc, #80]	@ (8006b18 <PID_controller+0x190>)
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f7fa fae8 	bl	800109c <__aeabi_fcmpgt>
 8006acc:	b110      	cbz	r0, 8006ad4 <PID_controller+0x14c>
			*result = MAX_SPEED;
 8006ace:	4b12      	ldr	r3, [pc, #72]	@ (8006b18 <PID_controller+0x190>)
 8006ad0:	6033      	str	r3, [r6, #0]
 8006ad2:	e79e      	b.n	8006a12 <PID_controller+0x8a>
			*result = fabs(pid_output);
 8006ad4:	6034      	str	r4, [r6, #0]
 8006ad6:	e79c      	b.n	8006a12 <PID_controller+0x8a>
 8006ad8:	9999999a 	.word	0x9999999a
 8006adc:	40019999 	.word	0x40019999
 8006ae0:	cccccccd 	.word	0xcccccccd
 8006ae4:	4028cccc 	.word	0x4028cccc
 8006ae8:	20001254 	.word	0x20001254
 8006aec:	447a0000 	.word	0x447a0000
 8006af0:	2000126c 	.word	0x2000126c
 8006af4:	42480000 	.word	0x42480000
 8006af8:	20001264 	.word	0x20001264
 8006afc:	49742400 	.word	0x49742400
 8006b00:	3f666666 	.word	0x3f666666
 8006b04:	20001268 	.word	0x20001268
 8006b08:	20001260 	.word	0x20001260
 8006b0c:	3dcccccd 	.word	0x3dcccccd
 8006b10:	3ff33333 	.word	0x3ff33333
 8006b14:	2000125c 	.word	0x2000125c
 8006b18:	43820000 	.word	0x43820000

08006b1c <TMC2209_watchPosition>:
void TMC2209_watchPosition(int32_t* target, int32_t* counter, float* speed){
 8006b1c:	b570      	push	{r4, r5, r6, lr}
 8006b1e:	4606      	mov	r6, r0
 8006b20:	460c      	mov	r4, r1
 8006b22:	4615      	mov	r5, r2

	PID_controller(target, counter, &pid_fraction);
 8006b24:	4a1d      	ldr	r2, [pc, #116]	@ (8006b9c <TMC2209_watchPosition+0x80>)
 8006b26:	f7ff ff2f 	bl	8006988 <PID_controller>

	int32_t error = *target - *counter;
 8006b2a:	6831      	ldr	r1, [r6, #0]
 8006b2c:	6823      	ldr	r3, [r4, #0]
	if(error == 0){
 8006b2e:	4299      	cmp	r1, r3
 8006b30:	d01b      	beq.n	8006b6a <TMC2209_watchPosition+0x4e>
		TMC2209_stop();
		*speed = 0;
		return;
	}else{
		TMC2209_move();
 8006b32:	f7ff fee1 	bl	80068f8 <TMC2209_move>
	}

	if(*counter > *target) TMC2209_direction(TMC2209_ROT_FWD);
 8006b36:	6822      	ldr	r2, [r4, #0]
 8006b38:	6833      	ldr	r3, [r6, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	dc1a      	bgt.n	8006b74 <TMC2209_watchPosition+0x58>
	if(*counter < *target) TMC2209_direction(TMC2209_ROT_REV);
 8006b3e:	6822      	ldr	r2, [r4, #0]
 8006b40:	6833      	ldr	r3, [r6, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	db1a      	blt.n	8006b7c <TMC2209_watchPosition+0x60>

	if(abs(*target - *counter) > 100){
 8006b46:	6833      	ldr	r3, [r6, #0]
 8006b48:	6822      	ldr	r2, [r4, #0]
 8006b4a:	1a9b      	subs	r3, r3, r2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	bfb8      	it	lt
 8006b50:	425b      	neglt	r3, r3
 8006b52:	2b64      	cmp	r3, #100	@ 0x64
 8006b54:	dd1a      	ble.n	8006b8c <TMC2209_watchPosition+0x70>
		if(active_microstep != TMC2209_Microsteps_1){
 8006b56:	4b12      	ldr	r3, [pc, #72]	@ (8006ba0 <TMC2209_watchPosition+0x84>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	2b08      	cmp	r3, #8
 8006b5c:	d112      	bne.n	8006b84 <TMC2209_watchPosition+0x68>
			TMC2209_setMicrostep(TMC2209_Microsteps_64);
		}
	}

//	*speed = pid_fraction * MAX_SPEED;
	*speed = pid_fraction;
 8006b5e:	4b0f      	ldr	r3, [pc, #60]	@ (8006b9c <TMC2209_watchPosition+0x80>)
 8006b60:	6818      	ldr	r0, [r3, #0]
 8006b62:	6028      	str	r0, [r5, #0]
	TMC2209_velocity(*speed);
 8006b64:	f7ff fe6c 	bl	8006840 <TMC2209_velocity>
}
 8006b68:	bd70      	pop	{r4, r5, r6, pc}
		TMC2209_stop();
 8006b6a:	f7ff fed7 	bl	800691c <TMC2209_stop>
		*speed = 0;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	602b      	str	r3, [r5, #0]
		return;
 8006b72:	e7f9      	b.n	8006b68 <TMC2209_watchPosition+0x4c>
	if(*counter > *target) TMC2209_direction(TMC2209_ROT_FWD);
 8006b74:	2000      	movs	r0, #0
 8006b76:	f7ff fee3 	bl	8006940 <TMC2209_direction>
 8006b7a:	e7e0      	b.n	8006b3e <TMC2209_watchPosition+0x22>
	if(*counter < *target) TMC2209_direction(TMC2209_ROT_REV);
 8006b7c:	2001      	movs	r0, #1
 8006b7e:	f7ff fedf 	bl	8006940 <TMC2209_direction>
 8006b82:	e7e0      	b.n	8006b46 <TMC2209_watchPosition+0x2a>
			TMC2209_setMicrostep(TMC2209_Microsteps_1);
 8006b84:	2008      	movs	r0, #8
 8006b86:	f7ff fe39 	bl	80067fc <TMC2209_setMicrostep>
 8006b8a:	e7e8      	b.n	8006b5e <TMC2209_watchPosition+0x42>
		if(active_microstep != TMC2209_Microsteps_64){
 8006b8c:	4b04      	ldr	r3, [pc, #16]	@ (8006ba0 <TMC2209_watchPosition+0x84>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d0e4      	beq.n	8006b5e <TMC2209_watchPosition+0x42>
			TMC2209_setMicrostep(TMC2209_Microsteps_64);
 8006b94:	2002      	movs	r0, #2
 8006b96:	f7ff fe31 	bl	80067fc <TMC2209_setMicrostep>
 8006b9a:	e7e0      	b.n	8006b5e <TMC2209_watchPosition+0x42>
 8006b9c:	20001258 	.word	0x20001258
 8006ba0:	2000127c 	.word	0x2000127c

08006ba4 <HAL_TIM_PWM_PulseFinishedCallback>:
	HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);

}
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
	if (htim->Instance == TIM2) {
 8006ba4:	6803      	ldr	r3, [r0, #0]
 8006ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006baa:	d000      	beq.n	8006bae <HAL_TIM_PWM_PulseFinishedCallback+0xa>
			oneStepMove_start = FALSE;
		}

		stepCounter ++;
	}
}
 8006bac:	4770      	bx	lr
		if(oneStepMove_start){
 8006bae:	4b07      	ldr	r3, [pc, #28]	@ (8006bcc <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	b12b      	cbz	r3, 8006bc0 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>
			oneStepMove_finish = TRUE;
 8006bb4:	4b06      	ldr	r3, [pc, #24]	@ (8006bd0 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	701a      	strb	r2, [r3, #0]
			oneStepMove_start = FALSE;
 8006bba:	4b04      	ldr	r3, [pc, #16]	@ (8006bcc <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	701a      	strb	r2, [r3, #0]
		stepCounter ++;
 8006bc0:	4a04      	ldr	r2, [pc, #16]	@ (8006bd4 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 8006bc2:	6813      	ldr	r3, [r2, #0]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	6013      	str	r3, [r2, #0]
}
 8006bc8:	e7f0      	b.n	8006bac <HAL_TIM_PWM_PulseFinishedCallback+0x8>
 8006bca:	bf00      	nop
 8006bcc:	20001250 	.word	0x20001250
 8006bd0:	20001251 	.word	0x20001251
 8006bd4:	20001270 	.word	0x20001270

08006bd8 <calculateCRC>:
#include "../Inc/TMC2209_HAL.h"

extern UART_HandleTypeDef huart1;

static void calculateCRC(uint8_t* datagram, uint8_t datagram_len)
{
 8006bd8:	b530      	push	{r4, r5, lr}
 8006bda:	4604      	mov	r4, r0
 8006bdc:	460d      	mov	r5, r1
	int i,j;
	uint8_t *crc = datagram + (datagram_len - 1);
 8006bde:	1e4b      	subs	r3, r1, #1
 8006be0:	eb00 0e03 	add.w	lr, r0, r3
	uint8_t currentByte;
	*crc = 0;
 8006be4:	2100      	movs	r1, #0
 8006be6:	54c1      	strb	r1, [r0, r3]
	for (i = 0; i < (datagram_len - 1); i++) {
 8006be8:	e015      	b.n	8006c16 <calculateCRC+0x3e>
		currentByte = datagram[i];
		for (j = 0; j < 8; j++) {
			if ((*crc >> 7) ^ (currentByte & 0x01))
				*crc = (*crc << 1) ^ 0x07;
			else
				*crc = (*crc << 1);
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	f88e 3000 	strb.w	r3, [lr]
			currentByte = currentByte >> 1;
 8006bf0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
		for (j = 0; j < 8; j++) {
 8006bf4:	3201      	adds	r2, #1
 8006bf6:	2a07      	cmp	r2, #7
 8006bf8:	dc0c      	bgt.n	8006c14 <calculateCRC+0x3c>
			if ((*crc >> 7) ^ (currentByte & 0x01))
 8006bfa:	f89e 3000 	ldrb.w	r3, [lr]
 8006bfe:	f00c 0001 	and.w	r0, ip, #1
 8006c02:	ebb0 1fd3 	cmp.w	r0, r3, lsr #7
 8006c06:	d0f0      	beq.n	8006bea <calculateCRC+0x12>
				*crc = (*crc << 1) ^ 0x07;
 8006c08:	005b      	lsls	r3, r3, #1
 8006c0a:	f083 0307 	eor.w	r3, r3, #7
 8006c0e:	f88e 3000 	strb.w	r3, [lr]
 8006c12:	e7ed      	b.n	8006bf0 <calculateCRC+0x18>
	for (i = 0; i < (datagram_len - 1); i++) {
 8006c14:	3101      	adds	r1, #1
 8006c16:	1e6b      	subs	r3, r5, #1
 8006c18:	428b      	cmp	r3, r1
 8006c1a:	dd03      	ble.n	8006c24 <calculateCRC+0x4c>
		currentByte = datagram[i];
 8006c1c:	f814 c001 	ldrb.w	ip, [r4, r1]
		for (j = 0; j < 8; j++) {
 8006c20:	2200      	movs	r2, #0
 8006c22:	e7e8      	b.n	8006bf6 <calculateCRC+0x1e>
		}
	}
}
 8006c24:	bd30      	pop	{r4, r5, pc}

08006c26 <byteswap>:
static void byteswap (uint8_t data[4])
{
    uint8_t tmp;

    tmp = data[0];
 8006c26:	7803      	ldrb	r3, [r0, #0]
    data[0] = data[3];
 8006c28:	78c2      	ldrb	r2, [r0, #3]
 8006c2a:	7002      	strb	r2, [r0, #0]
    data[3] = tmp;
 8006c2c:	70c3      	strb	r3, [r0, #3]
    tmp = data[1];
 8006c2e:	7843      	ldrb	r3, [r0, #1]
    data[1] = data[2];
 8006c30:	7882      	ldrb	r2, [r0, #2]
 8006c32:	7042      	strb	r2, [r0, #1]
    data[2] = tmp;
 8006c34:	7083      	strb	r3, [r0, #2]
}
 8006c36:	4770      	bx	lr

08006c38 <TMC2209_HAL_Write>:

HAL_StatusTypeDef TMC2209_HAL_Write(uint8_t reg, uint32_t data)
{
 8006c38:	b510      	push	{r4, lr}
 8006c3a:	b082      	sub	sp, #8
	TMC2209_Write_Datagram_t datagram;
	datagram.data = 0;
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e9cd 2300 	strd	r2, r3, [sp]
	datagram.message.sync = 0x05;
 8006c44:	2305      	movs	r3, #5
 8006c46:	f88d 3000 	strb.w	r3, [sp]
	datagram.message.slave = 0x00;
	datagram.message.address.idx = reg;
 8006c4a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8006c4e:	f360 0306 	bfi	r3, r0, #0, #7
 8006c52:	f88d 3002 	strb.w	r3, [sp, #2]
	datagram.message.address.write = REG_WRITE;
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c5c:	f88d 3002 	strb.w	r3, [sp, #2]
	datagram.message.payload.value = data;
 8006c60:	f8cd 1003 	str.w	r1, [sp, #3]
	byteswap(datagram.message.payload.data);
 8006c64:	f10d 0003 	add.w	r0, sp, #3
 8006c68:	f7ff ffdd 	bl	8006c26 <byteswap>

	calculateCRC(datagram.bytes, sizeof(TMC2209_Write_Datagram_t));
 8006c6c:	2108      	movs	r1, #8
 8006c6e:	4668      	mov	r0, sp
 8006c70:	f7ff ffb2 	bl	8006bd8 <calculateCRC>
	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8006c74:	4c06      	ldr	r4, [pc, #24]	@ (8006c90 <TMC2209_HAL_Write+0x58>)
 8006c76:	4620      	mov	r0, r4
 8006c78:	f7fe fb8a 	bl	8005390 <HAL_HalfDuplex_EnableTransmitter>
	HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, datagram.bytes, sizeof(TMC2209_Write_Datagram_t), HAL_MAX_DELAY);
 8006c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c80:	2208      	movs	r2, #8
 8006c82:	4669      	mov	r1, sp
 8006c84:	4620      	mov	r0, r4
 8006c86:	f7fe f8e6 	bl	8004e56 <HAL_UART_Transmit>

	return status;
}
 8006c8a:	b002      	add	sp, #8
 8006c8c:	bd10      	pop	{r4, pc}
 8006c8e:	bf00      	nop
 8006c90:	200003a0 	.word	0x200003a0

08006c94 <TMC2209_HAL_Read>:
HAL_StatusTypeDef TMC2209_HAL_Read(uint8_t reg, uint32_t* result)
{
 8006c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c96:	b087      	sub	sp, #28
 8006c98:	460e      	mov	r6, r1
	TMC2209_Read_Datagram_t datagram;
	TMC2209_Write_Datagram_t res;

	datagram.data = 0;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9305      	str	r3, [sp, #20]
	res.data = 0;
 8006c9e:	9303      	str	r3, [sp, #12]
 8006ca0:	9304      	str	r3, [sp, #16]
	datagram.message.sync = 0x05;
 8006ca2:	2305      	movs	r3, #5
 8006ca4:	f88d 3014 	strb.w	r3, [sp, #20]
	datagram.message.slave = 0x00;
	datagram.message.address.idx = reg & 0x7F;
 8006ca8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006cac:	f360 0306 	bfi	r3, r0, #0, #7
 8006cb0:	f88d 3016 	strb.w	r3, [sp, #22]
	datagram.message.address.write = REG_READ;
	calculateCRC(datagram.bytes, sizeof(TMC2209_Read_Datagram_t));
 8006cb4:	2104      	movs	r1, #4
 8006cb6:	a805      	add	r0, sp, #20
 8006cb8:	f7ff ff8e 	bl	8006bd8 <calculateCRC>

	HAL_HalfDuplex_EnableTransmitter(&huart1);
 8006cbc:	4c1f      	ldr	r4, [pc, #124]	@ (8006d3c <TMC2209_HAL_Read+0xa8>)
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	f7fe fb66 	bl	8005390 <HAL_HalfDuplex_EnableTransmitter>
	HAL_StatusTypeDef wstatus = HAL_UART_Transmit(&huart1, datagram.bytes, sizeof(TMC2209_Read_Datagram_t), HAL_MAX_DELAY);
 8006cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cc8:	2204      	movs	r2, #4
 8006cca:	a905      	add	r1, sp, #20
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f7fe f8c2 	bl	8004e56 <HAL_UART_Transmit>
	if(wstatus == HAL_OK){
 8006cd2:	4607      	mov	r7, r0
 8006cd4:	bb08      	cbnz	r0, 8006d1a <TMC2209_HAL_Read+0x86>
		uint8_t buffer[8] = {0};
 8006cd6:	2400      	movs	r4, #0
 8006cd8:	9401      	str	r4, [sp, #4]
 8006cda:	9402      	str	r4, [sp, #8]
		for(int i = 0; i < sizeof(buffer) ; i++){
 8006cdc:	e00b      	b.n	8006cf6 <TMC2209_HAL_Read+0x62>
			HAL_HalfDuplex_EnableReceiver(&huart1);
 8006cde:	4d17      	ldr	r5, [pc, #92]	@ (8006d3c <TMC2209_HAL_Read+0xa8>)
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	f7fe fb70 	bl	80053c6 <HAL_HalfDuplex_EnableReceiver>
			HAL_UART_Receive(&huart1, &buffer[i], sizeof(buffer), 100);
 8006ce6:	2364      	movs	r3, #100	@ 0x64
 8006ce8:	2208      	movs	r2, #8
 8006cea:	a901      	add	r1, sp, #4
 8006cec:	4421      	add	r1, r4
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f7fe f917 	bl	8004f22 <HAL_UART_Receive>
		for(int i = 0; i < sizeof(buffer) ; i++){
 8006cf4:	3401      	adds	r4, #1
 8006cf6:	2c07      	cmp	r4, #7
 8006cf8:	d9f1      	bls.n	8006cde <TMC2209_HAL_Read+0x4a>
		}

		memcpy(res.bytes, buffer, sizeof(buffer));
 8006cfa:	ab03      	add	r3, sp, #12
 8006cfc:	aa01      	add	r2, sp, #4
 8006cfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d02:	e883 0003 	stmia.w	r3, {r0, r1}
		uint8_t crc = res.message.crc;
 8006d06:	f89d 4013 	ldrb.w	r4, [sp, #19]
		calculateCRC(res.bytes, sizeof(	TMC2209_Write_Datagram_t));
 8006d0a:	2108      	movs	r1, #8
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff ff63 	bl	8006bd8 <calculateCRC>
		if(res.message.slave == 0xFF && crc == res.message.crc){
 8006d12:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8006d16:	2bff      	cmp	r3, #255	@ 0xff
 8006d18:	d002      	beq.n	8006d20 <TMC2209_HAL_Read+0x8c>
			byteswap(temp_var);
			*result = *(uint32_t*)temp_var;
		}
	}
	return wstatus;
}
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	b007      	add	sp, #28
 8006d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(res.message.slave == 0xFF && crc == res.message.crc){
 8006d20:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8006d24:	42a3      	cmp	r3, r4
 8006d26:	d1f8      	bne.n	8006d1a <TMC2209_HAL_Read+0x86>
			memcpy(temp_var,res.message.payload.data, sizeof(temp_var));
 8006d28:	f8dd 300f 	ldr.w	r3, [sp, #15]
 8006d2c:	9300      	str	r3, [sp, #0]
			byteswap(temp_var);
 8006d2e:	4668      	mov	r0, sp
 8006d30:	f7ff ff79 	bl	8006c26 <byteswap>
			*result = *(uint32_t*)temp_var;
 8006d34:	9b00      	ldr	r3, [sp, #0]
 8006d36:	6033      	str	r3, [r6, #0]
 8006d38:	e7ef      	b.n	8006d1a <TMC2209_HAL_Read+0x86>
 8006d3a:	bf00      	nop
 8006d3c:	200003a0 	.word	0x200003a0

08006d40 <__malloc_lock>:
 8006d40:	4801      	ldr	r0, [pc, #4]	@ (8006d48 <__malloc_lock+0x8>)
 8006d42:	f000 b891 	b.w	8006e68 <__retarget_lock_acquire_recursive>
 8006d46:	bf00      	nop
 8006d48:	200013c8 	.word	0x200013c8

08006d4c <__malloc_unlock>:
 8006d4c:	4801      	ldr	r0, [pc, #4]	@ (8006d54 <__malloc_unlock+0x8>)
 8006d4e:	f000 b88c 	b.w	8006e6a <__retarget_lock_release_recursive>
 8006d52:	bf00      	nop
 8006d54:	200013c8 	.word	0x200013c8

08006d58 <memset>:
 8006d58:	4603      	mov	r3, r0
 8006d5a:	4402      	add	r2, r0
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d100      	bne.n	8006d62 <memset+0xa>
 8006d60:	4770      	bx	lr
 8006d62:	f803 1b01 	strb.w	r1, [r3], #1
 8006d66:	e7f9      	b.n	8006d5c <memset+0x4>

08006d68 <_reclaim_reent>:
 8006d68:	4b29      	ldr	r3, [pc, #164]	@ (8006e10 <_reclaim_reent+0xa8>)
 8006d6a:	b570      	push	{r4, r5, r6, lr}
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4604      	mov	r4, r0
 8006d70:	4283      	cmp	r3, r0
 8006d72:	d04b      	beq.n	8006e0c <_reclaim_reent+0xa4>
 8006d74:	69c3      	ldr	r3, [r0, #28]
 8006d76:	b1ab      	cbz	r3, 8006da4 <_reclaim_reent+0x3c>
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	b16b      	cbz	r3, 8006d98 <_reclaim_reent+0x30>
 8006d7c:	2500      	movs	r5, #0
 8006d7e:	69e3      	ldr	r3, [r4, #28]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	5959      	ldr	r1, [r3, r5]
 8006d84:	2900      	cmp	r1, #0
 8006d86:	d13b      	bne.n	8006e00 <_reclaim_reent+0x98>
 8006d88:	3504      	adds	r5, #4
 8006d8a:	2d80      	cmp	r5, #128	@ 0x80
 8006d8c:	d1f7      	bne.n	8006d7e <_reclaim_reent+0x16>
 8006d8e:	69e3      	ldr	r3, [r4, #28]
 8006d90:	4620      	mov	r0, r4
 8006d92:	68d9      	ldr	r1, [r3, #12]
 8006d94:	f000 f86a 	bl	8006e6c <_free_r>
 8006d98:	69e3      	ldr	r3, [r4, #28]
 8006d9a:	6819      	ldr	r1, [r3, #0]
 8006d9c:	b111      	cbz	r1, 8006da4 <_reclaim_reent+0x3c>
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f000 f864 	bl	8006e6c <_free_r>
 8006da4:	6961      	ldr	r1, [r4, #20]
 8006da6:	b111      	cbz	r1, 8006dae <_reclaim_reent+0x46>
 8006da8:	4620      	mov	r0, r4
 8006daa:	f000 f85f 	bl	8006e6c <_free_r>
 8006dae:	69e1      	ldr	r1, [r4, #28]
 8006db0:	b111      	cbz	r1, 8006db8 <_reclaim_reent+0x50>
 8006db2:	4620      	mov	r0, r4
 8006db4:	f000 f85a 	bl	8006e6c <_free_r>
 8006db8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006dba:	b111      	cbz	r1, 8006dc2 <_reclaim_reent+0x5a>
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f000 f855 	bl	8006e6c <_free_r>
 8006dc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dc4:	b111      	cbz	r1, 8006dcc <_reclaim_reent+0x64>
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f000 f850 	bl	8006e6c <_free_r>
 8006dcc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006dce:	b111      	cbz	r1, 8006dd6 <_reclaim_reent+0x6e>
 8006dd0:	4620      	mov	r0, r4
 8006dd2:	f000 f84b 	bl	8006e6c <_free_r>
 8006dd6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006dd8:	b111      	cbz	r1, 8006de0 <_reclaim_reent+0x78>
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f000 f846 	bl	8006e6c <_free_r>
 8006de0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006de2:	b111      	cbz	r1, 8006dea <_reclaim_reent+0x82>
 8006de4:	4620      	mov	r0, r4
 8006de6:	f000 f841 	bl	8006e6c <_free_r>
 8006dea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006dec:	b111      	cbz	r1, 8006df4 <_reclaim_reent+0x8c>
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 f83c 	bl	8006e6c <_free_r>
 8006df4:	6a23      	ldr	r3, [r4, #32]
 8006df6:	b14b      	cbz	r3, 8006e0c <_reclaim_reent+0xa4>
 8006df8:	4620      	mov	r0, r4
 8006dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006dfe:	4718      	bx	r3
 8006e00:	680e      	ldr	r6, [r1, #0]
 8006e02:	4620      	mov	r0, r4
 8006e04:	f000 f832 	bl	8006e6c <_free_r>
 8006e08:	4631      	mov	r1, r6
 8006e0a:	e7bb      	b.n	8006d84 <_reclaim_reent+0x1c>
 8006e0c:	bd70      	pop	{r4, r5, r6, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000020 	.word	0x20000020

08006e14 <__errno>:
 8006e14:	4b01      	ldr	r3, [pc, #4]	@ (8006e1c <__errno+0x8>)
 8006e16:	6818      	ldr	r0, [r3, #0]
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	20000020 	.word	0x20000020

08006e20 <__libc_init_array>:
 8006e20:	b570      	push	{r4, r5, r6, lr}
 8006e22:	2600      	movs	r6, #0
 8006e24:	4d0c      	ldr	r5, [pc, #48]	@ (8006e58 <__libc_init_array+0x38>)
 8006e26:	4c0d      	ldr	r4, [pc, #52]	@ (8006e5c <__libc_init_array+0x3c>)
 8006e28:	1b64      	subs	r4, r4, r5
 8006e2a:	10a4      	asrs	r4, r4, #2
 8006e2c:	42a6      	cmp	r6, r4
 8006e2e:	d109      	bne.n	8006e44 <__libc_init_array+0x24>
 8006e30:	f000 ffb8 	bl	8007da4 <_init>
 8006e34:	2600      	movs	r6, #0
 8006e36:	4d0a      	ldr	r5, [pc, #40]	@ (8006e60 <__libc_init_array+0x40>)
 8006e38:	4c0a      	ldr	r4, [pc, #40]	@ (8006e64 <__libc_init_array+0x44>)
 8006e3a:	1b64      	subs	r4, r4, r5
 8006e3c:	10a4      	asrs	r4, r4, #2
 8006e3e:	42a6      	cmp	r6, r4
 8006e40:	d105      	bne.n	8006e4e <__libc_init_array+0x2e>
 8006e42:	bd70      	pop	{r4, r5, r6, pc}
 8006e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e48:	4798      	blx	r3
 8006e4a:	3601      	adds	r6, #1
 8006e4c:	e7ee      	b.n	8006e2c <__libc_init_array+0xc>
 8006e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e52:	4798      	blx	r3
 8006e54:	3601      	adds	r6, #1
 8006e56:	e7f2      	b.n	8006e3e <__libc_init_array+0x1e>
 8006e58:	08007ed8 	.word	0x08007ed8
 8006e5c:	08007ed8 	.word	0x08007ed8
 8006e60:	08007ed8 	.word	0x08007ed8
 8006e64:	08007edc 	.word	0x08007edc

08006e68 <__retarget_lock_acquire_recursive>:
 8006e68:	4770      	bx	lr

08006e6a <__retarget_lock_release_recursive>:
 8006e6a:	4770      	bx	lr

08006e6c <_free_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4605      	mov	r5, r0
 8006e70:	2900      	cmp	r1, #0
 8006e72:	d040      	beq.n	8006ef6 <_free_r+0x8a>
 8006e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e78:	1f0c      	subs	r4, r1, #4
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	bfb8      	it	lt
 8006e7e:	18e4      	addlt	r4, r4, r3
 8006e80:	f7ff ff5e 	bl	8006d40 <__malloc_lock>
 8006e84:	4a1c      	ldr	r2, [pc, #112]	@ (8006ef8 <_free_r+0x8c>)
 8006e86:	6813      	ldr	r3, [r2, #0]
 8006e88:	b933      	cbnz	r3, 8006e98 <_free_r+0x2c>
 8006e8a:	6063      	str	r3, [r4, #4]
 8006e8c:	6014      	str	r4, [r2, #0]
 8006e8e:	4628      	mov	r0, r5
 8006e90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e94:	f7ff bf5a 	b.w	8006d4c <__malloc_unlock>
 8006e98:	42a3      	cmp	r3, r4
 8006e9a:	d908      	bls.n	8006eae <_free_r+0x42>
 8006e9c:	6820      	ldr	r0, [r4, #0]
 8006e9e:	1821      	adds	r1, r4, r0
 8006ea0:	428b      	cmp	r3, r1
 8006ea2:	bf01      	itttt	eq
 8006ea4:	6819      	ldreq	r1, [r3, #0]
 8006ea6:	685b      	ldreq	r3, [r3, #4]
 8006ea8:	1809      	addeq	r1, r1, r0
 8006eaa:	6021      	streq	r1, [r4, #0]
 8006eac:	e7ed      	b.n	8006e8a <_free_r+0x1e>
 8006eae:	461a      	mov	r2, r3
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	b10b      	cbz	r3, 8006eb8 <_free_r+0x4c>
 8006eb4:	42a3      	cmp	r3, r4
 8006eb6:	d9fa      	bls.n	8006eae <_free_r+0x42>
 8006eb8:	6811      	ldr	r1, [r2, #0]
 8006eba:	1850      	adds	r0, r2, r1
 8006ebc:	42a0      	cmp	r0, r4
 8006ebe:	d10b      	bne.n	8006ed8 <_free_r+0x6c>
 8006ec0:	6820      	ldr	r0, [r4, #0]
 8006ec2:	4401      	add	r1, r0
 8006ec4:	1850      	adds	r0, r2, r1
 8006ec6:	4283      	cmp	r3, r0
 8006ec8:	6011      	str	r1, [r2, #0]
 8006eca:	d1e0      	bne.n	8006e8e <_free_r+0x22>
 8006ecc:	6818      	ldr	r0, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	4408      	add	r0, r1
 8006ed2:	6010      	str	r0, [r2, #0]
 8006ed4:	6053      	str	r3, [r2, #4]
 8006ed6:	e7da      	b.n	8006e8e <_free_r+0x22>
 8006ed8:	d902      	bls.n	8006ee0 <_free_r+0x74>
 8006eda:	230c      	movs	r3, #12
 8006edc:	602b      	str	r3, [r5, #0]
 8006ede:	e7d6      	b.n	8006e8e <_free_r+0x22>
 8006ee0:	6820      	ldr	r0, [r4, #0]
 8006ee2:	1821      	adds	r1, r4, r0
 8006ee4:	428b      	cmp	r3, r1
 8006ee6:	bf01      	itttt	eq
 8006ee8:	6819      	ldreq	r1, [r3, #0]
 8006eea:	685b      	ldreq	r3, [r3, #4]
 8006eec:	1809      	addeq	r1, r1, r0
 8006eee:	6021      	streq	r1, [r4, #0]
 8006ef0:	6063      	str	r3, [r4, #4]
 8006ef2:	6054      	str	r4, [r2, #4]
 8006ef4:	e7cb      	b.n	8006e8e <_free_r+0x22>
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}
 8006ef8:	2000128c 	.word	0x2000128c

08006efc <pow>:
 8006efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f00:	4614      	mov	r4, r2
 8006f02:	461d      	mov	r5, r3
 8006f04:	4680      	mov	r8, r0
 8006f06:	4689      	mov	r9, r1
 8006f08:	f000 f986 	bl	8007218 <__ieee754_pow>
 8006f0c:	4622      	mov	r2, r4
 8006f0e:	4606      	mov	r6, r0
 8006f10:	460f      	mov	r7, r1
 8006f12:	462b      	mov	r3, r5
 8006f14:	4620      	mov	r0, r4
 8006f16:	4629      	mov	r1, r5
 8006f18:	f7f9 fd70 	bl	80009fc <__aeabi_dcmpun>
 8006f1c:	bbc8      	cbnz	r0, 8006f92 <pow+0x96>
 8006f1e:	2200      	movs	r2, #0
 8006f20:	2300      	movs	r3, #0
 8006f22:	4640      	mov	r0, r8
 8006f24:	4649      	mov	r1, r9
 8006f26:	f7f9 fd37 	bl	8000998 <__aeabi_dcmpeq>
 8006f2a:	b1b8      	cbz	r0, 8006f5c <pow+0x60>
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2300      	movs	r3, #0
 8006f30:	4620      	mov	r0, r4
 8006f32:	4629      	mov	r1, r5
 8006f34:	f7f9 fd30 	bl	8000998 <__aeabi_dcmpeq>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d141      	bne.n	8006fc0 <pow+0xc4>
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	4629      	mov	r1, r5
 8006f40:	f000 f848 	bl	8006fd4 <finite>
 8006f44:	b328      	cbz	r0, 8006f92 <pow+0x96>
 8006f46:	2200      	movs	r2, #0
 8006f48:	2300      	movs	r3, #0
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	f7f9 fd2d 	bl	80009ac <__aeabi_dcmplt>
 8006f52:	b1f0      	cbz	r0, 8006f92 <pow+0x96>
 8006f54:	f7ff ff5e 	bl	8006e14 <__errno>
 8006f58:	2322      	movs	r3, #34	@ 0x22
 8006f5a:	e019      	b.n	8006f90 <pow+0x94>
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	4639      	mov	r1, r7
 8006f60:	f000 f838 	bl	8006fd4 <finite>
 8006f64:	b9c8      	cbnz	r0, 8006f9a <pow+0x9e>
 8006f66:	4640      	mov	r0, r8
 8006f68:	4649      	mov	r1, r9
 8006f6a:	f000 f833 	bl	8006fd4 <finite>
 8006f6e:	b1a0      	cbz	r0, 8006f9a <pow+0x9e>
 8006f70:	4620      	mov	r0, r4
 8006f72:	4629      	mov	r1, r5
 8006f74:	f000 f82e 	bl	8006fd4 <finite>
 8006f78:	b178      	cbz	r0, 8006f9a <pow+0x9e>
 8006f7a:	4632      	mov	r2, r6
 8006f7c:	463b      	mov	r3, r7
 8006f7e:	4630      	mov	r0, r6
 8006f80:	4639      	mov	r1, r7
 8006f82:	f7f9 fd3b 	bl	80009fc <__aeabi_dcmpun>
 8006f86:	2800      	cmp	r0, #0
 8006f88:	d0e4      	beq.n	8006f54 <pow+0x58>
 8006f8a:	f7ff ff43 	bl	8006e14 <__errno>
 8006f8e:	2321      	movs	r3, #33	@ 0x21
 8006f90:	6003      	str	r3, [r0, #0]
 8006f92:	4630      	mov	r0, r6
 8006f94:	4639      	mov	r1, r7
 8006f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	f7f9 fcf9 	bl	8000998 <__aeabi_dcmpeq>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	d0f3      	beq.n	8006f92 <pow+0x96>
 8006faa:	4640      	mov	r0, r8
 8006fac:	4649      	mov	r1, r9
 8006fae:	f000 f811 	bl	8006fd4 <finite>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	d0ed      	beq.n	8006f92 <pow+0x96>
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	4629      	mov	r1, r5
 8006fba:	f000 f80b 	bl	8006fd4 <finite>
 8006fbe:	e7c8      	b.n	8006f52 <pow+0x56>
 8006fc0:	2600      	movs	r6, #0
 8006fc2:	4f01      	ldr	r7, [pc, #4]	@ (8006fc8 <pow+0xcc>)
 8006fc4:	e7e5      	b.n	8006f92 <pow+0x96>
 8006fc6:	bf00      	nop
 8006fc8:	3ff00000 	.word	0x3ff00000

08006fcc <fabs>:
 8006fcc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4770      	bx	lr

08006fd4 <finite>:
 8006fd4:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8006fd8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8006fdc:	0fc0      	lsrs	r0, r0, #31
 8006fde:	4770      	bx	lr

08006fe0 <__ieee754_sqrt>:
 8006fe0:	4a67      	ldr	r2, [pc, #412]	@ (8007180 <__ieee754_sqrt+0x1a0>)
 8006fe2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe6:	438a      	bics	r2, r1
 8006fe8:	4606      	mov	r6, r0
 8006fea:	460f      	mov	r7, r1
 8006fec:	460b      	mov	r3, r1
 8006fee:	4604      	mov	r4, r0
 8006ff0:	d10e      	bne.n	8007010 <__ieee754_sqrt+0x30>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	f7f9 fa68 	bl	80004c8 <__aeabi_dmul>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	4639      	mov	r1, r7
 8007000:	f7f9 f8ac 	bl	800015c <__adddf3>
 8007004:	4606      	mov	r6, r0
 8007006:	460f      	mov	r7, r1
 8007008:	4630      	mov	r0, r6
 800700a:	4639      	mov	r1, r7
 800700c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007010:	2900      	cmp	r1, #0
 8007012:	dc0c      	bgt.n	800702e <__ieee754_sqrt+0x4e>
 8007014:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8007018:	4302      	orrs	r2, r0
 800701a:	d0f5      	beq.n	8007008 <__ieee754_sqrt+0x28>
 800701c:	b189      	cbz	r1, 8007042 <__ieee754_sqrt+0x62>
 800701e:	4602      	mov	r2, r0
 8007020:	f7f9 f89a 	bl	8000158 <__aeabi_dsub>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	f7f9 fb78 	bl	800071c <__aeabi_ddiv>
 800702c:	e7ea      	b.n	8007004 <__ieee754_sqrt+0x24>
 800702e:	150a      	asrs	r2, r1, #20
 8007030:	d115      	bne.n	800705e <__ieee754_sqrt+0x7e>
 8007032:	2100      	movs	r1, #0
 8007034:	e009      	b.n	800704a <__ieee754_sqrt+0x6a>
 8007036:	0ae3      	lsrs	r3, r4, #11
 8007038:	3a15      	subs	r2, #21
 800703a:	0564      	lsls	r4, r4, #21
 800703c:	2b00      	cmp	r3, #0
 800703e:	d0fa      	beq.n	8007036 <__ieee754_sqrt+0x56>
 8007040:	e7f7      	b.n	8007032 <__ieee754_sqrt+0x52>
 8007042:	460a      	mov	r2, r1
 8007044:	e7fa      	b.n	800703c <__ieee754_sqrt+0x5c>
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	3101      	adds	r1, #1
 800704a:	02d8      	lsls	r0, r3, #11
 800704c:	d5fb      	bpl.n	8007046 <__ieee754_sqrt+0x66>
 800704e:	1e48      	subs	r0, r1, #1
 8007050:	1a12      	subs	r2, r2, r0
 8007052:	f1c1 0020 	rsb	r0, r1, #32
 8007056:	fa24 f000 	lsr.w	r0, r4, r0
 800705a:	4303      	orrs	r3, r0
 800705c:	408c      	lsls	r4, r1
 800705e:	2600      	movs	r6, #0
 8007060:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8007064:	2116      	movs	r1, #22
 8007066:	07d2      	lsls	r2, r2, #31
 8007068:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800706c:	4632      	mov	r2, r6
 800706e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007076:	bf5c      	itt	pl
 8007078:	005b      	lslpl	r3, r3, #1
 800707a:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800707e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007082:	bf58      	it	pl
 8007084:	0064      	lslpl	r4, r4, #1
 8007086:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800708a:	107f      	asrs	r7, r7, #1
 800708c:	0064      	lsls	r4, r4, #1
 800708e:	1815      	adds	r5, r2, r0
 8007090:	429d      	cmp	r5, r3
 8007092:	bfde      	ittt	le
 8007094:	182a      	addle	r2, r5, r0
 8007096:	1b5b      	suble	r3, r3, r5
 8007098:	1836      	addle	r6, r6, r0
 800709a:	0fe5      	lsrs	r5, r4, #31
 800709c:	3901      	subs	r1, #1
 800709e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80070a2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80070a6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80070aa:	d1f0      	bne.n	800708e <__ieee754_sqrt+0xae>
 80070ac:	460d      	mov	r5, r1
 80070ae:	f04f 0a20 	mov.w	sl, #32
 80070b2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80070b6:	429a      	cmp	r2, r3
 80070b8:	eb01 0c00 	add.w	ip, r1, r0
 80070bc:	db02      	blt.n	80070c4 <__ieee754_sqrt+0xe4>
 80070be:	d113      	bne.n	80070e8 <__ieee754_sqrt+0x108>
 80070c0:	45a4      	cmp	ip, r4
 80070c2:	d811      	bhi.n	80070e8 <__ieee754_sqrt+0x108>
 80070c4:	f1bc 0f00 	cmp.w	ip, #0
 80070c8:	eb0c 0100 	add.w	r1, ip, r0
 80070cc:	da42      	bge.n	8007154 <__ieee754_sqrt+0x174>
 80070ce:	2900      	cmp	r1, #0
 80070d0:	db40      	blt.n	8007154 <__ieee754_sqrt+0x174>
 80070d2:	f102 0e01 	add.w	lr, r2, #1
 80070d6:	1a9b      	subs	r3, r3, r2
 80070d8:	4672      	mov	r2, lr
 80070da:	45a4      	cmp	ip, r4
 80070dc:	bf88      	it	hi
 80070de:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80070e2:	eba4 040c 	sub.w	r4, r4, ip
 80070e6:	4405      	add	r5, r0
 80070e8:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 80070ec:	f1ba 0a01 	subs.w	sl, sl, #1
 80070f0:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 80070f4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80070f8:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80070fc:	d1db      	bne.n	80070b6 <__ieee754_sqrt+0xd6>
 80070fe:	431c      	orrs	r4, r3
 8007100:	d01a      	beq.n	8007138 <__ieee754_sqrt+0x158>
 8007102:	4c20      	ldr	r4, [pc, #128]	@ (8007184 <__ieee754_sqrt+0x1a4>)
 8007104:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8007188 <__ieee754_sqrt+0x1a8>
 8007108:	e9d4 0100 	ldrd	r0, r1, [r4]
 800710c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007110:	f7f9 f822 	bl	8000158 <__aeabi_dsub>
 8007114:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007118:	4602      	mov	r2, r0
 800711a:	460b      	mov	r3, r1
 800711c:	4640      	mov	r0, r8
 800711e:	4649      	mov	r1, r9
 8007120:	f7f9 fc4e 	bl	80009c0 <__aeabi_dcmple>
 8007124:	b140      	cbz	r0, 8007138 <__ieee754_sqrt+0x158>
 8007126:	e9d4 0100 	ldrd	r0, r1, [r4]
 800712a:	e9db 2300 	ldrd	r2, r3, [fp]
 800712e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007132:	d111      	bne.n	8007158 <__ieee754_sqrt+0x178>
 8007134:	4655      	mov	r5, sl
 8007136:	3601      	adds	r6, #1
 8007138:	1072      	asrs	r2, r6, #1
 800713a:	086b      	lsrs	r3, r5, #1
 800713c:	07f1      	lsls	r1, r6, #31
 800713e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007142:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007146:	bf48      	it	mi
 8007148:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800714c:	4618      	mov	r0, r3
 800714e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8007152:	e757      	b.n	8007004 <__ieee754_sqrt+0x24>
 8007154:	4696      	mov	lr, r2
 8007156:	e7be      	b.n	80070d6 <__ieee754_sqrt+0xf6>
 8007158:	f7f9 f800 	bl	800015c <__adddf3>
 800715c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007160:	4602      	mov	r2, r0
 8007162:	460b      	mov	r3, r1
 8007164:	4640      	mov	r0, r8
 8007166:	4649      	mov	r1, r9
 8007168:	f7f9 fc20 	bl	80009ac <__aeabi_dcmplt>
 800716c:	b120      	cbz	r0, 8007178 <__ieee754_sqrt+0x198>
 800716e:	1ca8      	adds	r0, r5, #2
 8007170:	bf08      	it	eq
 8007172:	3601      	addeq	r6, #1
 8007174:	3502      	adds	r5, #2
 8007176:	e7df      	b.n	8007138 <__ieee754_sqrt+0x158>
 8007178:	1c6b      	adds	r3, r5, #1
 800717a:	f023 0501 	bic.w	r5, r3, #1
 800717e:	e7db      	b.n	8007138 <__ieee754_sqrt+0x158>
 8007180:	7ff00000 	.word	0x7ff00000
 8007184:	20000078 	.word	0x20000078
 8007188:	20000070 	.word	0x20000070

0800718c <round>:
 800718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007192:	f2a7 32ff 	subw	r2, r7, #1023	@ 0x3ff
 8007196:	2a13      	cmp	r2, #19
 8007198:	4604      	mov	r4, r0
 800719a:	460d      	mov	r5, r1
 800719c:	460b      	mov	r3, r1
 800719e:	dc1a      	bgt.n	80071d6 <round+0x4a>
 80071a0:	2a00      	cmp	r2, #0
 80071a2:	da0b      	bge.n	80071bc <round+0x30>
 80071a4:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 80071a8:	3201      	adds	r2, #1
 80071aa:	bf04      	itt	eq
 80071ac:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 80071b0:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 80071b4:	2200      	movs	r2, #0
 80071b6:	461d      	mov	r5, r3
 80071b8:	4614      	mov	r4, r2
 80071ba:	e016      	b.n	80071ea <round+0x5e>
 80071bc:	4815      	ldr	r0, [pc, #84]	@ (8007214 <round+0x88>)
 80071be:	4110      	asrs	r0, r2
 80071c0:	4001      	ands	r1, r0
 80071c2:	4321      	orrs	r1, r4
 80071c4:	d011      	beq.n	80071ea <round+0x5e>
 80071c6:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 80071ca:	fa41 f202 	asr.w	r2, r1, r2
 80071ce:	4413      	add	r3, r2
 80071d0:	ea23 0300 	bic.w	r3, r3, r0
 80071d4:	e7ee      	b.n	80071b4 <round+0x28>
 80071d6:	2a33      	cmp	r2, #51	@ 0x33
 80071d8:	dd0a      	ble.n	80071f0 <round+0x64>
 80071da:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80071de:	d104      	bne.n	80071ea <round+0x5e>
 80071e0:	4602      	mov	r2, r0
 80071e2:	f7f8 ffbb 	bl	800015c <__adddf3>
 80071e6:	4604      	mov	r4, r0
 80071e8:	460d      	mov	r5, r1
 80071ea:	4620      	mov	r0, r4
 80071ec:	4629      	mov	r1, r5
 80071ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071f0:	f04f 30ff 	mov.w	r0, #4294967295
 80071f4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 80071f8:	40f8      	lsrs	r0, r7
 80071fa:	4220      	tst	r0, r4
 80071fc:	d0f5      	beq.n	80071ea <round+0x5e>
 80071fe:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8007202:	2201      	movs	r2, #1
 8007204:	408a      	lsls	r2, r1
 8007206:	1912      	adds	r2, r2, r4
 8007208:	bf28      	it	cs
 800720a:	3301      	addcs	r3, #1
 800720c:	ea22 0200 	bic.w	r2, r2, r0
 8007210:	e7d1      	b.n	80071b6 <round+0x2a>
 8007212:	bf00      	nop
 8007214:	000fffff 	.word	0x000fffff

08007218 <__ieee754_pow>:
 8007218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721c:	b091      	sub	sp, #68	@ 0x44
 800721e:	e9cd 2300 	strd	r2, r3, [sp]
 8007222:	468b      	mov	fp, r1
 8007224:	e9dd 1800 	ldrd	r1, r8, [sp]
 8007228:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 800722c:	4682      	mov	sl, r0
 800722e:	ea57 0001 	orrs.w	r0, r7, r1
 8007232:	d112      	bne.n	800725a <__ieee754_pow+0x42>
 8007234:	4653      	mov	r3, sl
 8007236:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 800723a:	18db      	adds	r3, r3, r3
 800723c:	4152      	adcs	r2, r2
 800723e:	4298      	cmp	r0, r3
 8007240:	4b91      	ldr	r3, [pc, #580]	@ (8007488 <__ieee754_pow+0x270>)
 8007242:	4193      	sbcs	r3, r2
 8007244:	f080 84ce 	bcs.w	8007be4 <__ieee754_pow+0x9cc>
 8007248:	e9dd 2300 	ldrd	r2, r3, [sp]
 800724c:	4650      	mov	r0, sl
 800724e:	4659      	mov	r1, fp
 8007250:	f7f8 ff84 	bl	800015c <__adddf3>
 8007254:	b011      	add	sp, #68	@ 0x44
 8007256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800725a:	4b8c      	ldr	r3, [pc, #560]	@ (800748c <__ieee754_pow+0x274>)
 800725c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8007260:	429e      	cmp	r6, r3
 8007262:	465d      	mov	r5, fp
 8007264:	46d1      	mov	r9, sl
 8007266:	d807      	bhi.n	8007278 <__ieee754_pow+0x60>
 8007268:	d102      	bne.n	8007270 <__ieee754_pow+0x58>
 800726a:	f1ba 0f00 	cmp.w	sl, #0
 800726e:	d1eb      	bne.n	8007248 <__ieee754_pow+0x30>
 8007270:	429f      	cmp	r7, r3
 8007272:	d801      	bhi.n	8007278 <__ieee754_pow+0x60>
 8007274:	d10f      	bne.n	8007296 <__ieee754_pow+0x7e>
 8007276:	b171      	cbz	r1, 8007296 <__ieee754_pow+0x7e>
 8007278:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800727c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007280:	ea55 0509 	orrs.w	r5, r5, r9
 8007284:	d1e0      	bne.n	8007248 <__ieee754_pow+0x30>
 8007286:	e9dd 3200 	ldrd	r3, r2, [sp]
 800728a:	18db      	adds	r3, r3, r3
 800728c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007290:	4152      	adcs	r2, r2
 8007292:	429d      	cmp	r5, r3
 8007294:	e7d4      	b.n	8007240 <__ieee754_pow+0x28>
 8007296:	2d00      	cmp	r5, #0
 8007298:	4633      	mov	r3, r6
 800729a:	da39      	bge.n	8007310 <__ieee754_pow+0xf8>
 800729c:	4a7c      	ldr	r2, [pc, #496]	@ (8007490 <__ieee754_pow+0x278>)
 800729e:	4297      	cmp	r7, r2
 80072a0:	d84e      	bhi.n	8007340 <__ieee754_pow+0x128>
 80072a2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80072a6:	4297      	cmp	r7, r2
 80072a8:	f240 84ab 	bls.w	8007c02 <__ieee754_pow+0x9ea>
 80072ac:	153a      	asrs	r2, r7, #20
 80072ae:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80072b2:	2a14      	cmp	r2, #20
 80072b4:	dd0f      	ble.n	80072d6 <__ieee754_pow+0xbe>
 80072b6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80072ba:	fa21 f402 	lsr.w	r4, r1, r2
 80072be:	fa04 f202 	lsl.w	r2, r4, r2
 80072c2:	428a      	cmp	r2, r1
 80072c4:	f040 849d 	bne.w	8007c02 <__ieee754_pow+0x9ea>
 80072c8:	f004 0401 	and.w	r4, r4, #1
 80072cc:	f1c4 0402 	rsb	r4, r4, #2
 80072d0:	2900      	cmp	r1, #0
 80072d2:	d15a      	bne.n	800738a <__ieee754_pow+0x172>
 80072d4:	e00e      	b.n	80072f4 <__ieee754_pow+0xdc>
 80072d6:	2900      	cmp	r1, #0
 80072d8:	d156      	bne.n	8007388 <__ieee754_pow+0x170>
 80072da:	f1c2 0214 	rsb	r2, r2, #20
 80072de:	fa47 f402 	asr.w	r4, r7, r2
 80072e2:	fa04 f202 	lsl.w	r2, r4, r2
 80072e6:	42ba      	cmp	r2, r7
 80072e8:	f040 8488 	bne.w	8007bfc <__ieee754_pow+0x9e4>
 80072ec:	f004 0401 	and.w	r4, r4, #1
 80072f0:	f1c4 0402 	rsb	r4, r4, #2
 80072f4:	4a67      	ldr	r2, [pc, #412]	@ (8007494 <__ieee754_pow+0x27c>)
 80072f6:	4297      	cmp	r7, r2
 80072f8:	d130      	bne.n	800735c <__ieee754_pow+0x144>
 80072fa:	f1b8 0f00 	cmp.w	r8, #0
 80072fe:	f280 8479 	bge.w	8007bf4 <__ieee754_pow+0x9dc>
 8007302:	4652      	mov	r2, sl
 8007304:	465b      	mov	r3, fp
 8007306:	2000      	movs	r0, #0
 8007308:	4962      	ldr	r1, [pc, #392]	@ (8007494 <__ieee754_pow+0x27c>)
 800730a:	f7f9 fa07 	bl	800071c <__aeabi_ddiv>
 800730e:	e7a1      	b.n	8007254 <__ieee754_pow+0x3c>
 8007310:	2400      	movs	r4, #0
 8007312:	2900      	cmp	r1, #0
 8007314:	d139      	bne.n	800738a <__ieee754_pow+0x172>
 8007316:	4a5d      	ldr	r2, [pc, #372]	@ (800748c <__ieee754_pow+0x274>)
 8007318:	4297      	cmp	r7, r2
 800731a:	d1eb      	bne.n	80072f4 <__ieee754_pow+0xdc>
 800731c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8007320:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8007324:	ea53 0309 	orrs.w	r3, r3, r9
 8007328:	f000 845c 	beq.w	8007be4 <__ieee754_pow+0x9cc>
 800732c:	4b5a      	ldr	r3, [pc, #360]	@ (8007498 <__ieee754_pow+0x280>)
 800732e:	429e      	cmp	r6, r3
 8007330:	d908      	bls.n	8007344 <__ieee754_pow+0x12c>
 8007332:	f1b8 0f00 	cmp.w	r8, #0
 8007336:	f2c0 8459 	blt.w	8007bec <__ieee754_pow+0x9d4>
 800733a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800733e:	e789      	b.n	8007254 <__ieee754_pow+0x3c>
 8007340:	2402      	movs	r4, #2
 8007342:	e7e6      	b.n	8007312 <__ieee754_pow+0xfa>
 8007344:	f1b8 0f00 	cmp.w	r8, #0
 8007348:	f04f 0000 	mov.w	r0, #0
 800734c:	f04f 0100 	mov.w	r1, #0
 8007350:	da80      	bge.n	8007254 <__ieee754_pow+0x3c>
 8007352:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007356:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800735a:	e77b      	b.n	8007254 <__ieee754_pow+0x3c>
 800735c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8007360:	d106      	bne.n	8007370 <__ieee754_pow+0x158>
 8007362:	4652      	mov	r2, sl
 8007364:	465b      	mov	r3, fp
 8007366:	4650      	mov	r0, sl
 8007368:	4659      	mov	r1, fp
 800736a:	f7f9 f8ad 	bl	80004c8 <__aeabi_dmul>
 800736e:	e771      	b.n	8007254 <__ieee754_pow+0x3c>
 8007370:	4a4a      	ldr	r2, [pc, #296]	@ (800749c <__ieee754_pow+0x284>)
 8007372:	4590      	cmp	r8, r2
 8007374:	d109      	bne.n	800738a <__ieee754_pow+0x172>
 8007376:	2d00      	cmp	r5, #0
 8007378:	db07      	blt.n	800738a <__ieee754_pow+0x172>
 800737a:	4650      	mov	r0, sl
 800737c:	4659      	mov	r1, fp
 800737e:	b011      	add	sp, #68	@ 0x44
 8007380:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007384:	f7ff be2c 	b.w	8006fe0 <__ieee754_sqrt>
 8007388:	2400      	movs	r4, #0
 800738a:	4650      	mov	r0, sl
 800738c:	4659      	mov	r1, fp
 800738e:	9302      	str	r3, [sp, #8]
 8007390:	f7ff fe1c 	bl	8006fcc <fabs>
 8007394:	9b02      	ldr	r3, [sp, #8]
 8007396:	f1b9 0f00 	cmp.w	r9, #0
 800739a:	d127      	bne.n	80073ec <__ieee754_pow+0x1d4>
 800739c:	4a3d      	ldr	r2, [pc, #244]	@ (8007494 <__ieee754_pow+0x27c>)
 800739e:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 80073a2:	4594      	cmp	ip, r2
 80073a4:	d000      	beq.n	80073a8 <__ieee754_pow+0x190>
 80073a6:	bb0e      	cbnz	r6, 80073ec <__ieee754_pow+0x1d4>
 80073a8:	f1b8 0f00 	cmp.w	r8, #0
 80073ac:	da05      	bge.n	80073ba <__ieee754_pow+0x1a2>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	2000      	movs	r0, #0
 80073b4:	4937      	ldr	r1, [pc, #220]	@ (8007494 <__ieee754_pow+0x27c>)
 80073b6:	f7f9 f9b1 	bl	800071c <__aeabi_ddiv>
 80073ba:	2d00      	cmp	r5, #0
 80073bc:	f6bf af4a 	bge.w	8007254 <__ieee754_pow+0x3c>
 80073c0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 80073c4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 80073c8:	4326      	orrs	r6, r4
 80073ca:	d108      	bne.n	80073de <__ieee754_pow+0x1c6>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4610      	mov	r0, r2
 80073d2:	4619      	mov	r1, r3
 80073d4:	f7f8 fec0 	bl	8000158 <__aeabi_dsub>
 80073d8:	4602      	mov	r2, r0
 80073da:	460b      	mov	r3, r1
 80073dc:	e795      	b.n	800730a <__ieee754_pow+0xf2>
 80073de:	2c01      	cmp	r4, #1
 80073e0:	f47f af38 	bne.w	8007254 <__ieee754_pow+0x3c>
 80073e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80073e8:	4619      	mov	r1, r3
 80073ea:	e733      	b.n	8007254 <__ieee754_pow+0x3c>
 80073ec:	0fea      	lsrs	r2, r5, #31
 80073ee:	3a01      	subs	r2, #1
 80073f0:	ea52 0c04 	orrs.w	ip, r2, r4
 80073f4:	d102      	bne.n	80073fc <__ieee754_pow+0x1e4>
 80073f6:	4652      	mov	r2, sl
 80073f8:	465b      	mov	r3, fp
 80073fa:	e7e9      	b.n	80073d0 <__ieee754_pow+0x1b8>
 80073fc:	f04f 0900 	mov.w	r9, #0
 8007400:	3c01      	subs	r4, #1
 8007402:	4314      	orrs	r4, r2
 8007404:	bf14      	ite	ne
 8007406:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8007494 <__ieee754_pow+0x27c>
 800740a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 80074a0 <__ieee754_pow+0x288>
 800740e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8007412:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8007416:	f240 8107 	bls.w	8007628 <__ieee754_pow+0x410>
 800741a:	4b22      	ldr	r3, [pc, #136]	@ (80074a4 <__ieee754_pow+0x28c>)
 800741c:	429f      	cmp	r7, r3
 800741e:	4b1e      	ldr	r3, [pc, #120]	@ (8007498 <__ieee754_pow+0x280>)
 8007420:	d913      	bls.n	800744a <__ieee754_pow+0x232>
 8007422:	429e      	cmp	r6, r3
 8007424:	d808      	bhi.n	8007438 <__ieee754_pow+0x220>
 8007426:	f1b8 0f00 	cmp.w	r8, #0
 800742a:	da08      	bge.n	800743e <__ieee754_pow+0x226>
 800742c:	2000      	movs	r0, #0
 800742e:	b011      	add	sp, #68	@ 0x44
 8007430:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007434:	f000 bcb0 	b.w	8007d98 <__math_oflow>
 8007438:	f1b8 0f00 	cmp.w	r8, #0
 800743c:	dcf6      	bgt.n	800742c <__ieee754_pow+0x214>
 800743e:	2000      	movs	r0, #0
 8007440:	b011      	add	sp, #68	@ 0x44
 8007442:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007446:	f000 bca2 	b.w	8007d8e <__math_uflow>
 800744a:	429e      	cmp	r6, r3
 800744c:	d20c      	bcs.n	8007468 <__ieee754_pow+0x250>
 800744e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007452:	2200      	movs	r2, #0
 8007454:	2300      	movs	r3, #0
 8007456:	f7f9 faa9 	bl	80009ac <__aeabi_dcmplt>
 800745a:	3800      	subs	r0, #0
 800745c:	bf18      	it	ne
 800745e:	2001      	movne	r0, #1
 8007460:	f1b8 0f00 	cmp.w	r8, #0
 8007464:	daec      	bge.n	8007440 <__ieee754_pow+0x228>
 8007466:	e7e2      	b.n	800742e <__ieee754_pow+0x216>
 8007468:	4b0a      	ldr	r3, [pc, #40]	@ (8007494 <__ieee754_pow+0x27c>)
 800746a:	2200      	movs	r2, #0
 800746c:	429e      	cmp	r6, r3
 800746e:	d91b      	bls.n	80074a8 <__ieee754_pow+0x290>
 8007470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007474:	2300      	movs	r3, #0
 8007476:	f7f9 fa99 	bl	80009ac <__aeabi_dcmplt>
 800747a:	3800      	subs	r0, #0
 800747c:	bf18      	it	ne
 800747e:	2001      	movne	r0, #1
 8007480:	f1b8 0f00 	cmp.w	r8, #0
 8007484:	dcd3      	bgt.n	800742e <__ieee754_pow+0x216>
 8007486:	e7db      	b.n	8007440 <__ieee754_pow+0x228>
 8007488:	fff00000 	.word	0xfff00000
 800748c:	7ff00000 	.word	0x7ff00000
 8007490:	433fffff 	.word	0x433fffff
 8007494:	3ff00000 	.word	0x3ff00000
 8007498:	3fefffff 	.word	0x3fefffff
 800749c:	3fe00000 	.word	0x3fe00000
 80074a0:	bff00000 	.word	0xbff00000
 80074a4:	43f00000 	.word	0x43f00000
 80074a8:	4b5b      	ldr	r3, [pc, #364]	@ (8007618 <__ieee754_pow+0x400>)
 80074aa:	f7f8 fe55 	bl	8000158 <__aeabi_dsub>
 80074ae:	a352      	add	r3, pc, #328	@ (adr r3, 80075f8 <__ieee754_pow+0x3e0>)
 80074b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b4:	4604      	mov	r4, r0
 80074b6:	460d      	mov	r5, r1
 80074b8:	f7f9 f806 	bl	80004c8 <__aeabi_dmul>
 80074bc:	a350      	add	r3, pc, #320	@ (adr r3, 8007600 <__ieee754_pow+0x3e8>)
 80074be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c2:	4606      	mov	r6, r0
 80074c4:	460f      	mov	r7, r1
 80074c6:	4620      	mov	r0, r4
 80074c8:	4629      	mov	r1, r5
 80074ca:	f7f8 fffd 	bl	80004c8 <__aeabi_dmul>
 80074ce:	2200      	movs	r2, #0
 80074d0:	4682      	mov	sl, r0
 80074d2:	468b      	mov	fp, r1
 80074d4:	4620      	mov	r0, r4
 80074d6:	4629      	mov	r1, r5
 80074d8:	4b50      	ldr	r3, [pc, #320]	@ (800761c <__ieee754_pow+0x404>)
 80074da:	f7f8 fff5 	bl	80004c8 <__aeabi_dmul>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	a149      	add	r1, pc, #292	@ (adr r1, 8007608 <__ieee754_pow+0x3f0>)
 80074e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074e8:	f7f8 fe36 	bl	8000158 <__aeabi_dsub>
 80074ec:	4622      	mov	r2, r4
 80074ee:	462b      	mov	r3, r5
 80074f0:	f7f8 ffea 	bl	80004c8 <__aeabi_dmul>
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	2000      	movs	r0, #0
 80074fa:	4949      	ldr	r1, [pc, #292]	@ (8007620 <__ieee754_pow+0x408>)
 80074fc:	f7f8 fe2c 	bl	8000158 <__aeabi_dsub>
 8007500:	4622      	mov	r2, r4
 8007502:	4680      	mov	r8, r0
 8007504:	4689      	mov	r9, r1
 8007506:	462b      	mov	r3, r5
 8007508:	4620      	mov	r0, r4
 800750a:	4629      	mov	r1, r5
 800750c:	f7f8 ffdc 	bl	80004c8 <__aeabi_dmul>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	4640      	mov	r0, r8
 8007516:	4649      	mov	r1, r9
 8007518:	f7f8 ffd6 	bl	80004c8 <__aeabi_dmul>
 800751c:	a33c      	add	r3, pc, #240	@ (adr r3, 8007610 <__ieee754_pow+0x3f8>)
 800751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007522:	f7f8 ffd1 	bl	80004c8 <__aeabi_dmul>
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	4650      	mov	r0, sl
 800752c:	4659      	mov	r1, fp
 800752e:	f7f8 fe13 	bl	8000158 <__aeabi_dsub>
 8007532:	2400      	movs	r4, #0
 8007534:	4602      	mov	r2, r0
 8007536:	460b      	mov	r3, r1
 8007538:	4680      	mov	r8, r0
 800753a:	4689      	mov	r9, r1
 800753c:	4630      	mov	r0, r6
 800753e:	4639      	mov	r1, r7
 8007540:	f7f8 fe0c 	bl	800015c <__adddf3>
 8007544:	4632      	mov	r2, r6
 8007546:	463b      	mov	r3, r7
 8007548:	4620      	mov	r0, r4
 800754a:	460d      	mov	r5, r1
 800754c:	f7f8 fe04 	bl	8000158 <__aeabi_dsub>
 8007550:	4602      	mov	r2, r0
 8007552:	460b      	mov	r3, r1
 8007554:	4640      	mov	r0, r8
 8007556:	4649      	mov	r1, r9
 8007558:	f7f8 fdfe 	bl	8000158 <__aeabi_dsub>
 800755c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007560:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007564:	2300      	movs	r3, #0
 8007566:	9304      	str	r3, [sp, #16]
 8007568:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800756c:	4606      	mov	r6, r0
 800756e:	460f      	mov	r7, r1
 8007570:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007574:	4652      	mov	r2, sl
 8007576:	465b      	mov	r3, fp
 8007578:	f7f8 fdee 	bl	8000158 <__aeabi_dsub>
 800757c:	4622      	mov	r2, r4
 800757e:	462b      	mov	r3, r5
 8007580:	f7f8 ffa2 	bl	80004c8 <__aeabi_dmul>
 8007584:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007588:	4680      	mov	r8, r0
 800758a:	4689      	mov	r9, r1
 800758c:	4630      	mov	r0, r6
 800758e:	4639      	mov	r1, r7
 8007590:	f7f8 ff9a 	bl	80004c8 <__aeabi_dmul>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4640      	mov	r0, r8
 800759a:	4649      	mov	r1, r9
 800759c:	f7f8 fdde 	bl	800015c <__adddf3>
 80075a0:	4652      	mov	r2, sl
 80075a2:	465b      	mov	r3, fp
 80075a4:	4606      	mov	r6, r0
 80075a6:	460f      	mov	r7, r1
 80075a8:	4620      	mov	r0, r4
 80075aa:	4629      	mov	r1, r5
 80075ac:	f7f8 ff8c 	bl	80004c8 <__aeabi_dmul>
 80075b0:	460b      	mov	r3, r1
 80075b2:	4602      	mov	r2, r0
 80075b4:	4680      	mov	r8, r0
 80075b6:	4689      	mov	r9, r1
 80075b8:	4630      	mov	r0, r6
 80075ba:	4639      	mov	r1, r7
 80075bc:	f7f8 fdce 	bl	800015c <__adddf3>
 80075c0:	4b18      	ldr	r3, [pc, #96]	@ (8007624 <__ieee754_pow+0x40c>)
 80075c2:	4604      	mov	r4, r0
 80075c4:	4299      	cmp	r1, r3
 80075c6:	460d      	mov	r5, r1
 80075c8:	468a      	mov	sl, r1
 80075ca:	468b      	mov	fp, r1
 80075cc:	f340 82e0 	ble.w	8007b90 <__ieee754_pow+0x978>
 80075d0:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80075d4:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80075d8:	4303      	orrs	r3, r0
 80075da:	f000 81df 	beq.w	800799c <__ieee754_pow+0x784>
 80075de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075e2:	2200      	movs	r2, #0
 80075e4:	2300      	movs	r3, #0
 80075e6:	f7f9 f9e1 	bl	80009ac <__aeabi_dcmplt>
 80075ea:	3800      	subs	r0, #0
 80075ec:	bf18      	it	ne
 80075ee:	2001      	movne	r0, #1
 80075f0:	e71d      	b.n	800742e <__ieee754_pow+0x216>
 80075f2:	bf00      	nop
 80075f4:	f3af 8000 	nop.w
 80075f8:	60000000 	.word	0x60000000
 80075fc:	3ff71547 	.word	0x3ff71547
 8007600:	f85ddf44 	.word	0xf85ddf44
 8007604:	3e54ae0b 	.word	0x3e54ae0b
 8007608:	55555555 	.word	0x55555555
 800760c:	3fd55555 	.word	0x3fd55555
 8007610:	652b82fe 	.word	0x652b82fe
 8007614:	3ff71547 	.word	0x3ff71547
 8007618:	3ff00000 	.word	0x3ff00000
 800761c:	3fd00000 	.word	0x3fd00000
 8007620:	3fe00000 	.word	0x3fe00000
 8007624:	408fffff 	.word	0x408fffff
 8007628:	4ad3      	ldr	r2, [pc, #844]	@ (8007978 <__ieee754_pow+0x760>)
 800762a:	402a      	ands	r2, r5
 800762c:	2a00      	cmp	r2, #0
 800762e:	f040 817a 	bne.w	8007926 <__ieee754_pow+0x70e>
 8007632:	4bd2      	ldr	r3, [pc, #840]	@ (800797c <__ieee754_pow+0x764>)
 8007634:	2200      	movs	r2, #0
 8007636:	f7f8 ff47 	bl	80004c8 <__aeabi_dmul>
 800763a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800763e:	460b      	mov	r3, r1
 8007640:	151a      	asrs	r2, r3, #20
 8007642:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007646:	4422      	add	r2, r4
 8007648:	920a      	str	r2, [sp, #40]	@ 0x28
 800764a:	4acd      	ldr	r2, [pc, #820]	@ (8007980 <__ieee754_pow+0x768>)
 800764c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007650:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8007654:	4293      	cmp	r3, r2
 8007656:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800765a:	dd08      	ble.n	800766e <__ieee754_pow+0x456>
 800765c:	4ac9      	ldr	r2, [pc, #804]	@ (8007984 <__ieee754_pow+0x76c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	f340 8163 	ble.w	800792a <__ieee754_pow+0x712>
 8007664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007666:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800766a:	3301      	adds	r3, #1
 800766c:	930a      	str	r3, [sp, #40]	@ 0x28
 800766e:	2600      	movs	r6, #0
 8007670:	00f3      	lsls	r3, r6, #3
 8007672:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007674:	4bc4      	ldr	r3, [pc, #784]	@ (8007988 <__ieee754_pow+0x770>)
 8007676:	4629      	mov	r1, r5
 8007678:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800767c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007680:	461a      	mov	r2, r3
 8007682:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007686:	4623      	mov	r3, r4
 8007688:	4682      	mov	sl, r0
 800768a:	f7f8 fd65 	bl	8000158 <__aeabi_dsub>
 800768e:	4652      	mov	r2, sl
 8007690:	462b      	mov	r3, r5
 8007692:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8007696:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800769a:	f7f8 fd5f 	bl	800015c <__adddf3>
 800769e:	4602      	mov	r2, r0
 80076a0:	460b      	mov	r3, r1
 80076a2:	2000      	movs	r0, #0
 80076a4:	49b9      	ldr	r1, [pc, #740]	@ (800798c <__ieee754_pow+0x774>)
 80076a6:	f7f9 f839 	bl	800071c <__aeabi_ddiv>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80076b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076b6:	f7f8 ff07 	bl	80004c8 <__aeabi_dmul>
 80076ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80076be:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80076c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80076c6:	2300      	movs	r3, #0
 80076c8:	2200      	movs	r2, #0
 80076ca:	46ab      	mov	fp, r5
 80076cc:	106d      	asrs	r5, r5, #1
 80076ce:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80076d2:	9304      	str	r3, [sp, #16]
 80076d4:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80076d8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80076dc:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80076e0:	4640      	mov	r0, r8
 80076e2:	4649      	mov	r1, r9
 80076e4:	4614      	mov	r4, r2
 80076e6:	461d      	mov	r5, r3
 80076e8:	f7f8 feee 	bl	80004c8 <__aeabi_dmul>
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076f4:	f7f8 fd30 	bl	8000158 <__aeabi_dsub>
 80076f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80076fc:	4606      	mov	r6, r0
 80076fe:	460f      	mov	r7, r1
 8007700:	4620      	mov	r0, r4
 8007702:	4629      	mov	r1, r5
 8007704:	f7f8 fd28 	bl	8000158 <__aeabi_dsub>
 8007708:	4602      	mov	r2, r0
 800770a:	460b      	mov	r3, r1
 800770c:	4650      	mov	r0, sl
 800770e:	4659      	mov	r1, fp
 8007710:	f7f8 fd22 	bl	8000158 <__aeabi_dsub>
 8007714:	4642      	mov	r2, r8
 8007716:	464b      	mov	r3, r9
 8007718:	f7f8 fed6 	bl	80004c8 <__aeabi_dmul>
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	4630      	mov	r0, r6
 8007722:	4639      	mov	r1, r7
 8007724:	f7f8 fd18 	bl	8000158 <__aeabi_dsub>
 8007728:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800772c:	f7f8 fecc 	bl	80004c8 <__aeabi_dmul>
 8007730:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007734:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007738:	4610      	mov	r0, r2
 800773a:	4619      	mov	r1, r3
 800773c:	f7f8 fec4 	bl	80004c8 <__aeabi_dmul>
 8007740:	a37b      	add	r3, pc, #492	@ (adr r3, 8007930 <__ieee754_pow+0x718>)
 8007742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007746:	4604      	mov	r4, r0
 8007748:	460d      	mov	r5, r1
 800774a:	f7f8 febd 	bl	80004c8 <__aeabi_dmul>
 800774e:	a37a      	add	r3, pc, #488	@ (adr r3, 8007938 <__ieee754_pow+0x720>)
 8007750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007754:	f7f8 fd02 	bl	800015c <__adddf3>
 8007758:	4622      	mov	r2, r4
 800775a:	462b      	mov	r3, r5
 800775c:	f7f8 feb4 	bl	80004c8 <__aeabi_dmul>
 8007760:	a377      	add	r3, pc, #476	@ (adr r3, 8007940 <__ieee754_pow+0x728>)
 8007762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007766:	f7f8 fcf9 	bl	800015c <__adddf3>
 800776a:	4622      	mov	r2, r4
 800776c:	462b      	mov	r3, r5
 800776e:	f7f8 feab 	bl	80004c8 <__aeabi_dmul>
 8007772:	a375      	add	r3, pc, #468	@ (adr r3, 8007948 <__ieee754_pow+0x730>)
 8007774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007778:	f7f8 fcf0 	bl	800015c <__adddf3>
 800777c:	4622      	mov	r2, r4
 800777e:	462b      	mov	r3, r5
 8007780:	f7f8 fea2 	bl	80004c8 <__aeabi_dmul>
 8007784:	a372      	add	r3, pc, #456	@ (adr r3, 8007950 <__ieee754_pow+0x738>)
 8007786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778a:	f7f8 fce7 	bl	800015c <__adddf3>
 800778e:	4622      	mov	r2, r4
 8007790:	462b      	mov	r3, r5
 8007792:	f7f8 fe99 	bl	80004c8 <__aeabi_dmul>
 8007796:	a370      	add	r3, pc, #448	@ (adr r3, 8007958 <__ieee754_pow+0x740>)
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	f7f8 fcde 	bl	800015c <__adddf3>
 80077a0:	4622      	mov	r2, r4
 80077a2:	4606      	mov	r6, r0
 80077a4:	460f      	mov	r7, r1
 80077a6:	462b      	mov	r3, r5
 80077a8:	4620      	mov	r0, r4
 80077aa:	4629      	mov	r1, r5
 80077ac:	f7f8 fe8c 	bl	80004c8 <__aeabi_dmul>
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	4630      	mov	r0, r6
 80077b6:	4639      	mov	r1, r7
 80077b8:	f7f8 fe86 	bl	80004c8 <__aeabi_dmul>
 80077bc:	4604      	mov	r4, r0
 80077be:	460d      	mov	r5, r1
 80077c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077c4:	4642      	mov	r2, r8
 80077c6:	464b      	mov	r3, r9
 80077c8:	f7f8 fcc8 	bl	800015c <__adddf3>
 80077cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80077d0:	f7f8 fe7a 	bl	80004c8 <__aeabi_dmul>
 80077d4:	4622      	mov	r2, r4
 80077d6:	462b      	mov	r3, r5
 80077d8:	f7f8 fcc0 	bl	800015c <__adddf3>
 80077dc:	4642      	mov	r2, r8
 80077de:	4682      	mov	sl, r0
 80077e0:	468b      	mov	fp, r1
 80077e2:	464b      	mov	r3, r9
 80077e4:	4640      	mov	r0, r8
 80077e6:	4649      	mov	r1, r9
 80077e8:	f7f8 fe6e 	bl	80004c8 <__aeabi_dmul>
 80077ec:	2200      	movs	r2, #0
 80077ee:	4b68      	ldr	r3, [pc, #416]	@ (8007990 <__ieee754_pow+0x778>)
 80077f0:	4606      	mov	r6, r0
 80077f2:	460f      	mov	r7, r1
 80077f4:	f7f8 fcb2 	bl	800015c <__adddf3>
 80077f8:	4652      	mov	r2, sl
 80077fa:	465b      	mov	r3, fp
 80077fc:	f7f8 fcae 	bl	800015c <__adddf3>
 8007800:	2400      	movs	r4, #0
 8007802:	460d      	mov	r5, r1
 8007804:	4622      	mov	r2, r4
 8007806:	460b      	mov	r3, r1
 8007808:	4640      	mov	r0, r8
 800780a:	4649      	mov	r1, r9
 800780c:	f7f8 fe5c 	bl	80004c8 <__aeabi_dmul>
 8007810:	2200      	movs	r2, #0
 8007812:	4680      	mov	r8, r0
 8007814:	4689      	mov	r9, r1
 8007816:	4620      	mov	r0, r4
 8007818:	4629      	mov	r1, r5
 800781a:	4b5d      	ldr	r3, [pc, #372]	@ (8007990 <__ieee754_pow+0x778>)
 800781c:	f7f8 fc9c 	bl	8000158 <__aeabi_dsub>
 8007820:	4632      	mov	r2, r6
 8007822:	463b      	mov	r3, r7
 8007824:	f7f8 fc98 	bl	8000158 <__aeabi_dsub>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	4650      	mov	r0, sl
 800782e:	4659      	mov	r1, fp
 8007830:	f7f8 fc92 	bl	8000158 <__aeabi_dsub>
 8007834:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007838:	f7f8 fe46 	bl	80004c8 <__aeabi_dmul>
 800783c:	4622      	mov	r2, r4
 800783e:	4606      	mov	r6, r0
 8007840:	460f      	mov	r7, r1
 8007842:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007846:	462b      	mov	r3, r5
 8007848:	f7f8 fe3e 	bl	80004c8 <__aeabi_dmul>
 800784c:	4602      	mov	r2, r0
 800784e:	460b      	mov	r3, r1
 8007850:	4630      	mov	r0, r6
 8007852:	4639      	mov	r1, r7
 8007854:	f7f8 fc82 	bl	800015c <__adddf3>
 8007858:	2400      	movs	r4, #0
 800785a:	4606      	mov	r6, r0
 800785c:	460f      	mov	r7, r1
 800785e:	4602      	mov	r2, r0
 8007860:	460b      	mov	r3, r1
 8007862:	4640      	mov	r0, r8
 8007864:	4649      	mov	r1, r9
 8007866:	f7f8 fc79 	bl	800015c <__adddf3>
 800786a:	a33d      	add	r3, pc, #244	@ (adr r3, 8007960 <__ieee754_pow+0x748>)
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	4620      	mov	r0, r4
 8007872:	460d      	mov	r5, r1
 8007874:	f7f8 fe28 	bl	80004c8 <__aeabi_dmul>
 8007878:	4642      	mov	r2, r8
 800787a:	464b      	mov	r3, r9
 800787c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007880:	4620      	mov	r0, r4
 8007882:	4629      	mov	r1, r5
 8007884:	f7f8 fc68 	bl	8000158 <__aeabi_dsub>
 8007888:	4602      	mov	r2, r0
 800788a:	460b      	mov	r3, r1
 800788c:	4630      	mov	r0, r6
 800788e:	4639      	mov	r1, r7
 8007890:	f7f8 fc62 	bl	8000158 <__aeabi_dsub>
 8007894:	a334      	add	r3, pc, #208	@ (adr r3, 8007968 <__ieee754_pow+0x750>)
 8007896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789a:	f7f8 fe15 	bl	80004c8 <__aeabi_dmul>
 800789e:	a334      	add	r3, pc, #208	@ (adr r3, 8007970 <__ieee754_pow+0x758>)
 80078a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a4:	4606      	mov	r6, r0
 80078a6:	460f      	mov	r7, r1
 80078a8:	4620      	mov	r0, r4
 80078aa:	4629      	mov	r1, r5
 80078ac:	f7f8 fe0c 	bl	80004c8 <__aeabi_dmul>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4630      	mov	r0, r6
 80078b6:	4639      	mov	r1, r7
 80078b8:	f7f8 fc50 	bl	800015c <__adddf3>
 80078bc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80078be:	4b35      	ldr	r3, [pc, #212]	@ (8007994 <__ieee754_pow+0x77c>)
 80078c0:	2400      	movs	r4, #0
 80078c2:	4413      	add	r3, r2
 80078c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c8:	f7f8 fc48 	bl	800015c <__adddf3>
 80078cc:	4682      	mov	sl, r0
 80078ce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80078d0:	468b      	mov	fp, r1
 80078d2:	f7f8 fd8f 	bl	80003f4 <__aeabi_i2d>
 80078d6:	4606      	mov	r6, r0
 80078d8:	460f      	mov	r7, r1
 80078da:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80078dc:	4b2e      	ldr	r3, [pc, #184]	@ (8007998 <__ieee754_pow+0x780>)
 80078de:	4413      	add	r3, r2
 80078e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078e4:	4652      	mov	r2, sl
 80078e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078ea:	465b      	mov	r3, fp
 80078ec:	f7f8 fc36 	bl	800015c <__adddf3>
 80078f0:	4642      	mov	r2, r8
 80078f2:	464b      	mov	r3, r9
 80078f4:	f7f8 fc32 	bl	800015c <__adddf3>
 80078f8:	4632      	mov	r2, r6
 80078fa:	463b      	mov	r3, r7
 80078fc:	f7f8 fc2e 	bl	800015c <__adddf3>
 8007900:	4632      	mov	r2, r6
 8007902:	463b      	mov	r3, r7
 8007904:	4620      	mov	r0, r4
 8007906:	460d      	mov	r5, r1
 8007908:	f7f8 fc26 	bl	8000158 <__aeabi_dsub>
 800790c:	4642      	mov	r2, r8
 800790e:	464b      	mov	r3, r9
 8007910:	f7f8 fc22 	bl	8000158 <__aeabi_dsub>
 8007914:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007918:	f7f8 fc1e 	bl	8000158 <__aeabi_dsub>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4650      	mov	r0, sl
 8007922:	4659      	mov	r1, fp
 8007924:	e618      	b.n	8007558 <__ieee754_pow+0x340>
 8007926:	2400      	movs	r4, #0
 8007928:	e68a      	b.n	8007640 <__ieee754_pow+0x428>
 800792a:	2601      	movs	r6, #1
 800792c:	e6a0      	b.n	8007670 <__ieee754_pow+0x458>
 800792e:	bf00      	nop
 8007930:	4a454eef 	.word	0x4a454eef
 8007934:	3fca7e28 	.word	0x3fca7e28
 8007938:	93c9db65 	.word	0x93c9db65
 800793c:	3fcd864a 	.word	0x3fcd864a
 8007940:	a91d4101 	.word	0xa91d4101
 8007944:	3fd17460 	.word	0x3fd17460
 8007948:	518f264d 	.word	0x518f264d
 800794c:	3fd55555 	.word	0x3fd55555
 8007950:	db6fabff 	.word	0xdb6fabff
 8007954:	3fdb6db6 	.word	0x3fdb6db6
 8007958:	33333303 	.word	0x33333303
 800795c:	3fe33333 	.word	0x3fe33333
 8007960:	e0000000 	.word	0xe0000000
 8007964:	3feec709 	.word	0x3feec709
 8007968:	dc3a03fd 	.word	0xdc3a03fd
 800796c:	3feec709 	.word	0x3feec709
 8007970:	145b01f5 	.word	0x145b01f5
 8007974:	be3e2fe0 	.word	0xbe3e2fe0
 8007978:	7ff00000 	.word	0x7ff00000
 800797c:	43400000 	.word	0x43400000
 8007980:	0003988e 	.word	0x0003988e
 8007984:	000bb679 	.word	0x000bb679
 8007988:	08007ec8 	.word	0x08007ec8
 800798c:	3ff00000 	.word	0x3ff00000
 8007990:	40080000 	.word	0x40080000
 8007994:	08007ea8 	.word	0x08007ea8
 8007998:	08007eb8 	.word	0x08007eb8
 800799c:	a39a      	add	r3, pc, #616	@ (adr r3, 8007c08 <__ieee754_pow+0x9f0>)
 800799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a2:	4630      	mov	r0, r6
 80079a4:	4639      	mov	r1, r7
 80079a6:	f7f8 fbd9 	bl	800015c <__adddf3>
 80079aa:	4642      	mov	r2, r8
 80079ac:	e9cd 0100 	strd	r0, r1, [sp]
 80079b0:	464b      	mov	r3, r9
 80079b2:	4620      	mov	r0, r4
 80079b4:	4629      	mov	r1, r5
 80079b6:	f7f8 fbcf 	bl	8000158 <__aeabi_dsub>
 80079ba:	4602      	mov	r2, r0
 80079bc:	460b      	mov	r3, r1
 80079be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079c2:	f7f9 f811 	bl	80009e8 <__aeabi_dcmpgt>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	f47f ae09 	bne.w	80075de <__ieee754_pow+0x3c6>
 80079cc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80079d0:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80079d4:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80079d8:	fa43 fa0a 	asr.w	sl, r3, sl
 80079dc:	44da      	add	sl, fp
 80079de:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80079e2:	489b      	ldr	r0, [pc, #620]	@ (8007c50 <__ieee754_pow+0xa38>)
 80079e4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80079e8:	4108      	asrs	r0, r1
 80079ea:	ea00 030a 	and.w	r3, r0, sl
 80079ee:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80079f2:	f1c1 0114 	rsb	r1, r1, #20
 80079f6:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80079fa:	4640      	mov	r0, r8
 80079fc:	fa4a fa01 	asr.w	sl, sl, r1
 8007a00:	f1bb 0f00 	cmp.w	fp, #0
 8007a04:	4649      	mov	r1, r9
 8007a06:	f04f 0200 	mov.w	r2, #0
 8007a0a:	bfb8      	it	lt
 8007a0c:	f1ca 0a00 	rsblt	sl, sl, #0
 8007a10:	f7f8 fba2 	bl	8000158 <__aeabi_dsub>
 8007a14:	4680      	mov	r8, r0
 8007a16:	4689      	mov	r9, r1
 8007a18:	2400      	movs	r4, #0
 8007a1a:	4632      	mov	r2, r6
 8007a1c:	463b      	mov	r3, r7
 8007a1e:	4640      	mov	r0, r8
 8007a20:	4649      	mov	r1, r9
 8007a22:	f7f8 fb9b 	bl	800015c <__adddf3>
 8007a26:	a37a      	add	r3, pc, #488	@ (adr r3, 8007c10 <__ieee754_pow+0x9f8>)
 8007a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	460d      	mov	r5, r1
 8007a30:	f7f8 fd4a 	bl	80004c8 <__aeabi_dmul>
 8007a34:	4642      	mov	r2, r8
 8007a36:	464b      	mov	r3, r9
 8007a38:	e9cd 0100 	strd	r0, r1, [sp]
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	4629      	mov	r1, r5
 8007a40:	f7f8 fb8a 	bl	8000158 <__aeabi_dsub>
 8007a44:	4602      	mov	r2, r0
 8007a46:	460b      	mov	r3, r1
 8007a48:	4630      	mov	r0, r6
 8007a4a:	4639      	mov	r1, r7
 8007a4c:	f7f8 fb84 	bl	8000158 <__aeabi_dsub>
 8007a50:	a371      	add	r3, pc, #452	@ (adr r3, 8007c18 <__ieee754_pow+0xa00>)
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	f7f8 fd37 	bl	80004c8 <__aeabi_dmul>
 8007a5a:	a371      	add	r3, pc, #452	@ (adr r3, 8007c20 <__ieee754_pow+0xa08>)
 8007a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a60:	4680      	mov	r8, r0
 8007a62:	4689      	mov	r9, r1
 8007a64:	4620      	mov	r0, r4
 8007a66:	4629      	mov	r1, r5
 8007a68:	f7f8 fd2e 	bl	80004c8 <__aeabi_dmul>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4640      	mov	r0, r8
 8007a72:	4649      	mov	r1, r9
 8007a74:	f7f8 fb72 	bl	800015c <__adddf3>
 8007a78:	4604      	mov	r4, r0
 8007a7a:	460d      	mov	r5, r1
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a84:	f7f8 fb6a 	bl	800015c <__adddf3>
 8007a88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a8c:	4680      	mov	r8, r0
 8007a8e:	4689      	mov	r9, r1
 8007a90:	f7f8 fb62 	bl	8000158 <__aeabi_dsub>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4620      	mov	r0, r4
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	f7f8 fb5c 	bl	8000158 <__aeabi_dsub>
 8007aa0:	4642      	mov	r2, r8
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	460f      	mov	r7, r1
 8007aa6:	464b      	mov	r3, r9
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	4649      	mov	r1, r9
 8007aac:	f7f8 fd0c 	bl	80004c8 <__aeabi_dmul>
 8007ab0:	a35d      	add	r3, pc, #372	@ (adr r3, 8007c28 <__ieee754_pow+0xa10>)
 8007ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	460d      	mov	r5, r1
 8007aba:	f7f8 fd05 	bl	80004c8 <__aeabi_dmul>
 8007abe:	a35c      	add	r3, pc, #368	@ (adr r3, 8007c30 <__ieee754_pow+0xa18>)
 8007ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac4:	f7f8 fb48 	bl	8000158 <__aeabi_dsub>
 8007ac8:	4622      	mov	r2, r4
 8007aca:	462b      	mov	r3, r5
 8007acc:	f7f8 fcfc 	bl	80004c8 <__aeabi_dmul>
 8007ad0:	a359      	add	r3, pc, #356	@ (adr r3, 8007c38 <__ieee754_pow+0xa20>)
 8007ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad6:	f7f8 fb41 	bl	800015c <__adddf3>
 8007ada:	4622      	mov	r2, r4
 8007adc:	462b      	mov	r3, r5
 8007ade:	f7f8 fcf3 	bl	80004c8 <__aeabi_dmul>
 8007ae2:	a357      	add	r3, pc, #348	@ (adr r3, 8007c40 <__ieee754_pow+0xa28>)
 8007ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae8:	f7f8 fb36 	bl	8000158 <__aeabi_dsub>
 8007aec:	4622      	mov	r2, r4
 8007aee:	462b      	mov	r3, r5
 8007af0:	f7f8 fcea 	bl	80004c8 <__aeabi_dmul>
 8007af4:	a354      	add	r3, pc, #336	@ (adr r3, 8007c48 <__ieee754_pow+0xa30>)
 8007af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afa:	f7f8 fb2f 	bl	800015c <__adddf3>
 8007afe:	4622      	mov	r2, r4
 8007b00:	462b      	mov	r3, r5
 8007b02:	f7f8 fce1 	bl	80004c8 <__aeabi_dmul>
 8007b06:	4602      	mov	r2, r0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4640      	mov	r0, r8
 8007b0c:	4649      	mov	r1, r9
 8007b0e:	f7f8 fb23 	bl	8000158 <__aeabi_dsub>
 8007b12:	4604      	mov	r4, r0
 8007b14:	460d      	mov	r5, r1
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	4640      	mov	r0, r8
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	f7f8 fcd3 	bl	80004c8 <__aeabi_dmul>
 8007b22:	2200      	movs	r2, #0
 8007b24:	e9cd 0100 	strd	r0, r1, [sp]
 8007b28:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007b2c:	4620      	mov	r0, r4
 8007b2e:	4629      	mov	r1, r5
 8007b30:	f7f8 fb12 	bl	8000158 <__aeabi_dsub>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b3c:	f7f8 fdee 	bl	800071c <__aeabi_ddiv>
 8007b40:	4632      	mov	r2, r6
 8007b42:	4604      	mov	r4, r0
 8007b44:	460d      	mov	r5, r1
 8007b46:	463b      	mov	r3, r7
 8007b48:	4640      	mov	r0, r8
 8007b4a:	4649      	mov	r1, r9
 8007b4c:	f7f8 fcbc 	bl	80004c8 <__aeabi_dmul>
 8007b50:	4632      	mov	r2, r6
 8007b52:	463b      	mov	r3, r7
 8007b54:	f7f8 fb02 	bl	800015c <__adddf3>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	4629      	mov	r1, r5
 8007b60:	f7f8 fafa 	bl	8000158 <__aeabi_dsub>
 8007b64:	4642      	mov	r2, r8
 8007b66:	464b      	mov	r3, r9
 8007b68:	f7f8 faf6 	bl	8000158 <__aeabi_dsub>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	2000      	movs	r0, #0
 8007b72:	4938      	ldr	r1, [pc, #224]	@ (8007c54 <__ieee754_pow+0xa3c>)
 8007b74:	f7f8 faf0 	bl	8000158 <__aeabi_dsub>
 8007b78:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007b7c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8007b80:	da2e      	bge.n	8007be0 <__ieee754_pow+0x9c8>
 8007b82:	4652      	mov	r2, sl
 8007b84:	f000 f870 	bl	8007c68 <scalbn>
 8007b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b8c:	f7ff bbed 	b.w	800736a <__ieee754_pow+0x152>
 8007b90:	4c31      	ldr	r4, [pc, #196]	@ (8007c58 <__ieee754_pow+0xa40>)
 8007b92:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007b96:	42a3      	cmp	r3, r4
 8007b98:	d91a      	bls.n	8007bd0 <__ieee754_pow+0x9b8>
 8007b9a:	4b30      	ldr	r3, [pc, #192]	@ (8007c5c <__ieee754_pow+0xa44>)
 8007b9c:	440b      	add	r3, r1
 8007b9e:	4303      	orrs	r3, r0
 8007ba0:	d009      	beq.n	8007bb6 <__ieee754_pow+0x99e>
 8007ba2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f7f8 feff 	bl	80009ac <__aeabi_dcmplt>
 8007bae:	3800      	subs	r0, #0
 8007bb0:	bf18      	it	ne
 8007bb2:	2001      	movne	r0, #1
 8007bb4:	e444      	b.n	8007440 <__ieee754_pow+0x228>
 8007bb6:	4642      	mov	r2, r8
 8007bb8:	464b      	mov	r3, r9
 8007bba:	f7f8 facd 	bl	8000158 <__aeabi_dsub>
 8007bbe:	4632      	mov	r2, r6
 8007bc0:	463b      	mov	r3, r7
 8007bc2:	f7f8 ff07 	bl	80009d4 <__aeabi_dcmpge>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	d1eb      	bne.n	8007ba2 <__ieee754_pow+0x98a>
 8007bca:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8007c60 <__ieee754_pow+0xa48>
 8007bce:	e6fd      	b.n	80079cc <__ieee754_pow+0x7b4>
 8007bd0:	469a      	mov	sl, r3
 8007bd2:	4b24      	ldr	r3, [pc, #144]	@ (8007c64 <__ieee754_pow+0xa4c>)
 8007bd4:	459a      	cmp	sl, r3
 8007bd6:	f63f aef9 	bhi.w	80079cc <__ieee754_pow+0x7b4>
 8007bda:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007bde:	e71b      	b.n	8007a18 <__ieee754_pow+0x800>
 8007be0:	4621      	mov	r1, r4
 8007be2:	e7d1      	b.n	8007b88 <__ieee754_pow+0x970>
 8007be4:	2000      	movs	r0, #0
 8007be6:	491b      	ldr	r1, [pc, #108]	@ (8007c54 <__ieee754_pow+0xa3c>)
 8007be8:	f7ff bb34 	b.w	8007254 <__ieee754_pow+0x3c>
 8007bec:	2000      	movs	r0, #0
 8007bee:	2100      	movs	r1, #0
 8007bf0:	f7ff bb30 	b.w	8007254 <__ieee754_pow+0x3c>
 8007bf4:	4650      	mov	r0, sl
 8007bf6:	4659      	mov	r1, fp
 8007bf8:	f7ff bb2c 	b.w	8007254 <__ieee754_pow+0x3c>
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	f7ff bb79 	b.w	80072f4 <__ieee754_pow+0xdc>
 8007c02:	2400      	movs	r4, #0
 8007c04:	f7ff bb64 	b.w	80072d0 <__ieee754_pow+0xb8>
 8007c08:	652b82fe 	.word	0x652b82fe
 8007c0c:	3c971547 	.word	0x3c971547
 8007c10:	00000000 	.word	0x00000000
 8007c14:	3fe62e43 	.word	0x3fe62e43
 8007c18:	fefa39ef 	.word	0xfefa39ef
 8007c1c:	3fe62e42 	.word	0x3fe62e42
 8007c20:	0ca86c39 	.word	0x0ca86c39
 8007c24:	be205c61 	.word	0xbe205c61
 8007c28:	72bea4d0 	.word	0x72bea4d0
 8007c2c:	3e663769 	.word	0x3e663769
 8007c30:	c5d26bf1 	.word	0xc5d26bf1
 8007c34:	3ebbbd41 	.word	0x3ebbbd41
 8007c38:	af25de2c 	.word	0xaf25de2c
 8007c3c:	3f11566a 	.word	0x3f11566a
 8007c40:	16bebd93 	.word	0x16bebd93
 8007c44:	3f66c16c 	.word	0x3f66c16c
 8007c48:	5555553e 	.word	0x5555553e
 8007c4c:	3fc55555 	.word	0x3fc55555
 8007c50:	fff00000 	.word	0xfff00000
 8007c54:	3ff00000 	.word	0x3ff00000
 8007c58:	4090cbff 	.word	0x4090cbff
 8007c5c:	3f6f3400 	.word	0x3f6f3400
 8007c60:	4090cc00 	.word	0x4090cc00
 8007c64:	3fe00000 	.word	0x3fe00000

08007c68 <scalbn>:
 8007c68:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8007c6c:	4616      	mov	r6, r2
 8007c6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c72:	4683      	mov	fp, r0
 8007c74:	468c      	mov	ip, r1
 8007c76:	460b      	mov	r3, r1
 8007c78:	b982      	cbnz	r2, 8007c9c <scalbn+0x34>
 8007c7a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007c7e:	4303      	orrs	r3, r0
 8007c80:	d039      	beq.n	8007cf6 <scalbn+0x8e>
 8007c82:	4b2f      	ldr	r3, [pc, #188]	@ (8007d40 <scalbn+0xd8>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	f7f8 fc1f 	bl	80004c8 <__aeabi_dmul>
 8007c8a:	4b2e      	ldr	r3, [pc, #184]	@ (8007d44 <scalbn+0xdc>)
 8007c8c:	4683      	mov	fp, r0
 8007c8e:	429e      	cmp	r6, r3
 8007c90:	468c      	mov	ip, r1
 8007c92:	da0d      	bge.n	8007cb0 <scalbn+0x48>
 8007c94:	a326      	add	r3, pc, #152	@ (adr r3, 8007d30 <scalbn+0xc8>)
 8007c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9a:	e01b      	b.n	8007cd4 <scalbn+0x6c>
 8007c9c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8007ca0:	42ba      	cmp	r2, r7
 8007ca2:	d109      	bne.n	8007cb8 <scalbn+0x50>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	f7f8 fa59 	bl	800015c <__adddf3>
 8007caa:	4683      	mov	fp, r0
 8007cac:	468c      	mov	ip, r1
 8007cae:	e022      	b.n	8007cf6 <scalbn+0x8e>
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007cb6:	3a36      	subs	r2, #54	@ 0x36
 8007cb8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8007cbc:	428e      	cmp	r6, r1
 8007cbe:	dd0c      	ble.n	8007cda <scalbn+0x72>
 8007cc0:	a31d      	add	r3, pc, #116	@ (adr r3, 8007d38 <scalbn+0xd0>)
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	461c      	mov	r4, r3
 8007cc8:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8007ccc:	f361 74df 	bfi	r4, r1, #31, #1
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	481d      	ldr	r0, [pc, #116]	@ (8007d48 <scalbn+0xe0>)
 8007cd4:	f7f8 fbf8 	bl	80004c8 <__aeabi_dmul>
 8007cd8:	e7e7      	b.n	8007caa <scalbn+0x42>
 8007cda:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007cde:	4432      	add	r2, r6
 8007ce0:	428a      	cmp	r2, r1
 8007ce2:	dced      	bgt.n	8007cc0 <scalbn+0x58>
 8007ce4:	2a00      	cmp	r2, #0
 8007ce6:	dd0a      	ble.n	8007cfe <scalbn+0x96>
 8007ce8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007cec:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007cf0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007cf4:	46ac      	mov	ip, r5
 8007cf6:	4658      	mov	r0, fp
 8007cf8:	4661      	mov	r1, ip
 8007cfa:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8007cfe:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007d02:	da09      	bge.n	8007d18 <scalbn+0xb0>
 8007d04:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8007d08:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8007d0c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8007d10:	480e      	ldr	r0, [pc, #56]	@ (8007d4c <scalbn+0xe4>)
 8007d12:	f041 011f 	orr.w	r1, r1, #31
 8007d16:	e7bd      	b.n	8007c94 <scalbn+0x2c>
 8007d18:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007d1c:	3236      	adds	r2, #54	@ 0x36
 8007d1e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007d22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007d26:	4658      	mov	r0, fp
 8007d28:	4629      	mov	r1, r5
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	4b08      	ldr	r3, [pc, #32]	@ (8007d50 <scalbn+0xe8>)
 8007d2e:	e7d1      	b.n	8007cd4 <scalbn+0x6c>
 8007d30:	c2f8f359 	.word	0xc2f8f359
 8007d34:	01a56e1f 	.word	0x01a56e1f
 8007d38:	8800759c 	.word	0x8800759c
 8007d3c:	7e37e43c 	.word	0x7e37e43c
 8007d40:	43500000 	.word	0x43500000
 8007d44:	ffff3cb0 	.word	0xffff3cb0
 8007d48:	8800759c 	.word	0x8800759c
 8007d4c:	c2f8f359 	.word	0xc2f8f359
 8007d50:	3c900000 	.word	0x3c900000

08007d54 <with_errno>:
 8007d54:	b570      	push	{r4, r5, r6, lr}
 8007d56:	4604      	mov	r4, r0
 8007d58:	460d      	mov	r5, r1
 8007d5a:	4616      	mov	r6, r2
 8007d5c:	f7ff f85a 	bl	8006e14 <__errno>
 8007d60:	4629      	mov	r1, r5
 8007d62:	6006      	str	r6, [r0, #0]
 8007d64:	4620      	mov	r0, r4
 8007d66:	bd70      	pop	{r4, r5, r6, pc}

08007d68 <xflow>:
 8007d68:	b513      	push	{r0, r1, r4, lr}
 8007d6a:	4604      	mov	r4, r0
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4610      	mov	r0, r2
 8007d70:	b10c      	cbz	r4, 8007d76 <xflow+0xe>
 8007d72:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007d76:	e9cd 2300 	strd	r2, r3, [sp]
 8007d7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d7e:	f7f8 fba3 	bl	80004c8 <__aeabi_dmul>
 8007d82:	2222      	movs	r2, #34	@ 0x22
 8007d84:	b002      	add	sp, #8
 8007d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d8a:	f7ff bfe3 	b.w	8007d54 <with_errno>

08007d8e <__math_uflow>:
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007d94:	f7ff bfe8 	b.w	8007d68 <xflow>

08007d98 <__math_oflow>:
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8007d9e:	f7ff bfe3 	b.w	8007d68 <xflow>
	...

08007da4 <_init>:
 8007da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da6:	bf00      	nop
 8007da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007daa:	bc08      	pop	{r3}
 8007dac:	469e      	mov	lr, r3
 8007dae:	4770      	bx	lr

08007db0 <_fini>:
 8007db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db2:	bf00      	nop
 8007db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db6:	bc08      	pop	{r3}
 8007db8:	469e      	mov	lr, r3
 8007dba:	4770      	bx	lr
